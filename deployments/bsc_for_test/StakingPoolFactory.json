{
  "address": "0x0D7646d015a5576F7fEf090fAC0F7F5bb88B8EfF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TotemToken",
          "name": "_totemToken",
          "type": "address"
        },
        {
          "internalType": "contract RewardManager",
          "name": "_rewardManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[10]",
          "name": "variables",
          "type": "uint256[10]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PoolCreatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PoolCreatorRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPoolCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrappedTokenContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_wrappedTokenSymbole",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_poolType",
          "type": "string"
        },
        {
          "internalType": "uint256[10]",
          "name": "_variables",
          "type": "uint256[10]"
        },
        {
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPoolCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePoolCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract RewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStakingPoolTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setDefaultTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinimuntToStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolTaxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemToken",
      "outputs": [
        {
          "internalType": "contract TotemToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0e0ff8a28ce926b7b0f99bdf58c58994541c24aef9e60426b1cb962b1c72864",
  "receipt": {
    "to": null,
    "from": "0xf92abF80266fD710Ec7a8A644915B458abe34160",
    "contractAddress": "0x0D7646d015a5576F7fEf090fAC0F7F5bb88B8EfF",
    "transactionIndex": 5,
    "gasUsed": "5345448",
    "logsBloom": "0x
    "blockHash": "0x5aee6592eeac27970b1ec24886cf50170c33f942c290313deb03a97601fb9f84",
    "transactionHash": "0xc0e0ff8a28ce926b7b0f99bdf58c58994541c24aef9e60426b1cb962b1c72864",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 12136675,
        "transactionHash": "0xc0e0ff8a28ce926b7b0f99bdf58c58994541c24aef9e60426b1cb962b1c72864",
        "address": "0x0D7646d015a5576F7fEf090fAC0F7F5bb88B8EfF",
        "topics": [
          "0xac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b61",
          "0x000000000000000000000000f92abf80266fd710ec7a8a644915b458abe34160"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x5aee6592eeac27970b1ec24886cf50170c33f942c290313deb03a97601fb9f84"
      }
    ],
    "blockNumber": 12136675,
    "cumulativeGasUsed": "5643116",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaaB1f1390186eC3D33e7c73F6ADdcf23c3026A8A",
    "0x0ab07A727F145D07eEBc28d3750A299422E00FF9",
    "0x10ED43C718714eb63d5aA57B78B54704E256024E",
    "0xe9e7cea3dedca5984780bafc599bd69add087d56"
  ],
  "solcInputHash": "f93e12afe44b3baf8f0c15c58e5dc92d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"_totemToken\",\"type\":\"address\"},{\"internalType\":\"contract RewardManager\",\"name\":\"_rewardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[10]\",\"name\":\"variables\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PoolCreatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PoolCreatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPoolCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrappedTokenContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_wrappedTokenSymbole\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poolType\",\"type\":\"string\"},{\"internalType\":\"uint256[10]\",\"name\":\"_variables\",\"type\":\"uint256[10]\"},{\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPoolCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePoolCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract RewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakingPoolTaxRate\",\"type\":\"uint256\"}],\"name\":\"setDefaultTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimuntToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x62c8752bb170233359e653c61d491d6a79fe1d7d7281377c5ac4e9c03ce811ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0x8344571960f250b1c03ba9f259c452b26b04370ac4723ef262969d822174bee6\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0x5f65c50276ea5c113b1e51e0d646d7e91c9aa15d12214543ddd320769de308f2\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../PancakeSwap/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributor {\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    constructor(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    // the function should be rename to getSwapRouter\\n    function getswapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0x00375429519c6cec13e64267530e31d25b7d5d53790c570bf3e81e3285c0700e\",\"license\":\"UNLICENSED\"},\"contracts/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILocker {\\n    /**\\n     * @dev Fails if transaction is not allowed.\\n     * Return values can be ignored for AntiBot launches\\n     */\\n    function lockOrGetPenalty(address source, address dest)\\n        external\\n        returns (bool, uint256);\\n}\\n\\ninterface ILockerUser {\\n    function locker() external view returns (ILocker);\\n\\n    /**\\n     * @dev Emitted when setLocker is called.\\n     */\\n    event SetLocker(address indexed locker);\\n}\\n\\n\",\"keccak256\":\"0x51a18df7a6b1708e8d614f547eb09dd79e64093413bb0081dbb8f0f411ce0e96\",\"license\":\"UNLICENSED\"},\"contracts/PancakeSwap/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2b582633995bad7e354c4a36176081b0a41b234e75ed9458ac9ac53afd82e84e\",\"license\":\"UNLICENSED\"},\"contracts/Price/PriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceConsumer {\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /**\\n     * @param _oracle The chainlink node oracle address to send requests\\n     */\\n    constructor(address _oracle) {\\n        // commented for updatingMaturingPrice function in staking pool to work correctly\\n        // require(_oracle != address(0));\\n        priceFeed = AggregatorV3Interface(_oracle);\\n    }\\n\\n    /**\\n     * Returns decimals for oracle contract\\n     */\\n    function getDecimals() external view returns (uint8) {\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * Returns the latest price from oracle contract\\n     */\\n    function getLatestPrice() public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n\\n    // TODO: a function must be added to get the price on a specific timestamp\\n    // at the moment chainlink provide a function to get the price on a round ID\\n    // but all round IDs don't return a valid price and mapping the round IDs to\\n    // timestamps is not very well defined\\n}\\n\",\"keccak256\":\"0xd7ac173689dd7d69503b0708dad3ef2122e3f1f0eaaead1f7ceb2283fa887d0c\",\"license\":\"UNLICENSED\"},\"contracts/Role/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Operator is Context {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    constructor() {\\n        if (!isOperator(_msgSender())) {\\n            _addOperator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            isOperator(_msgSender()),\\n            \\\"OperatorRole: caller does not have the Operator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    function addOperator(address account) public onlyOperator {\\n        _addOperator(account);\\n    }\\n\\n    function renounceOperator() public {\\n        _removeOperator(_msgSender());\\n    }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe3ed3896ec9e9cc477f1318e9e5f109704eac51255bca6caa36e20fed6965de9\",\"license\":\"UNLICENSED\"},\"contracts/Role/PoolCreator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\ncontract PoolCreator is Context {\\n    using Roles for Roles.Role;\\n\\n    event PoolCreatorAdded(address indexed account);\\n    event PoolCreatorRemoved(address indexed account);\\n\\n    Roles.Role private _poolCreators;\\n\\n    constructor() {\\n        if (!isPoolCreator(_msgSender())) {\\n            _addPoolCreator(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyPoolCreator() {\\n        require(\\n            isPoolCreator(_msgSender()),\\n            \\\"PoolCreatorRole: caller does not have the PoolCreator role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isPoolCreator(address account) public view returns (bool) {\\n        return _poolCreators.has(account);\\n    }\\n\\n    function addPoolCreator(address account) public onlyPoolCreator {\\n        _addPoolCreator(account);\\n    }\\n\\n    function renouncePoolCreator() public {\\n        _removePoolCreator(_msgSender());\\n    }\\n\\n    function _addPoolCreator(address account) internal {\\n        _poolCreators.add(account);\\n        emit PoolCreatorAdded(account);\\n    }\\n\\n    function _removePoolCreator(address account) internal {\\n        _poolCreators.remove(account);\\n        emit PoolCreatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xd5af536f903c3145a6919765e6b0ab0084d52ac0e30b2d3b7795f44a8434f848\",\"license\":\"UNLICENSED\"},\"contracts/Role/Rewarder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract Rewarder is Context {\\n    using Roles for Roles.Role;\\n\\n    event RewarderAdded(address indexed account);\\n    event RewarderRemoved(address indexed account);\\n\\n    Roles.Role private _rewarders;\\n\\n    constructor() {\\n        if (!isRewarder(_msgSender())) {\\n            _addRewarder(_msgSender());\\n        }\\n    }\\n\\n    modifier onlyRewarder() {\\n        require(\\n            isRewarder(_msgSender()),\\n            \\\"RewarderRole: caller does not have the Rewarder role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isRewarder(address account) public view returns (bool) {\\n        return _rewarders.has(account);\\n    }\\n\\n    function addRewarder(address account) public onlyRewarder {\\n        _addRewarder(account);\\n    }\\n\\n    function renounceRewarder() public {\\n        _removeRewarder(_msgSender());\\n    }\\n\\n    function _addRewarder(address account) internal {\\n        _rewarders.add(account);\\n        emit RewarderAdded(account);\\n    }\\n\\n    function _removeRewarder(address account) internal {\\n        _rewarders.remove(account);\\n        emit RewarderRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x854556cd27f92d4f52e87247d947760942df133464e01f580d4716cc64fe4e5c\",\"license\":\"UNLICENSED\"},\"contracts/Role/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0x1156e37e7835772537d5dfb53649b1e39b1eff5791f6bd759664168fcc7c8462\",\"license\":\"UNLICENSED\"},\"contracts/Staking/RewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../TotemToken.sol\\\";\\nimport \\\"../Role/Operator.sol\\\";\\nimport \\\"../Role/Rewarder.sol\\\";\\n\\ncontract RewardManager is Context, Ownable, Operator, Rewarder {\\n    TotemToken totemToken;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n    constructor(TotemToken _totemToken) {\\n        totemToken = _totemToken;\\n    }\\n\\n    function setOperator(address _newOperator) public onlyOwner {\\n        require(\\n            _newOperator != address(0),\\n            \\\"0200 New Operator address cannot be zero.\\\"\\n        );\\n\\n        addOperator(_newOperator);\\n        emit SetOperator(_newOperator);\\n    }\\n\\n    function addPool(address _poolAddress) public onlyOperator {\\n        require(\\n            _poolAddress != address(0),\\n            \\\"0210 Pool address cannot be zero.\\\"\\n        );\\n\\n        addRewarder(_poolAddress);\\n        emit SetRewarder(_poolAddress);\\n    }\\n\\n    function rewardUser(address _user, uint256 _amount) public onlyRewarder {\\n        require(_user != address(0), \\\"0230 User address cannot be zero.\\\");\\n\\n        require(totemToken.transfer(_user, _amount));\\n    }\\n}\",\"keccak256\":\"0x8022b860bf7f1c529cf76ea3c5cd6a9ea5a0ca663c40550effa98b6aa9d74d60\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"../Price/PriceConsumer.sol\\\";\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributor.sol\\\"; \\n\\ncontract StakingPool is\\n    Context,\\n    Ownable,\\n    PriceConsumer,\\n    USDRetriever,\\n    WrappedTokenDistributor\\n{\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    TotemToken public immutable totemToken;\\n\\n    // FIXME: change the following variables types to add more flexibilty to the contract\\n    RewardManager public immutable rewardManager;\\n    IERC20 public immutable wrappedToken;\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    uint256 public immutable startDate;\\n    uint256 public immutable lockTime;\\n    uint256 public immutable maturityTime;\\n\\n    uint256 public immutable sizeAllocation;\\n    uint256 public immutable stakeApr;\\n\\n    uint256 public immutable prizeAmount;\\n\\n    // usdPrizeAmount is the enabler of WrappedToken rewarder if it would be 0 then the pool is only TOTM rewarder\\n    uint256 public immutable usdPrizeAmount;\\n\\n    uint256 public immutable stakeTaxRate;\\n    uint256 public immutable minimumStakeAmount;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    uint256 public totalStaked;\\n\\n    // TODO: the maturing price is not the real maturity price and it depends on\\n    // the calling endPool function\\n    uint256 public maturingPrice;\\n\\n    // FIXME: change the sizeLimitRange to basisPoint format\\n    uint256 public constant sizeLimitRangeRate = 5;\\n    // TODO: implement a mechanism to get the decimals from the oracle\\n    uint256 public constant oracleDecimal = 8;\\n\\n    uint256 public immutable potentialCollabReward;\\n    uint256 public immutable collaborativeRange;\\n    // based on the white paper the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500)\\n    uint256 public collaborativeReward; \\n\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    bool public immutable isEnhancedEnabled;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    bool public isAnEmergency;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n\\n    event Stake(address indexed user, uint256 amount, uint256 pricePrediction);\\n    event Withdraw(address indexed user, uint256 amount, uint256 wrappedTokenAmount);\\n    event Unstake(address indexed user, uint256 amount);\\n    event PoolLocked();\\n    event PoolSorted();\\n    event PoolMatured();\\n    event PoolDeleted();\\n\\n    constructor(\\n        string memory _wrappedTokenSymbol,\\n        string memory _poolType,\\n        TotemToken _totemToken,\\n        RewardManager _rewardManager,\\n        address _poolCreator,\\n        address _swapRouter,\\n        address _oracleContract,\\n        address _usdToken,\\n        address _wrappedTokenContract,\\n\\n        uint256[10] memory _variables,\\n        bool _isEnhancedEnabled\\n    )\\n        PriceConsumer(_oracleContract)\\n        WrappedTokenDistributor(_swapRouter, _usdToken, _wrappedTokenContract)\\n    {\\n        wrappedTokenSymbol = _wrappedTokenSymbol;\\n        poolType = _poolType;\\n\\n        totemToken = _totemToken;\\n        rewardManager = _rewardManager;\\n        oracleContract = _oracleContract;\\n\\n        poolCreator = _poolCreator;\\n\\n        setUSDToken(_usdToken);\\n        wrappedToken = IERC20(_wrappedTokenContract);\\n\\n        startDate = block.timestamp;\\n        maturityTime = _variables[0];\\n        lockTime = _variables[1];\\n\\n        sizeAllocation = _variables[2];\\n        stakeApr = _variables[3];\\n        prizeAmount = _variables[4];\\n        usdPrizeAmount = _variables[5];\\n        potentialCollabReward = _variables[6];\\n        collaborativeRange = _variables[7];\\n        // FIXME: _variables[8] is burnRate \\n        stakeTaxRate = _variables[8];\\n        minimumStakeAmount = _variables[9];   \\n\\n\\n        isEnhancedEnabled = _isEnhancedEnabled; \\n\\n        //FIXME: these are constant, why do we set them in the constructor?\\n        prizeRewardRates.push(PrizeRewardRate({rank: 1, percentage: 3750}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 2, percentage: 2000}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 3, percentage: 1000}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 10, percentage: 250}));\\n        prizeRewardRates.push(PrizeRewardRate({rank: 25, percentage: 100}));\\n    }\\n\\n    function stake(uint256 _amount, uint256 _pricePrediction) external {\\n        //TODO: check to see if the locktime has passed, call _lockPool\\n        require(_amount >= minimumStakeAmount, \\\"0311 Amount can't be less than the minimum\\\");\\n        require(!isLocked, \\\"0310 Pool is locked\\\");\\n        \\n        uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax =\\n            totemToken.taxExempt(_msgSender()) ? 0 : _amount.mulBP(taxRate);\\n        \\n        require(\\n            totalStaked.add(_amount).sub(tax) <= sizeAllocation.add(limitRange), \\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        \\n        uint256 stakeTaxAmount;\\n        // now the stakeTaxAmount is the staking tax and the _amount is initial amount minus the staking tax\\n        (stakeTaxAmount, _amount) = getStakingTax(_amount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (_amount + stakeTaxAmount)\\n        );\\n\\n        // This is to remove token tax (not staking tax) from the amount\\n        _amount = _amount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        totalStaked = totalStaked.add(_amount);\\n\\n        // FIXME: spilit the stake function into two functions \\n        stakers.push(\\n            Staker({\\n                stakerAddress: _msgSender(),\\n                index: predictions[_msgSender()].length\\n            })\\n        );\\n\\n        predictions[_msgSender()].push(\\n            StakeWithPrediction({\\n                stakedBalance: _amount,\\n                stakedTime: block.timestamp,\\n                amountWithdrawn: 0,\\n                lastWithdrawalTime: block.timestamp,\\n                pricePrediction: _pricePrediction,\\n                // maybe it's better to use the max number available for rank and differece\\n                // because the 0 is the best number\\n                difference: type(uint256).max,\\n                rank: type(uint256).max,\\n                prizeRewardWithdrawn: false,\\n                didUnstake: false\\n            })\\n        );\\n\\n        if (totalStaked >= sizeAllocation) {\\n            // if the staking pool has not anymore capacity then it is locked\\n            _lockPool();\\n        }\\n\\n        emit Stake(_msgSender(), _amount, _pricePrediction);\\n    }\\n\\n    function claimReward() external {\\n        (uint256 reward, uint256 wrappedTokenReward) = _getTotalReward(_msgSender());\\n\\n        if (reward > 0) {\\n            if (totemToken.balanceOf(address(rewardManager)) >= reward) {\\n                // FIXME: all transfers should be in require, rewardUser is using require\\n                rewardManager.rewardUser(_msgSender(), reward);\\n            }\\n        }\\n        \\n        // _wthdraw don't withdraw actually, and only update the array in the map\\n        _withdrawStakingReward(_msgSender());\\n        \\n        //FIXME: withdraws must come before the actual transfers to prevent attacks\\n\\n        if (isMatured) {\\n\\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenReward > 0) require(wrappedToken.transfer(_msgSender(), wrappedTokenReward), \\\"0320\\\");\\n\\n                // _withdraw don't withdraw actually, and only update the array in the map\\n                _withdrawPrizeReward(_msgSender());\\n            }\\n\\n            // Users can't unstake until the pool matures\\n            uint256 stakedBalance = _getTotalStakedBalance(_msgSender());\\n            if (stakedBalance > 0) {\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                // _wthdraw don't withdraw actually, and only update the array in the map\\n                _withdrawStakedBalance(_msgSender());\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        emit Withdraw(_msgSender(), reward, wrappedTokenReward);\\n    }\\n\\n    function indexedClaimReward(uint256 stakeIndex) external {\\n        (uint256 reward, uint256 wrappedTokenReward) = _getIndexedReward(_msgSender(), stakeIndex);\\n\\n        if (reward > 0) {\\n            // Send the token reward only when the rewardManager has the enough fund\\n            if (totemToken.balanceOf(address(rewardManager)) >= reward) {\\n                rewardManager.rewardUser(_msgSender(), reward);\\n            }\\n        }\\n        \\n        _withdrawIndexedStakingReward(_msgSender(), stakeIndex);\\n        \\n\\n        if (isMatured) {\\n            \\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenReward > 0) require(wrappedToken.transfer(_msgSender(), wrappedTokenReward), \\\"0330\\\");\\n\\n                _withdrawIndexedPrizeReward(_msgSender(), stakeIndex);\\n            }\\n\\n\\n            uint256 stakedBalance = _getIndexedStakedBalance(_msgSender(), stakeIndex);\\n            if (stakedBalance > 0) {\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                _withdrawIndexedStakedBalance(_msgSender(), stakeIndex);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        emit Withdraw(_msgSender(), reward, wrappedTokenReward);\\n    }\\n\\n    function purchaseWrappedToken(uint256 usdAmount, uint256 deadline)\\n        external\\n        onlyPoolCreator\\n    {\\n        //TODO: require usdAmount to be more than usdPrizeAmount, to have enough rewards!\\n        require(usdPrizeAmount > 0, \\\"0340 The pool is only TOTM rewarder\\\");\\n        \\n        require(usdAmount > 0, \\\"0341 Amount can't be zero\\\");\\n\\n        require(deadline >= block.timestamp, \\\"0342 Deadline is low\\\");\\n\\n        // This approves tokens to swap router\\n        address swapRouterAddress = getswapRouter();\\n        approveTokens(swapRouterAddress, usdAmount);\\n        \\n        // Get equivalent USD amount for Wrapped Token\\n        uint256 wrappedTokenAmount = getEstimatedWrappedTokenForUSD(usdAmount);\\n\\n        uint256 wrappedTokenAmountWithSlippage =\\n            wrappedTokenAmount.sub(wrappedTokenAmount.mulBP(300));\\n\\n        transferTokensThroughSwap(\\n            address(this),\\n            usdAmount,\\n            wrappedTokenAmountWithSlippage,\\n            deadline\\n        );\\n    }\\n\\n    function getWrappedTokenBalance() public view returns (uint256) {\\n        return wrappedToken.balanceOf(address(this));\\n    }\\n\\n    function getPredictionRange(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256[4] memory steps =\\n            [uint256(27500), 30000, 17500, type(uint256).max];\\n        uint256[4] memory ranges = [uint256(1000), 700, 375, 200];\\n        uint256 totalRange = 0;\\n\\n        for (uint256 i = 0; i < steps.length; i++) {\\n            uint256 stepAmount =\\n                i == steps.length - 1 ? amount : steps[i].mul(10**18);\\n            uint256 step = amount > stepAmount ? stepAmount : amount;\\n            totalRange = totalRange.add(\\n                // the use of oracleDecimal -2 is because of ranges element (100 = 1 dollar range)\\n                step.mul(ranges[i]).mul(10**(oracleDecimal-2)).div(500).div(10**18)\\n            );\\n\\n            if (amount <= stepAmount) break;\\n\\n            amount = amount.sub(stepAmount);\\n        }\\n        return totalRange;\\n    }\\n\\n    // This function is to get the avg price prediction for calculating collaborative reward\\n    function getAveragePricePrediction() public view returns (uint256) {\\n        if (totalStaked == 0) return 0;\\n        uint256 avgPricePrediction = 0;\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            StakeWithPrediction memory prediction =\\n                predictions[stakers[i].stakerAddress][stakers[i].index];\\n\\n            avgPricePrediction = avgPricePrediction.add(\\n                prediction.pricePrediction.mul(prediction.stakedBalance)\\n            );\\n        }\\n\\n        avgPricePrediction = avgPricePrediction.div(totalStaked);\\n\\n        return avgPricePrediction;\\n    }\\n\\n    function lockPool() public onlyPoolCreator {\\n        //FIXME: add a require to prevent locking a pool before locktime or max size allocation\\n        _lockPool();\\n    }\\n\\n    function _lockPool() internal {\\n        isLocked = true;\\n\\n        emit PoolLocked();\\n    }\\n\\n    // If oracle is not zero address, then _price is ignored\\n    // When there is no oracle, _price is the maturingPrice and is set manually by the pool creator\\n    function updateMaturingPrice(uint256 _price) external onlyPoolCreator {\\n        require(\\n            block.timestamp >= startDate + lockTime + maturityTime,\\n            \\\"0350 Can't set maturing price before the maturity time\\\"\\n        );\\n\\n        if (oracleContract == address(0)) {\\n            maturingPrice = _price;\\n        } else {\\n            maturingPrice = getLatestPrice();\\n        }\\n    }\\n\\n    function endPool() external onlyPoolCreator {\\n        require(\\n            block.timestamp >= startDate + lockTime + maturityTime,\\n            \\\"0360 Can't end pool before the maturity time\\\"\\n        );\\n        //TODO: check to see if there is enough USD to buy the wrapped token with, the mimimum USD\\n        // must be usdPrizeAmount, if there is not, do not allow endPool\\n        if (usdPrizeAmount > 0) {\\n            require(\\n                getWrappedTokenBalance() != 0, \\n                \\\"0361 WrappedToken Rewards not available\\\"\\n            );\\n        }\\n\\n        if (stakers.length > 0) {\\n            require(\\n                sortedStakers.length != 0,\\n                \\\"0362 first should sort\\\"\\n            );\\n        }\\n\\n        // potentialCollabReward allows the admin to set the collaborateive reward \\n        if (potentialCollabReward > 0) {\\n            // the collaborative reward only gave to the pools that the average price predicted with \\n            // the accuracy of 25 $\\n            uint256 avgPricePrediction = getAveragePricePrediction();\\n            if (_getDifference(avgPricePrediction, collaborativeRange) == 0) {\\n                collaborativeReward = potentialCollabReward;\\n            }\\n        }\\n\\n        uint256 max = sortedStakers.length > 25 ? 25 : sortedStakers.length;\\n        for (uint256 i = 0; i < max; i++) {\\n            predictions[sortedStakers[i].stakerAddress][sortedStakers[i].index].rank =\\n                i + 1;\\n        }\\n\\n        // there is possibility that the size allocation is not reached \\n        // and the isLocked is not set to ture\\n        isLocked = true;\\n        isMatured = true;\\n\\n        emit PoolMatured();\\n    }\\n    function deletePool() external onlyPoolCreator {\\n        isDeleted = true;\\n        emit PoolDeleted();\\n    }\\n\\n    function _getDifference(uint256 prediction, uint256 range)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (prediction > maturingPrice) {\\n            if (prediction.sub(range) <= maturingPrice) return 0;\\n            else return prediction.sub(range).sub(maturingPrice);\\n        } else {\\n            if (prediction.add(range) >= maturingPrice) return 0;\\n            else return maturingPrice.sub(prediction.add(range));\\n        }\\n    }\\n\\n    function setSortedStakers(address[25] calldata addrArray, uint256[25] calldata indexArray)\\n        external \\n        onlyPoolCreator \\n    {\\n\\n        for (uint256 i = 0; i < addrArray.length; i++) {\\n\\n            // the first 0 address means the other addresses are also 0 so they won't be checked\\n            if (addrArray[i] == address(0)) break;\\n\\n            sortedStakers.push(\\n            Staker({\\n                stakerAddress: addrArray[i],\\n                index: indexArray[i]\\n                })\\n            );\\n        }\\n\\n        emit PoolSorted();\\n    }\\n\\n    function getStakers() \\n        public \\n        view \\n        returns(address[] memory, uint256[] memory) \\n    {\\n        address[] memory addrs = new address[](stakers.length);\\n        uint256[] memory indexes = new uint256[](stakers.length);\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            addrs[i] = stakers[i].stakerAddress;\\n            indexes[i] = stakers[i].index;\\n        }\\n\\n        return (addrs, indexes);\\n    }\\n\\n    function _getStakingRewardPerStake(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction memory userStake = predictions[staker][stakeIndex];\\n        uint256 maturityDate = startDate + lockTime + maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr = _getEnhancedRewardRate(userStake.stakedTime);\\n\\n        // the reward formula is ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            stakeApr.add(enhancedApr),\\n            timeTo.sub(userStake.stakedTime),\\n            userStake.stakedBalance\\n            );\\n\\n        rewardPerStake = rewardPerStake.sub(userStake.amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getStakingReward(address staker) public view returns (uint256) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            uint256 rewardPerStake = _getStakingRewardPerStake(staker, i);\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function _getIndexedStakingReward(address staker, uint256 stakeIndex) public view returns (uint256) {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n        if (stakeIndex >= userStakes.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = _getStakingRewardPerStake(staker, stakeIndex);\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function _withdrawStakingReward(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            uint256 rewardPerStake = _getStakingRewardPerStake(staker, i);\\n\\n            userStakes[i].lastWithdrawalTime = block.timestamp;\\n            userStakes[i].amountWithdrawn = userStakes[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function _withdrawIndexedStakingReward(address staker, uint256 stakeIndex) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n        if (stakeIndex >= userStakes.length) return;\\n\\n        uint256 rewardPerStake = _getStakingRewardPerStake(staker, stakeIndex);\\n\\n        userStakes[stakeIndex].lastWithdrawalTime = block.timestamp;\\n        userStakes[stakeIndex].amountWithdrawn = userStakes[stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function _getEnhancedRewardRate(uint256 stakedTime)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        // if the enhanced reward is not enabled so consider enhanced raward 0\\n        if (!isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = startDate.add(lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _getPrizeReward(address staker)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // wihtout the maturing price calculating prize is impossible\\n        if (!isMatured) return (0, 0);\\n\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        // users that don't stake don't get any prize also\\n        if (userStakes.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (usdPrizeAmount.mul(10**oracleDecimal)).div(maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            // only calculate the prize amount for stakes that are not withdrawn yet\\n            if (!userStakes[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = _getPercentageReward(userStakes[i].rank);\\n\\n                reward = reward.add(\\n                            prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (collaborativeReward > 0) {\\n            reward = reward.addBP(collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    function _getPercentageReward(uint256 _rank)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_rank <= prizeRewardRates[0].rank) {\\n            return prizeRewardRates[0].percentage;\\n        } else if (_rank <= prizeRewardRates[1].rank) {\\n            return prizeRewardRates[1].percentage;\\n        } else if (_rank <= prizeRewardRates[2].rank) {\\n            return prizeRewardRates[2].percentage;\\n        } else if (_rank <= prizeRewardRates[3].rank) {\\n            return prizeRewardRates[3].percentage;\\n        } else if (_rank <= prizeRewardRates[4].rank) {\\n            return prizeRewardRates[4].percentage;\\n        } else {\\n            return 0;\\n        }\\n    }        \\n\\n    function _getIndexedPrizeReward(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // wihtout the maturing price calculating prize is impossible\\n        if (!isMatured) return (0, 0);\\n\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        // users that don't stake don't get any prize also\\n        if (userStakes.length == 0) return (0, 0);\\n\\n        // the prize reward considered 0 if stakeIndex exceeds\\n        if (stakeIndex >= userStakes.length) return (0,0);\\n\\n        // If the first prize reward is withdrawn, we can assume that all the prize/collaborative rewards are withdrawn\\n        if (userStakes[stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (usdPrizeAmount.mul(10**oracleDecimal)).div(maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        uint256 _percent = _getPercentageReward(userStakes[stakeIndex].rank);\\n\\n        reward = reward.add(\\n                        prizeAmount.mulBP(_percent)\\n                    );\\n\\n        wrappedTokenReward = wrappedTokenReward.add(\\n                        maturingWrappedTokenPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (collaborativeReward > 0) {\\n            reward = reward.addBP(collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n\\n\\n    function _withdrawPrizeReward(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function _withdrawIndexedPrizeReward(address staker, uint256 stakeIndex) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n        if (userStakes[stakeIndex].prizeRewardWithdrawn) return;\\n\\n        userStakes[stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    // getTotalStakedBalance return remained staked balance\\n    function _getTotalStakedBalance(address staker)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            if (!userStakes[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    userStakes[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    // getIndexedStakedBalance return the remained staked amount\\n    function _getIndexedStakedBalance(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n        if (userStakes.length == 0) return 0;\\n        if (stakeIndex >= userStakes.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!userStakes[stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                userStakes[stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function _withdrawStakedBalance(address staker) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].didUnstake = true;\\n        }\\n    }\\n\\n    function _withdrawIndexedStakedBalance(address staker, uint256 stakeIndex) internal {\\n        StakeWithPrediction[] storage userStakes = predictions[staker];\\n        if (userStakes.length == 0) return;\\n        if (stakeIndex >= userStakes.length) return;\\n\\n        userStakes[stakeIndex].didUnstake = true;\\n    }\\n\\n    function _getTotalReward(address staker)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // since in the getPrizeReward function the maturingPrice is used\\n        // so we got error if it would not be maturityDate\\n        uint256 prizeReward;\\n        uint256 wrappedTokenPrizeReward;\\n        uint256 stakingReward = _getStakingReward(staker);\\n        (prizeReward, wrappedTokenPrizeReward) = _getPrizeReward(staker);\\n\\n        return (stakingReward.add(prizeReward), wrappedTokenPrizeReward);\\n    }\\n\\n    \\n    function _getIndexedReward(address staker, uint256 stakeIndex)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        // since in the getPrizeReward function the maturingPrice is used\\n        // so we got error if it would not be maturityDate\\n        uint256 prizeReward;\\n        uint256 wrappedTokenPrizeReward;\\n        uint256 stakingReward = _getIndexedStakingReward(staker, stakeIndex);\\n        (prizeReward, wrappedTokenPrizeReward) = _getIndexedPrizeReward(staker, stakeIndex);\\n\\n        return (stakingReward.add(prizeReward), wrappedTokenPrizeReward);\\n    }\\n\\n\\n    function getStakingReward() external view returns (uint256) {\\n        return _getStakingReward(_msgSender());\\n    }\\n    function getIndexedStakingReward(uint256 stakeIndex) external view returns (uint256) {\\n        return _getIndexedStakingReward(_msgSender(), stakeIndex);\\n    }\\n\\n    function getPrizeReward() external view returns (uint256, uint256) {\\n        return _getPrizeReward(_msgSender());\\n    }\\n    function getIndexedPrizeReward(uint256 stakeIndex) external view returns (uint256, uint256) {\\n        return _getIndexedPrizeReward(_msgSender(), stakeIndex);\\n    }\\n\\n    function getTotalStakedBalance() external view returns (uint256) {\\n        return _getTotalStakedBalance(_msgSender());\\n    }\\n    function getIndexedStakedBalance(uint256 stakeIndex) external view returns (uint256) {\\n        return _getIndexedStakedBalance(_msgSender(), stakeIndex);\\n    }\\n\\n    function getTotalReward() external view returns (uint256, uint256) {\\n        return _getTotalReward(_msgSender());\\n    }\\n    function getIndexedReward(uint256 stakeIndex) external view returns (uint256, uint256) {\\n        return _getIndexedReward(_msgSender(), stakeIndex);\\n    }\\n\\n    function getStakingTax(uint256 amount, uint256 tokenTaxRate)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 newStakeTaxRate =\\n            stakeTaxRate > tokenTaxRate ? stakeTaxRate.sub(tokenTaxRate) : 0;\\n        if (newStakeTaxRate == 0) {\\n            return (0, amount);\\n        }\\n        return (\\n            amount.mulBP(newStakeTaxRate),\\n            amount.sub(amount.mulBP(newStakeTaxRate))\\n        );\\n    }\\n\\n    function withdrawStuckTokens(address _stuckToken, uint256 amount, address receiver)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            _stuckToken != address(totemToken), \\n            \\\"0370 totems can not be transfered\\\"\\n        );\\n        IERC20 stuckToken = IERC20(_stuckToken);\\n        stuckToken.transfer(receiver, amount);\\n    }\\n\\n    // hasUnStaked return true if the user staked in the pool and then has unStaked it (in claim usecase)\\n    // function hasUnStaked(address staker, uint256 stakeIndex) external view returns (bool) {\\n    //     StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n    //     require(\\n    //         userStakes.length > 0,\\n    //         \\\"0380 this address didn't stake in this pool\\\"\\n    //     );\\n\\n    //     require(\\n    //         stakeIndex < userStakes.length,\\n    //         \\\"0381 this index exceeds\\\"\\n    //     );\\n    \\n\\n    //     if (userStakes[stakeIndex].didUnstake) {\\n    //         return true;\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function declareEmergency()\\n        external\\n        onlyPoolCreator\\n    {\\n        isAnEmergency = true;\\n    }\\n\\n    function emergentWithdraw() external {\\n        require(\\n            isAnEmergency,\\n            \\\"it's not an emergency\\\"\\n        );\\n\\n        // Users can't unstake until the pool matures\\n        uint256 stakedBalance = _getTotalStakedBalance(_msgSender());\\n        if (stakedBalance > 0) {\\n            totemToken.transfer(_msgSender(), stakedBalance);\\n\\n            // _wthdraw don't withdraw actually, and only update the array in the map\\n            _withdrawStakedBalance(_msgSender());\\n\\n            emit Unstake(_msgSender(), stakedBalance);\\n        }\\n    }\\n\\n    modifier onlyPoolCreator {\\n        require(\\n            _msgSender() == poolCreator,\\n            \\\"0300 caller is not a pool creator\\\"\\n        );\\n        _;\\n    }\\n}\",\"keccak256\":\"0xa0222b25d31ecbde16c92cd07d86824143a9b94ef8560a14223960b930b24edf\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../Role/PoolCreator.sol\\\";\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./RewardManager.sol\\\";\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\n\\ncontract StakingPoolFactory is PoolCreator {\\n    TotemToken public immutable totemToken;\\n    RewardManager public immutable rewardManager;\\n    address public swapRouter;\\n    address immutable usdToken;\\n    uint256 public stakingPoolTaxRate;\\n    uint256 public minimumStakeAmount;\\n\\n    event PoolCreated(\\n        address indexed pool,\\n        // variables[0] = maturityTime,\\n        // variables[1] = lockTime,\\n        // variables[2] = sizeAllocation,\\n        // variables[3] = stakeApr,\\n        // variables[4] = prizeAmount,\\n        // variables[5] = usdPrizeAmount,\\n        // variables[6] = potentialCollabReward,\\n        // variables[7] = collaborativeRange,\\n        // variables[8] = stakingPoolTaxRate,\\n        // variables[9] = minimumStakeAmount,\\n        // the order of the variable is as above\\n        uint256[10] variables,\\n        bool isEnhancedEnabled\\n    );\\n\\n    constructor(\\n        TotemToken _totemToken,\\n        RewardManager _rewardManager,\\n        address _swapRouter,\\n        address _usdToken\\n    ) {\\n        totemToken = _totemToken;\\n        rewardManager = _rewardManager;\\n        swapRouter = _swapRouter;\\n        usdToken = _usdToken;\\n         \\n        stakingPoolTaxRate = 300;\\n\\n        // minimum amount of totem can be staked is 250 TOTM,\\n        // it's a mechanism to prevent DDOS attack\\n        minimumStakeAmount = 250*(10**18);\\n    }\\n\\n    function create(\\n        address _oracleContract,\\n        address _wrappedTokenContract,\\n        string memory _wrappedTokenSymbole,\\n        string memory _poolType,\\n\\n        // Added to resolve \\\"Stack too deep\\\" error\\n        uint256[10] memory _variables,\\n\\n        // string[2] memory _coinSymbolAndPoolType,\\n        // uint256 maturityTime,\\n        // uint256 lockTime,\\n        // uint256 sizeAllocation,\\n        // uint256 stakeApr,\\n        // uint256 prizeAmount,\\n        // uint256 usdPrizeAmount,\\n        // uint256 potentialCollabReward,\\n        // uint256 collaborativeRange,\\n        // uint256 burnRate,\\n        // uint256 minimumStakeAmount,\\n        bool isEnhancedEnabled\\n    ) external onlyPoolCreator returns (address) {\\n\\n        uint256 burnRate = _variables[8];\\n\\n        if (burnRate == 0) {\\n            _variables[8] = stakingPoolTaxRate;\\n        }\\n\\n        address newPool = createPool( _oracleContract, _wrappedTokenContract, _wrappedTokenSymbole, _poolType, _variables, isEnhancedEnabled);\\n\\n        return newPool;\\n    }\\n\\n    function createPool(\\n        address _oracleContract,\\n        address _wrappedTokenContract,\\n        string memory _wrappedTokenSymbole,\\n        string memory _poolType,\\n        uint256[10] memory _variables,\\n        bool _isEnhancedEnabled\\n    ) internal returns (address) {\\n\\n        address newPool =\\n            address(\\n                new StakingPool(\\n                    _wrappedTokenSymbole,\\n                    _poolType,\\n                    totemToken,\\n                    rewardManager,\\n                    _msgSender(),\\n                    swapRouter,\\n                    _oracleContract,\\n                    usdToken,\\n                    _wrappedTokenContract,\\n                    _variables,\\n                    _isEnhancedEnabled\\n                )\\n            );\\n\\n        emit PoolCreated(\\n            newPool,\\n            _variables,\\n            _isEnhancedEnabled\\n        );\\n\\n        rewardManager.addPool(newPool);\\n\\n        return newPool;\\n    }\\n\\n\\n    \\n    function setSwapRouter(address _swapRouter) external onlyPoolCreator {\\n        require(_swapRouter != address(0), \\\"0410\\\");\\n        swapRouter = _swapRouter;\\n    }\\n\\n    function setDefaultTaxRate(uint256 newStakingPoolTaxRate)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            newStakingPoolTaxRate < 10000,\\n            \\\"0420 Tax connot be over 100% (10000 BP)\\\"\\n        );\\n        stakingPoolTaxRate = newStakingPoolTaxRate;\\n    }\\n\\n    function setMinimuntToStake(uint256 newMinimumStakeAmount)\\n        external\\n        onlyPoolCreator\\n    {\\n        // TODO: any condition can be applied to check the minimum amount\\n        minimumStakeAmount = newMinimumStakeAmount;\\n    }\\n}\",\"keccak256\":\"0xdbdef118af7c887f80930e6c46da3d1a00f4279a778778aeaa68c5dd05df673d\",\"license\":\"UNLICENSED\"},\"contracts/TotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\nimport \\\"./BasisPoints.sol\\\";\\n\\ncontract TotemToken is ILockerUser, Context, ERC20, Ownable {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"Totem Token\\\";\\n    string public constant SYMBOL = \\\"TOTM\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY = 10000000 * (10**uint256(DECIMALS));\\n\\n    address public CommunityDevelopmentAddr;\\n    address public StakingRewardsAddr;\\n    address public LiquidityPoolAddr;\\n    address public PublicSaleAddr;\\n    address public AdvisorsAddr;\\n    address public SeedInvestmentAddr;\\n    address public PrivateSaleAddr;\\n    address public TeamAllocationAddr;\\n    address public StrategicRoundAddr;\\n\\n    uint256 public constant COMMUNITY_DEVELOPMENT =\\n        1000000 * (10**uint256(DECIMALS)); // 10% for Community development\\n    uint256 public constant STAKING_REWARDS = 1650000 * (10**uint256(DECIMALS)); // 16.5% for Staking Revawards\\n    uint256 public constant LIQUIDITY_POOL = 600000 * (10**uint256(DECIMALS)); // 6% for Liquidity pool\\n    uint256 public constant ADVISORS = 850000 * (10**uint256(DECIMALS)); // 8.5% for Advisors\\n    uint256 public constant SEED_INVESTMENT = 450000 * (10**uint256(DECIMALS)); // 4.5% for Seed investment\\n    uint256 public constant PRIVATE_SALE = 2000000 * (10**uint256(DECIMALS)); // 20% for Private Sale\\n    uint256 public constant TEAM_ALLOCATION = 1500000 * (10**uint256(DECIMALS)); // 15% for Team allocation\\n\\n    uint256 public constant LAUNCH_POOL =\\n        5882352941 * (10**uint256(DECIMALS - 5)); // 58823.52941 for LaunchPool\\n    uint256 public constant PUBLIC_SALE =\\n        450000 * (10**uint256(DECIMALS)) + LAUNCH_POOL; // 4.5% for Public Sale\\n    uint256 public constant STRATEGIC_ROUND =\\n        1500000 * (10**uint256(DECIMALS)) - LAUNCH_POOL; // 15% for Strategic Round\\n    uint256 public taxRate = 300;\\n    address public taxationWallet;\\n\\n    bool private _isDistributionComplete = false;\\n\\n    mapping(address => bool) public taxExempt;\\n\\n    ILocker public override locker;\\n\\n    constructor() ERC20(NAME, SYMBOL) {\\n        taxationWallet = _msgSender();\\n\\n        _mint(address(this), INITIAL_SUPPLY);\\n    }\\n\\n    function setLocker(address _locker) external onlyOwner() {\\n        require(_locker != address(0), \\\"_locker cannot be address(0)\\\");\\n        locker = ILocker(_locker);\\n        emit SetLocker(_locker);\\n    }\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) public onlyOwner {\\n        require(!_isDistributionComplete);\\n\\n        require(_CommunityDevelopmentAddr != address(0));\\n        require(_StakingRewardsAddr != address(0));\\n        require(_LiquidityPoolAddr != address(0));\\n        require(_PublicSaleAddr != address(0));\\n        require(_AdvisorsAddr != address(0));\\n        require(_SeedInvestmentAddr != address(0));\\n        require(_PrivateSaleAddr != address(0));\\n        require(_TeamAllocationAddr != address(0));\\n        require(_StrategicRoundAddr != address(0));\\n        // set parnters addresses\\n        CommunityDevelopmentAddr = _CommunityDevelopmentAddr;\\n        StakingRewardsAddr = _StakingRewardsAddr;\\n        LiquidityPoolAddr = _LiquidityPoolAddr;\\n        PublicSaleAddr = _PublicSaleAddr;\\n        AdvisorsAddr = _AdvisorsAddr;\\n        SeedInvestmentAddr = _SeedInvestmentAddr;\\n        PrivateSaleAddr = _PrivateSaleAddr;\\n        TeamAllocationAddr = _TeamAllocationAddr;\\n        StrategicRoundAddr = _StrategicRoundAddr;\\n    }\\n\\n    function distributeTokens() public onlyOwner {\\n        require((!_isDistributionComplete));\\n\\n        _transfer(\\n            address(this),\\n            CommunityDevelopmentAddr,\\n            COMMUNITY_DEVELOPMENT\\n        );\\n        _transfer(address(this), StakingRewardsAddr, STAKING_REWARDS);\\n        _transfer(address(this), LiquidityPoolAddr, LIQUIDITY_POOL);\\n        _transfer(address(this), PublicSaleAddr, PUBLIC_SALE);\\n        _transfer(address(this), AdvisorsAddr, ADVISORS);\\n        _transfer(address(this), SeedInvestmentAddr, SEED_INVESTMENT);\\n        _transfer(address(this), PrivateSaleAddr, PRIVATE_SALE);\\n        _transfer(address(this), TeamAllocationAddr, TEAM_ALLOCATION);\\n        _transfer(address(this), StrategicRoundAddr, STRATEGIC_ROUND);\\n\\n        // Whitelist these addresses as tex exempt\\n        setTaxExemptStatus(CommunityDevelopmentAddr, true);\\n        setTaxExemptStatus(StakingRewardsAddr, true);\\n        setTaxExemptStatus(LiquidityPoolAddr, true);\\n        setTaxExemptStatus(PublicSaleAddr, true);\\n        setTaxExemptStatus(AdvisorsAddr, true);\\n        setTaxExemptStatus(SeedInvestmentAddr, true);\\n        setTaxExemptStatus(PrivateSaleAddr, true);\\n        setTaxExemptStatus(TeamAllocationAddr, true);\\n        setTaxExemptStatus(StrategicRoundAddr, true);\\n\\n        _isDistributionComplete = true;\\n    }\\n\\n    function setTaxRate(uint256 newTaxRate) public onlyOwner {\\n        require(newTaxRate < 10000, \\\"Tax connot be over 100% (10000 BP)\\\");\\n        taxRate = newTaxRate;\\n    }\\n\\n    function setTaxExemptStatus(address account, bool status) public onlyOwner {\\n        require(account != address(0));\\n        taxExempt[account] = status;\\n    }\\n\\n    function setTaxationWallet(address newTaxationWallet) public onlyOwner {\\n        require(newTaxationWallet != address(0));\\n        taxationWallet = newTaxationWallet;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (address(locker) != address(0)) {\\n            locker.lockOrGetPenalty(sender, recipient);\\n        }\\n        ERC20._transfer(sender, recipient, amount);\\n    }\\n\\n    function _transferWithTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(sender != recipient, \\\"Cannot self transfer\\\");\\n\\n        uint256 tax = amount.mulBP(taxRate);\\n        uint256 tokensToTransfer = amount.sub(tax);\\n\\n        _transfer(sender, taxationWallet, tax);\\n        _transfer(sender, recipient, tokensToTransfer);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_msgSender() != recipient, \\\"ERC20: cannot self transfer\\\");\\n        !taxExempt[_msgSender()]\\n            ? _transferWithTax(_msgSender(), recipient, amount)\\n            : _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        !taxExempt[sender]\\n            ? _transferWithTax(sender, recipient, amount)\\n            : _transfer(sender, recipient, amount);\\n\\n        approve(\\n            _msgSender(),\\n            allowance(sender, _msgSender()).sub(\\n                amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfa21ba84a53a411dd96bf813d4c25a1168b631e1e5d098bb892c7e46a5e83ab0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200618138038062006181833981016040819052620000349162000224565b6200004862000042620000be565b620000c2565b6200006157620000616200005b620000be565b620000e5565b606093841b6001600160601b031990811660805292841b831660a052600180546001600160a01b0319166001600160a01b03939093169290921790915590911b1660c05261012c600255680d8d726b7177a80000600355620002a4565b3390565b6000620000df8260006200013760201b620004941790919060201c565b92915050565b62000100816000620001a060201b620004fd1790919060201c565b6040516001600160a01b038216907fac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b6190600090a250565b60006001600160a01b038216620001805760405162461bcd60e51b81526004018080602001828103825260228152602001806200615f6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b620001ac828262000137565b15620001ff576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b600080600080608085870312156200023a578384fd5b845162000247816200028b565b60208601519094506200025a816200028b565b60408601519093506200026d816200028b565b606086015190925062000280816200028b565b939692955090935050565b6001600160a01b0381168114620002a157600080fd5b50565b60805160601c60a05160601c60c05160601c615e76620002e9600039806105ef5250806101c952806105ad52806106b1525080610472528061058c5250615e766000f3fe60806040523480156200001157600080fd5b5060043610620000c45760003560e01c80638c2d741c116200007b5780638c2d741c14620001555780639a94775d146200016c578063c31c9c071462000192578063d53b245b146200019c578063e281cc7e14620001b3578063e8153c9314620001bd57620000c4565b80630f4ef8a614620000c9578063233d107d14620000eb57806337e77675146200010257806341273657146200011b578063441f5c6514620001325780636b036f45146200014b575b600080fd5b620000d3620001c7565b604051620000e2919062000a6f565b60405180910390f35b620000d3620000fc366004620008e0565b620001eb565b6200011962000113366004620009dd565b6200026d565b005b620001196200012c366004620008bc565b620002bd565b6200013c6200035c565b604051620000e2919062000bad565b6200013c62000362565b6200011962000166366004620008bc565b62000368565b620001836200017d366004620008bc565b620003c1565b604051620000e2919062000aa4565b620000d3620003d7565b62000119620001ad366004620009dd565b620003e6565b620001196200045a565b620000d362000470565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000620001fb6200017d62000581565b620002385760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b610100830151806200024e576002546101008501525b60006200026089898989898962000585565b9998505050505050505050565b6200027b6200017d62000581565b620002b85760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b600355565b620002cb6200017d62000581565b620003085760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b6001600160a01b0381166200033a5760405162461bcd60e51b8152600401620003319062000b8f565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60025481565b60035481565b620003766200017d62000581565b620003b35760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b620003be8162000728565b50565b6000620003cf818362000494565b90505b919050565b6001546001600160a01b031681565b620003f46200017d62000581565b620004315760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b6127108110620004555760405162461bcd60e51b8152600401620003319062000b48565b600255565b6200046e6200046862000581565b6200076c565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b038216620004dd5760405162461bcd60e51b815260040180806020018281038252602281526020018062005e1f6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b62000509828262000494565b156200055c576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b3390565b60008085857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000620005d662000581565b600160009054906101000a90046001600160a01b03168d7f00000000000000000000000000000000000000000000000000000000000000008e8c8c6040516200061f906200081b565b620006359b9a9998979695949392919062000aaf565b604051809103906000f08015801562000652573d6000803e3d6000fd5b509050806001600160a01b03167fd387ed1066dd2e6ea58f024e0522514c6392ebaf5f72100aef55c04311f8e33285856040516200069292919062000a83565b60405180910390a260405163d914cd4b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d914cd4b90620006e890849060040162000a6f565b600060405180830381600087803b1580156200070357600080fd5b505af115801562000718573d6000803e3d6000fd5b50929a9950505050505050505050565b62000735600082620004fd565b6040516001600160a01b038216907fac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b6190600090a250565b62000779600082620007b0565b6040516001600160a01b038216907f2bc71cc60b543df5fdd80ef5a45e1cdb344843769b649e9d901de3be24aeb24e90600090a250565b620007bc828262000494565b620007f95760405162461bcd60e51b815260040180806020018281038252602181526020018062005dfe6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6151e88062000bdc83390190565b80356001600160a01b0381168114620003d257600080fd5b80358015158114620003d257600080fd5b600082601f83011262000863578081fd5b813567ffffffffffffffff8111156200087857fe5b6200088d601f8201601f191660200162000bb6565b818152846020838601011115620008a2578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215620008ce578081fd5b620008d98262000829565b9392505050565b6000806000806000806101e08789031215620008fa578182fd5b620009058762000829565b955060206200091681890162000829565b9550604088013567ffffffffffffffff8082111562000933578485fd5b620009418b838c0162000852565b965060608a013591508082111562000957578485fd5b50620009668a828b0162000852565b94505088609f89011262000978578283fd5b6200098561014062000bb6565b8060808a016101c08b018c8111156200099c578687fd5b865b600a811015620009bd578235855293850193918501916001016200099e565b50829650620009cc8162000841565b955050505050509295509295509295565b600060208284031215620009ef578081fd5b5035919050565b8060005b600a81101562000a1b578151845260209384019390910190600101620009fa565b50505050565b60008151808452815b8181101562000a485760208185018101518683018201520162000a2a565b8181111562000a5a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b610160810162000a948285620009f6565b8215156101408301529392505050565b901515815260200190565b600061028080835262000ac58184018f62000a21565b9050828103602084015262000adb818e62000a21565b6001600160a01b038d811660408601528c811660608601528b811660808601528a811660a086015289811660c086015288811660e08601528716610100850152915062000b2f9050610120830185620009f6565b8215156102608301529c9b505050505050505050505050565b60208082526027908201527f303432302054617820636f6e6e6f74206265206f7665722031303025202831306040820152663030302042502960c81b606082015260800190565b6020808252600490820152630303431360e41b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171562000bd357fe5b60405291905056fe6102606040523480156200001257600080fd5b50604051620051e8380380620051e883398181016040526102808110156200003957600080fd5b81019080805160405193929190846401000000008211156200005a57600080fd5b9083019060208201858111156200007057600080fd5b82516401000000008111828201881017156200008b57600080fd5b82525081516020918201929091019080838360005b83811015620000ba578181015183820152602001620000a0565b50505050905090810190601f168015620000e85780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010c57600080fd5b9083019060208201858111156200012257600080fd5b82516401000000008111828201881017156200013d57600080fd5b82525081516020918201929091019080838360005b838110156200016c57818101518382015260200162000152565b50505050905090810190601f1680156200019a5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c086015160e0870151610240880151969950949750929591949093916101000190858484876000620001ea620004bb565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b03199081166001600160a01b039384161790915560038054821695831695909517909455600480548516938216939093179092556005805490931691161790558a51620002949060069060208e0190620004e1565b508951620002aa9060079060208d0190620004e1565b506001600160601b031960608a811b821660805289901b1660a052600f80546001600160a01b038781166001600160a01b031992831617909255600e8054928a16929091169190911790556200030084620004bf565b606092831b6001600160601b03191660c09081524260e0908152835161012090815260208086015161010090815260408088015161014052978701516101605260808701516101805260a08701516101a05293860151610200529185015161022052918401516101c0529201516101e052151560f81b61024052815180830183526001808252610ea6828401908152601080548084018255600082815294517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67260029283028181019290925593517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67391820155875180890189528281526107d081890190815284548088018655858952915191840280870192909255519082015587518089018952600381526103e881890190815284548088018655858952915191840280870192909255519082015587518089018952600a815260fa81890190815284548088018655858952915191840280870192909255519082015587518089019098526019885260649688019687528254948501835591909452945191909202918201559051910155506200058d9650505050505050565b3390565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000519576000855562000564565b82601f106200053457805160ff191683800117855562000564565b8280016001018555821562000564579182015b828111156200056457825182559160200191906001019062000547565b506200057292915062000576565b5090565b5b8082111562000572576000815560010162000577565b60805160601c60a05160601c60c05160601c60e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405160f81c614abb6200072d6000398061136c52806145a5525080610d2852806131d5525080610cf25280610d52528061318d52508061180b5280611a4b5250806117e75280613ac25280613af2525080610c3452806113eb52806118ed52806128445280612cc85280613e5452806144dc525080611a275280613ed6528061452552508061268e528061393f52508061155d5280611b095280611c7f5280612088525080610b91528061153952806125c352806138f2525080610a475280610bb252806125e452806138d052806145f8525080610a235280610bd3528061260552806138af52806145d752508061247c52806128705280612cf45280613400525080610a6b52806126fb528061278a5280612b805280612c0f5250806116f15280611b3b5280611bcc5280611d1a5280611ddd5280611e0c528061221d52806126cc52806129805280612b515280612dfd52806131b15250614abb6000f3fe608060405234801561001057600080fd5b50600436106103f15760003560e01c80639234a39a11610215578063d025188b11610125578063eee39403116100b8578063f3d9dc0d11610087578063f3d9dc0d146109e4578063f5e96fc9146109ec578063f8e829c3146109f4578063fd5e6dd1146109fc578063fd8fd47f14610a19576103f1565b8063eee3940314610966578063f0141d8414610983578063f1b17a8b146109a1578063f2fde38b146109be576103f1565b8063e425df8c116100f4578063e425df8c14610946578063e8153c931461094e578063eb850ae114610956578063eda2d4241461095e576103f1565b8063d025188b146108d9578063d7efb6b7146108e1578063d83db49f146108e9578063de09ee2014610906576103f1565b8063a7a48681116101a8578063b88a802f11610177578063b88a802f146108b1578063bece7532146108b9578063bf852196146108c1578063c1201054146108c9578063c6c1decd146108d1576103f1565b8063a7a4868114610867578063aa7bcb5714610884578063b1b1e1c01461088c578063b1dd61b6146108a9576103f1565b8063a08b2c79116101e4578063a08b2c79146107f7578063a150194b146107ff578063a35ef3a714610807578063a4e2d6341461085f576103f1565b80639234a39a146107c257806395c2ba47146107ca578063996c6cc3146107d25780639d9a62df146107da576103f1565b80635b9f4f90116103105780637b0472f0116102a3578063850fa7cb11610272578063850fa7cb1461072b5780638a9920b7146107a25780638bfbbcbe146107aa5780638da5cb5b146107b25780638e15f473146107ba576103f1565b80637b0472f0146106d75780637d1fcbfa146106fa5780637f2b6a0d1461071b578063817b1cd214610723576103f1565b8063715018a6116102df578063715018a61461069357806373f317031461069b578063765e14d8146106a3578063785fa627146106cf576103f1565b80635b9f4f90146106275780635d2631e21461064d5780636847d0c5146106835780636b036f451461068b576103f1565b80633fcdd82c116103885780634bc4eeb2116103575780634bc4eeb2146105d85780634ddc1bdc146105f45780634e8bfdaa1461061757806351eacbf01461061f576103f1565b80633fcdd82c146104f05780634026478e1461050d57806343352d6114610515578063444a4902146105b6576103f1565b8063238a6c74116103c4578063238a6c74146104595780632d42cf7d146104d65780632e577d07146104e057806331e244e5146104e8576103f1565b80630b97bc86146103f65780630d668087146104105780630f4ef8a6146104185780631898a1a71461043c575b600080fd5b6103fe610a21565b60408051918252519081900360200190f35b6103fe610a45565b610420610a69565b604080516001600160a01b039092168252519081900360200190f35b6103fe6004803603602081101561045257600080fd5b5035610a8d565b610461610aa8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049b578181015183820152602001610483565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104de610b36565b005b610420610e6f565b6104de610e7f565b6103fe6004803603602081101561050657600080fd5b5035610eed565b6104de61106d565b61051d6110d0565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610561578181015183820152602001610549565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105a0578181015183820152602001610588565b5050505090500194505050505060405180910390f35b6104de60048036036106408110156105cd57600080fd5b506103208101611215565b6105e061136a565b604080519115158252519081900360200190f35b6104de6004803603604081101561060a57600080fd5b508035906020013561138e565b6103fe611537565b6103fe61155b565b6103fe6004803603602081101561063d57600080fd5b50356001600160a01b031661157f565b6104de6004803603606081101561066357600080fd5b506001600160a01b03813581169160208101359160409091013516611696565b6103fe6117e5565b6103fe611809565b6104de61182d565b6103fe6118eb565b6103fe600480360360408110156106b957600080fd5b506001600160a01b03813516906020013561190f565b6103fe611a25565b6104de600480360360408110156106ed57600080fd5b5080359060200135611a49565b61070261210c565b6040805192835260208301919091528051918290030190f35b6105e0612127565b6103fe612137565b6107576004803603604081101561074157600080fd5b506001600160a01b03813516906020013561213d565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c0850152151560e0840152151561010083015251908190036101200190f35b6104de6121ab565b6104de612322565b6104206123b9565b6103fe6123c8565b610702612462565b6103fe612475565b61042061247a565b610702600480360360208110156107f057600080fd5b503561249e565b6105e06124bc565b6103fe6124cc565b61080f6124d1565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561084b578181015183820152602001610833565b505050509050019250505060405180910390f35b6105e0612558565b6104de6004803603602081101561087d57600080fd5b5035612568565b6103fe61268c565b6104de600480360360208110156108a257600080fd5b50356126b0565b610461612ada565b6104de612b35565b610420612f50565b6103fe612f5f565b6103fe61309f565b61042061311b565b6103fe61312a565b6105e0613130565b6103fe600480360360208110156108ff57600080fd5b5035613140565b6109236004803603602081101561091c57600080fd5b5035613153565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6103fe61318b565b6104206131af565b6103fe6131d3565b6103fe6131f7565b6107026004803603602081101561097c57600080fd5b503561320e565b61098b613222565b6040805160ff9092168252519081900360200190f35b610702600480360360208110156109b757600080fd5b50356132a5565b6104de600480360360208110156109d457600080fd5b50356001600160a01b03166132d3565b6103fe6133e7565b6104206133ed565b6103fe6133fc565b61092360048036036020811015610a1257600080fd5b503561346b565b6103fe61347b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610aa0610a9a613484565b8361190f565b90505b919050565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b820191906000526020600020905b815481529060010190602001808311610b1157829003601f168201915b505050505081565b600e546001600160a01b0316610b4a613484565b6001600160a01b031614610b8f5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000000101421015610c325760405162461bcd60e51b815260040180806020018281038252602c81526020018061494a602c913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000015610c9b57610c606133fc565b610c9b5760405162461bcd60e51b8152600401808060200182810382526027815260200180614a296027913960400191505060405180910390fd5b60095415610cf057600a54610cf0576040805162461bcd60e51b81526020600482015260166024820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000015610d77576000610d20612f5f565b9050610d4c817f0000000000000000000000000000000000000000000000000000000000000000613488565b610d75577f0000000000000000000000000000000000000000000000000000000000000000600d555b505b600a54600090601910610d8c57600a54610d8f565b60195b905060005b81811015610e20578060010160086000600a8481548110610db157fe5b600091825260208083206002909202909101546001600160a01b031683528201929092526040019020600a805484908110610de857fe5b90600052602060002090600202016001015481548110610e0457fe5b6000918252602090912060066008909202010155600101610d94565b50600f805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b1790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a150565b6003546001600160a01b03165b90565b600e546001600160a01b0316610e93613484565b6001600160a01b031614610ed85760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b600f805460ff60b81b1916600160b81b179055565b60035460009081906001600160a01b031663d06ca61f84610f0c6124d1565b6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610f61578181015183820152602001610f49565b50505050905001935050505060006040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610fc257600080fd5b8101908080516040519392919084640100000000821115610fe257600080fd5b908301906020820185811115610ff757600080fd5b825186602082028301116401000000008211171561101457600080fd5b82525081516020918201928201910280838360005b83811015611041578181015183820152602001611029565b5050505090500160405250505090508060018151811061105d57fe5b6020026020010151915050919050565b600e546001600160a01b0316611081613484565b6001600160a01b0316146110c65760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b6110ce6134f6565b565b606080600060098054905067ffffffffffffffff811180156110f157600080fd5b5060405190808252806020026020018201604052801561111b578160200160208202803683370190505b5060095490915060009067ffffffffffffffff8111801561113b57600080fd5b50604051908082528060200260200182016040528015611165578160200160208202803683370190505b50905060005b60095481101561120b576009818154811061118257fe5b600091825260209091206002909102015483516001600160a01b03909116908490839081106111ad57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600981815481106111da57fe5b9060005260206000209060020201600101548282815181106111f857fe5b602090810291909101015260010161116b565b5090925090509091565b600e546001600160a01b0316611229613484565b6001600160a01b03161461126e5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b60005b601981101561133c57600083826019811061128857fe5b60200201356001600160a01b03166001600160a01b031614156112aa5761133c565b600a60405180604001604052808584601981106112c357fe5b60200201356001600160a01b03166001600160a01b031681526020018484601981106112eb57fe5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519082015501611271565b506040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e546001600160a01b03166113a2613484565b6001600160a01b0316146113e75760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000116114465760405162461bcd60e51b81526004018080602001828103825260238152602001806149016023913960400191505060405180910390fd5b6000821161149b576040805162461bcd60e51b815260206004820152601960248201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604482015290519081900360640190fd5b428110156114e7576040805162461bcd60e51b81526020600482015260146024820152733033343220446561646c696e65206973206c6f7760601b604482015290519081900360640190fd5b60006114f1610e6f565b90506114fd8184613534565b600061150884610eed565b9050600061152261151b8361012c6135f9565b8390613612565b90506115303086838761366f565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083528493849084015b8282101561164457600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e0850152610100918290041615159083015290835290920191016115b2565b50505050905080516000141561165e576000915050610aa3565b6000805b825181101561168e5760006116778683613808565b905061168383826139a0565b925050600101611662565b509392505050565b600e546001600160a01b03166116aa613484565b6001600160a01b0316146116ef5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156117605760405162461bcd60e51b815260040180806020018281038252602181526020018061499c6021913960400191505060405180910390fd5b6040805163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529151859283169163a9059cbb9160448083019260209291908290030181600087803b1580156117b357600080fd5b505af11580156117c7573d6000803e3d6000fd5b505050506040513d60208110156117dd57600080fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611835613484565b6001600160a01b03166118466123b9565b6001600160a01b0316146118a1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038216600090815260086020908152604080832080548251818502810185019093528083528493849084015b828210156119d457600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611942565b5050505090508051600014156119ee576000915050611a1f565b80518310611a00576000915050611a1f565b600080611a0d8686613808565b9050611a1982826139a0565b93505050505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000821015611aa85760405162461bcd60e51b815260040180806020018281038252602a8152602001806149ff602a913960400191505060405180910390fd5b600f54600160a01b900460ff1615611afd576040805162461bcd60e51b81526020600482015260136024820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604482015290519081900360640190fd5b6000611b356064611b2f7f000000000000000000000000000000000000000000000000000000000000000060056139fa565b90613a53565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663771a3a1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9257600080fd5b505afa158015611ba6573d6000803e3d6000fd5b505050506040513d6020811015611bbc57600080fd5b5051905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1ecfc68611bf9613484565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c3657600080fd5b505afa158015611c4a573d6000803e3d6000fd5b505050506040513d6020811015611c6057600080fd5b5051611c7557611c7085836135f9565b611c78565b60005b9050611ca47f0000000000000000000000000000000000000000000000000000000000000000846139a0565b611cc382611cbd88600b546139a090919063ffffffff16565b90613612565b1115611d005760405162461bcd60e51b81526004018080602001828103825260268152602001806149766026913960400191505060405180910390fd5b6000611d0c8684613aba565b965090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd611d47613484565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015230602483015289850160448301525160648083019260209291908290030181600087803b158015611d9c57600080fd5b505af1158015611db0573d6000803e3d6000fd5b505050506040513d6020811015611dc657600080fd5b50611dd390508683613612565b95508015611f0a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634a5db0a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6357600080fd5b505afa158015611e77573d6000803e3d6000fd5b505050506040513d6020811015611e8d57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b158015611edd57600080fd5b505af1158015611ef1573d6000803e3d6000fd5b505050506040513d6020811015611f0757600080fd5b50505b600b54611f1790876139a0565b600b8190555060096040518060400160405280611f32613484565b6001600160a01b0316815260200160086000611f4c613484565b6001600160a01b0390811682526020808301939093526040909101600090812054909352845460018082018755958452828420855160029092020180546001600160a01b031916919092161781559201519190920155600890611fad613484565b6001600160a01b03168152602080820192909252604090810160009081208251610120810184528a81524281860181815294820184815260608301918252608083018c815260001960a0850181815260c0860191825260e086018881526101008088018a8152895460018082018c559a8c529c909a2097516008909c029097019a8b559851968a01969096559151600289015591516003880155905160048701559151600586015590516006850155915160079093018054915160ff19929092169315159390931761ff001916901515909102179055600b547f0000000000000000000000000000000000000000000000000000000000000000116120b4576120b46134f6565b6120bc613484565b6001600160a01b03167f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b68787604051808381526020018281526020019250505060405180910390a2505050505050565b60008061211f61211a613484565b613b56565b915091509091565b600f54600160a81b900460ff1681565b600b5481565b6008602052816000526040600020818154811061215957600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b600f54600160b81b900460ff16612201576040805162461bcd60e51b815260206004820152601560248201527469742773206e6f7420616e20656d657267656e637960581b604482015290519081900360640190fd5b600061221361220e613484565b613b8d565b9050801561231f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612252613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561229957600080fd5b505af11580156122ad573d6000803e3d6000fd5b505050506040513d60208110156122c357600080fd5b506122d690506122d1613484565b613ccb565b6122de613484565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b50565b600e546001600160a01b0316612336613484565b6001600160a01b03161461237b5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b600f805460ff60b01b1916600160b01b1790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b6000546001600160a01b031690565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561241957600080fd5b505afa15801561242d573d6000803e3d6000fd5b505050506040513d60a081101561244357600080fd5b50602001519050600081121561245a57600061245c565b805b91505090565b60008061211f612470613484565b613d3f565b600581565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806124b26124ac613484565b84613f5a565b915091505b915091565b600f54600160b81b900460ff1681565b600881565b60408051600280825260608083018452926000929190602083019080368337505060045482519293506001600160a01b03169183915060009061251057fe5b6001600160a01b03928316602091820292909201015260055482519116908290600190811061253b57fe5b6001600160a01b0390921660209283029190910190910152905090565b600f54600160a01b900460ff1681565b600e546001600160a01b031661257c613484565b6001600160a01b0316146125c15760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000001014210156126645760405162461bcd60e51b8152600401808060200182810382526036815260200180614a506036913960400191505060405180910390fd5b600f546001600160a01b031661267e57600c81905561231f565b6126866123c8565b600c5550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806126be6124ac613484565b9092509050811561281f57817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275757600080fd5b505afa15801561276b573d6000803e3d6000fd5b505050506040513d602081101561278157600080fd5b50511061281f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc6127bf613484565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561280657600080fd5b505af115801561281a573d6000803e3d6000fd5b505050505b61283061282a613484565b84613f94565b600f54600160a81b900460ff1615612a85577f000000000000000000000000000000000000000000000000000000000000000015612963578015612952577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6128a5613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156128ec57600080fd5b505af1158015612900573d6000803e3d6000fd5b505050506040513d602081101561291657600080fd5b5051612952576040805162461bcd60e51b815260206004808301919091526024820152630303333360e41b604482015290519081900360640190fd5b61296361295d613484565b8461404e565b6000612976612970613484565b856140d5565b90508015612a83577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6129b5613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156129fc57600080fd5b505af1158015612a10573d6000803e3d6000fd5b505050506040513d6020811015612a2657600080fd5b50612a3a9050612a34613484565b8561421a565b612a42613484565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b612a8d613484565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a2505050565b6007805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b600080612b4361211a613484565b90925090508115612ca457817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdc57600080fd5b505afa158015612bf0573d6000803e3d6000fd5b505050506040513d6020811015612c0657600080fd5b505110612ca4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc612c44613484565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612c8b57600080fd5b505af1158015612c9f573d6000803e3d6000fd5b505050505b612cb4612caf613484565b614287565b600f54600160a81b900460ff1615612efc577f000000000000000000000000000000000000000000000000000000000000000015612de6578015612dd6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612d29613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612d7057600080fd5b505af1158015612d84573d6000803e3d6000fd5b505050506040513d6020811015612d9a57600080fd5b5051612dd6576040805162461bcd60e51b815260206004808301919091526024820152630303332360e41b604482015290519081900360640190fd5b612de6612de1613484565b614320565b6000612df361220e613484565b90508015612efa577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612e32613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612e7957600080fd5b505af1158015612e8d573d6000803e3d6000fd5b505050506040513d6020811015612ea357600080fd5b50612eb190506122d1613484565b612eb9613484565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b612f04613484565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a25050565b600f546001600160a01b031681565b6000600b5460001415612f7457506000610e7c565b6000805b6009548110156130905760006008600060098481548110612f9557fe5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206009805484908110612fcc57fe5b90600052602060002090600202016001015481548110612fe857fe5b600091825260209182902060408051610120810182526008909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c084015260079091015460ff808216151560e085015261010091829004161515908301529092506130859161307e91906139fa565b84906139a0565b925050600101612f78565b50600b5461245c908290613a53565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156130ea57600080fd5b505afa1580156130fe573d6000803e3d6000fd5b505050506040513d602081101561311457600080fd5b5051905090565b600e546001600160a01b031681565b600c5481565b600f54600160b01b900460ff1681565b6000610aa061314d613484565b836140d5565b600a818154811061316357600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000613209613204613484565b61157f565b905090565b6000806124b261321c613484565b84614388565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d602081101561329d57600080fd5b505191505090565b601081815481106132b557600080fd5b60009182526020909120600290910201805460019091015490915082565b6132db613484565b6001600160a01b03166132ec6123b9565b6001600160a01b031614613347576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661338c5760405162461bcd60e51b81526004018080602001828103825260268152602001806149246026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600d5481565b6002546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156130ea57600080fd5b6009818154811061316357600080fd5b600061320961220e5b3390565b6000600c548311156134c657600c546134a18484613612565b116134ae57506000611a1f565b600c546134bf90611cbd8585613612565b9050611a1f565b600c546134d384846139a0565b106134e057506000611a1f565b6134bf6134ed84846139a0565b600c5490613612565b600f805460ff60a01b1916600160a01b1790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b6002546040805163095ea7b360e01b81526001600160a01b038581166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561358a57600080fd5b505af115801561359e573d6000803e3d6000fd5b505050506040513d60208110156135b457600080fd5b50506040805182815290516001600160a01b038416917fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a1919081900360200190a25050565b600061360b612710611b2f85856139fa565b9392505050565b600082821115613669576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03841661368257600080fd5b6003546001600160a01b03166338ed1739848461369d6124d1565b88866040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561370f5781810151838201526020016136f7565b505050509050019650505050505050600060405180830381600087803b15801561373857600080fd5b505af115801561374c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561377557600080fd5b810190808051604051939291908464010000000082111561379557600080fd5b9083019060208201858111156137aa57600080fd5b82518660208202830111640100000000821117156137c757600080fd5b82525081516020918201928201910280838360005b838110156137f45781810151838201526020016137dc565b505050509050016040525050505050505050565b6001600160a01b038216600090815260086020526040812080548291908490811061382f57fe5b6000918252602080832060408051610120810182526008909402909101805484526001810154928401929092526002820154908301526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460ff808216151560e0840152610100918290041615159082015291507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000017f000000000000000000000000000000000000000000000000000000000000000001904282106139205742613922565b815b9050600061393384602001516145a1565b9050600061397b6139647f0000000000000000000000000000000000000000000000000000000000000000846139a0565b6020870151613974908690613612565b87516146a8565b905061399485604001518261361290919063ffffffff16565b98975050505050505050565b60008282018381101561360b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082613a0957506000611a1f565b82820282848281613a1657fe5b041461360b5760405162461bcd60e51b81526004018080602001828103825260218152602001806149de6021913960400191505060405180910390fd5b6000808211613aa9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613ab257fe5b049392505050565b6000806000837f000000000000000000000000000000000000000000000000000000000000000011613aed576000613b17565b613b177f000000000000000000000000000000000000000000000000000000000000000085613612565b905080613b2b576000859250925050613b4f565b613b3585826135f9565b613b49613b4287846135f9565b8790613612565b92509250505b9250929050565b6000806000806000613b678661157f565b9050613b7286613d3f565b9093509150613b8181846139a0565b94509092505050915091565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083528493849084015b82821015613c5257600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613bc0565b505050509050805160001415613c6c576000915050610aa3565b6000805b825181101561168e57828181518110613c8557fe5b60200260200101516101000151613cc357613cc0838281518110613ca557fe5b602002602001015160000151836139a090919063ffffffff16565b91505b600101613c70565b6001600160a01b03811660009081526008602052604090208054613cef575061231f565b60005b8154811015613d3a576001828281548110613d0957fe5b6000918252602090912060076008909202010180549115156101000261ff0019909216919091179055600101613cf2565b505050565b600f546000908190600160a81b900460ff16613d60575060009050806124b7565b6001600160a01b038316600090815260086020908152604080832080548251818502810185019093528083529192909190849084015b82821015613e2857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613d96565b505050509050805160001415613e455760008092509250506124b7565b600c54600090613e7d90611b2f7f00000000000000000000000000000000000000000000000000000000000000006305f5e1006139fa565b905060008060005b8451811015613f1d57848181518110613e9a57fe5b602002602001015160e00151613f15576000613ecc868381518110613ebb57fe5b602002602001015160c001516147b1565b9050613f02613efb7f0000000000000000000000000000000000000000000000000000000000000000836135f9565b85906139a0565b9350613f1161307e86836135f9565b9250505b600101613e85565b50600d5415613f4e57600d54613f349083906148d8565b9150613f4b600d54826148d890919063ffffffff16565b90505b90945092505050915091565b6000806000806000613f6c878761190f565b9050613f788787614388565b9093509150613f8781846139a0565b9791965090945050505050565b6001600160a01b03821660009081526008602052604090208054613fb8575061404a565b80548210613fc6575061404a565b6000613fd28484613808565b905042828481548110613fe157fe5b9060005260206000209060080201600301819055506140268183858154811061400657fe5b9060005260206000209060080201600201546139a090919063ffffffff16565b82848154811061403257fe5b90600052602060002090600802016002018190555050505b5050565b6001600160a01b03821660009081526008602052604090208054614072575061404a565b80828154811061407e57fe5b600091825260209091206007600890920201015460ff16156140a0575061404a565b60018183815481106140ae57fe5b60009182526020909120600890910201600701805460ff1916911515919091179055505050565b6001600160a01b038216600090815260086020908152604080832080548251818502810185019093528083528493849084015b8282101561419a57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101614108565b5050505090508051600014156141b4576000915050611a1f565b805183106141c6576000915050611a1f565b60008184815181106141d457fe5b602002602001015161010001516142125761420f8285815181106141f457fe5b602002602001015160000151826139a090919063ffffffff16565b90505b949350505050565b6001600160a01b0382166000908152600860205260409020805461423e575061404a565b8054821061424c575061404a565b600181838154811061425a57fe5b906000526020600020906008020160070160016101000a81548160ff021916908315150217905550505050565b6001600160a01b038116600090815260086020526040902080546142ab575061231f565b60005b8154811015613d3a5760006142c38483613808565b9050428383815481106142d257fe5b9060005260206000209060080201600301819055506142f78184848154811061400657fe5b83838154811061430357fe5b6000918252602090912060026008909202010155506001016142ae565b6001600160a01b03811660009081526008602052604090208054614344575061231f565b60005b8154811015613d3a57600182828154811061435e57fe5b60009182526020909120600890910201600701805460ff1916911515919091179055600101614347565b600f546000908190600160a81b900460ff166143a957506000905080613b4f565b6001600160a01b038416600090815260086020908152604080832080548251818502810185019093528083529192909190849084015b8282101561447157600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e0850152610100918290041615159083015290835290920191016143df565b50505050905080516000141561448e576000809250925050613b4f565b805184106144a3576000809250925050613b4f565b8084815181106144af57fe5b602002602001015160e00151156144cd576000809250925050613b4f565b600c5460009061450590611b2f7f00000000000000000000000000000000000000000000000000000000000000006305f5e1006139fa565b9050600080600061451b858981518110613ebb57fe5b905061454a61307e7f0000000000000000000000000000000000000000000000000000000000000000836135f9565b925061456061455985836135f9565b83906139a0565b600d549092501561459357600d546145799084906148d8565b9250614590600d54836148d890919063ffffffff16565b91505b509097909650945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006145d057506000610aa3565b600061461c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006139a0565b9050600061462a8285613612565b90506202a30081101561464257600092505050610aa3565b6203f48081101561465857606492505050610aa3565b6205460081101561466e5760c892505050610aa3565b620697808110156146855761012c92505050610aa3565b6207e90081101561469c5761019092505050610aa3565b6101f492505050610aa3565b60006301e13380816146c566038882915c40006305f5e1006139fa565b905060006146e16113886146db85818a8c6139fa565b906139fa565b905060006146f86113886146db8a6002880a6139fa565b905060006147116006611b2f6002808c0a908d0a6139fa565b905060006147346002611b2f886146db60028f0a8e6139fa90919063ffffffff16565b9050600061474d6003611b2f6002808f0a908b0a6139fa565b905060006147678261476186818b8b6139a0565b906139a0565b905061477783611cbd8388613612565b90506147878b6146db838f6139fa565b90506147a164e8d4a51000611b2f60038b0a81858f6139fa565b9c9b505050505050505050505050565b600060106000815481106147c157fe5b90600052602060002090600202016000015482116148005760106000815481106147e757fe5b9060005260206000209060020201600101549050610aa3565b601060018154811061480e57fe5b90600052602060002090600202016000015482116148345760106001815481106147e757fe5b601060028154811061484257fe5b90600052602060002090600202016000015482116148685760106002815481106147e757fe5b601060038154811061487657fe5b906000526020600020906002020160000154821161489c5760106003815481106147e757fe5b60106004815481106148aa57fe5b90600052602060002090600202016000015482116148d05760106004815481106147e757fe5b506000610aa3565b6000826148e757506000611a1f565b816148f3575081611a1f565b61360b61307e84846135f956fe303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726465724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373303336302043616e277420656e6420706f6f6c206265666f726520746865206d617475726974792074696d65303331322043616e2774207374616b652061626f76652073697a6520616c6c6f636174696f6e3033373020746f74656d732063616e206e6f74206265207472616e736665726564303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f773033313120416d6f756e742063616e2774206265206c657373207468616e20746865206d696e696d756d303336312057726170706564546f6b656e2052657761726473206e6f7420617661696c61626c65303335302043616e277420736574206d61747572696e67207072696365206265666f726520746865206d617475726974792074696d65a26469706673582212209823c8e49a73be01b1b7897a7e9c07a0fc701e606163e025384ed5c6850c159064736f6c63430007060033506f6f6c43726561746f72526f6c653a2063616c6c657220646f6573206e6f7420686176652074686520506f6f6c43726561746f7220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373a2646970667358221220b4305d45a2e88cee3e6d89a1f8463fac45df06aa4b8e10d49a1b487c74294e1364736f6c63430007060033526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c45760003560e01c80638c2d741c116200007b5780638c2d741c14620001555780639a94775d146200016c578063c31c9c071462000192578063d53b245b146200019c578063e281cc7e14620001b3578063e8153c9314620001bd57620000c4565b80630f4ef8a614620000c9578063233d107d14620000eb57806337e77675146200010257806341273657146200011b578063441f5c6514620001325780636b036f45146200014b575b600080fd5b620000d3620001c7565b604051620000e2919062000a6f565b60405180910390f35b620000d3620000fc366004620008e0565b620001eb565b6200011962000113366004620009dd565b6200026d565b005b620001196200012c366004620008bc565b620002bd565b6200013c6200035c565b604051620000e2919062000bad565b6200013c62000362565b6200011962000166366004620008bc565b62000368565b620001836200017d366004620008bc565b620003c1565b604051620000e2919062000aa4565b620000d3620003d7565b62000119620001ad366004620009dd565b620003e6565b620001196200045a565b620000d362000470565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000620001fb6200017d62000581565b620002385760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b610100830151806200024e576002546101008501525b60006200026089898989898962000585565b9998505050505050505050565b6200027b6200017d62000581565b620002b85760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b600355565b620002cb6200017d62000581565b620003085760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b6001600160a01b0381166200033a5760405162461bcd60e51b8152600401620003319062000b8f565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60025481565b60035481565b620003766200017d62000581565b620003b35760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b620003be8162000728565b50565b6000620003cf818362000494565b90505b919050565b6001546001600160a01b031681565b620003f46200017d62000581565b620004315760405162461bcd60e51b815260040180806020018281038252603a81526020018062005dc4603a913960400191505060405180910390fd5b6127108110620004555760405162461bcd60e51b8152600401620003319062000b48565b600255565b6200046e6200046862000581565b6200076c565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160a01b038216620004dd5760405162461bcd60e51b815260040180806020018281038252602281526020018062005e1f6022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b62000509828262000494565b156200055c576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b3390565b60008085857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000620005d662000581565b600160009054906101000a90046001600160a01b03168d7f00000000000000000000000000000000000000000000000000000000000000008e8c8c6040516200061f906200081b565b620006359b9a9998979695949392919062000aaf565b604051809103906000f08015801562000652573d6000803e3d6000fd5b509050806001600160a01b03167fd387ed1066dd2e6ea58f024e0522514c6392ebaf5f72100aef55c04311f8e33285856040516200069292919062000a83565b60405180910390a260405163d914cd4b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d914cd4b90620006e890849060040162000a6f565b600060405180830381600087803b1580156200070357600080fd5b505af115801562000718573d6000803e3d6000fd5b50929a9950505050505050505050565b62000735600082620004fd565b6040516001600160a01b038216907fac89bb7b3d0c5a763a97f31bc75f8faee00426e7b235f02ca76897d55caf7b6190600090a250565b62000779600082620007b0565b6040516001600160a01b038216907f2bc71cc60b543df5fdd80ef5a45e1cdb344843769b649e9d901de3be24aeb24e90600090a250565b620007bc828262000494565b620007f95760405162461bcd60e51b815260040180806020018281038252602181526020018062005dfe6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6151e88062000bdc83390190565b80356001600160a01b0381168114620003d257600080fd5b80358015158114620003d257600080fd5b600082601f83011262000863578081fd5b813567ffffffffffffffff8111156200087857fe5b6200088d601f8201601f191660200162000bb6565b818152846020838601011115620008a2578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215620008ce578081fd5b620008d98262000829565b9392505050565b6000806000806000806101e08789031215620008fa578182fd5b620009058762000829565b955060206200091681890162000829565b9550604088013567ffffffffffffffff8082111562000933578485fd5b620009418b838c0162000852565b965060608a013591508082111562000957578485fd5b50620009668a828b0162000852565b94505088609f89011262000978578283fd5b6200098561014062000bb6565b8060808a016101c08b018c8111156200099c578687fd5b865b600a811015620009bd578235855293850193918501916001016200099e565b50829650620009cc8162000841565b955050505050509295509295509295565b600060208284031215620009ef578081fd5b5035919050565b8060005b600a81101562000a1b578151845260209384019390910190600101620009fa565b50505050565b60008151808452815b8181101562000a485760208185018101518683018201520162000a2a565b8181111562000a5a5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b610160810162000a948285620009f6565b8215156101408301529392505050565b901515815260200190565b600061028080835262000ac58184018f62000a21565b9050828103602084015262000adb818e62000a21565b6001600160a01b038d811660408601528c811660608601528b811660808601528a811660a086015289811660c086015288811660e08601528716610100850152915062000b2f9050610120830185620009f6565b8215156102608301529c9b505050505050505050505050565b60208082526027908201527f303432302054617820636f6e6e6f74206265206f7665722031303025202831306040820152663030302042502960c81b606082015260800190565b6020808252600490820152630303431360e41b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171562000bd357fe5b60405291905056fe6102606040523480156200001257600080fd5b50604051620051e8380380620051e883398181016040526102808110156200003957600080fd5b81019080805160405193929190846401000000008211156200005a57600080fd5b9083019060208201858111156200007057600080fd5b82516401000000008111828201881017156200008b57600080fd5b82525081516020918201929091019080838360005b83811015620000ba578181015183820152602001620000a0565b50505050905090810190601f168015620000e85780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010c57600080fd5b9083019060208201858111156200012257600080fd5b82516401000000008111828201881017156200013d57600080fd5b82525081516020918201929091019080838360005b838110156200016c57818101518382015260200162000152565b50505050905090810190601f1680156200019a5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c086015160e0870151610240880151969950949750929591949093916101000190858484876000620001ea620004bb565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b03199081166001600160a01b039384161790915560038054821695831695909517909455600480548516938216939093179092556005805490931691161790558a51620002949060069060208e0190620004e1565b508951620002aa9060079060208d0190620004e1565b506001600160601b031960608a811b821660805289901b1660a052600f80546001600160a01b038781166001600160a01b031992831617909255600e8054928a16929091169190911790556200030084620004bf565b606092831b6001600160601b03191660c09081524260e0908152835161012090815260208086015161010090815260408088015161014052978701516101605260808701516101805260a08701516101a05293860151610200529185015161022052918401516101c0529201516101e052151560f81b61024052815180830183526001808252610ea6828401908152601080548084018255600082815294517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67260029283028181019290925593517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67391820155875180890189528281526107d081890190815284548088018655858952915191840280870192909255519082015587518089018952600381526103e881890190815284548088018655858952915191840280870192909255519082015587518089018952600a815260fa81890190815284548088018655858952915191840280870192909255519082015587518089019098526019885260649688019687528254948501835591909452945191909202918201559051910155506200058d9650505050505050565b3390565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000519576000855562000564565b82601f106200053457805160ff191683800117855562000564565b8280016001018555821562000564579182015b828111156200056457825182559160200191906001019062000547565b506200057292915062000576565b5090565b5b8082111562000572576000815560010162000577565b60805160601c60a05160601c60c05160601c60e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405160f81c614abb6200072d6000398061136c52806145a5525080610d2852806131d5525080610cf25280610d52528061318d52508061180b5280611a4b5250806117e75280613ac25280613af2525080610c3452806113eb52806118ed52806128445280612cc85280613e5452806144dc525080611a275280613ed6528061452552508061268e528061393f52508061155d5280611b095280611c7f5280612088525080610b91528061153952806125c352806138f2525080610a475280610bb252806125e452806138d052806145f8525080610a235280610bd3528061260552806138af52806145d752508061247c52806128705280612cf45280613400525080610a6b52806126fb528061278a5280612b805280612c0f5250806116f15280611b3b5280611bcc5280611d1a5280611ddd5280611e0c528061221d52806126cc52806129805280612b515280612dfd52806131b15250614abb6000f3fe608060405234801561001057600080fd5b50600436106103f15760003560e01c80639234a39a11610215578063d025188b11610125578063eee39403116100b8578063f3d9dc0d11610087578063f3d9dc0d146109e4578063f5e96fc9146109ec578063f8e829c3146109f4578063fd5e6dd1146109fc578063fd8fd47f14610a19576103f1565b8063eee3940314610966578063f0141d8414610983578063f1b17a8b146109a1578063f2fde38b146109be576103f1565b8063e425df8c116100f4578063e425df8c14610946578063e8153c931461094e578063eb850ae114610956578063eda2d4241461095e576103f1565b8063d025188b146108d9578063d7efb6b7146108e1578063d83db49f146108e9578063de09ee2014610906576103f1565b8063a7a48681116101a8578063b88a802f11610177578063b88a802f146108b1578063bece7532146108b9578063bf852196146108c1578063c1201054146108c9578063c6c1decd146108d1576103f1565b8063a7a4868114610867578063aa7bcb5714610884578063b1b1e1c01461088c578063b1dd61b6146108a9576103f1565b8063a08b2c79116101e4578063a08b2c79146107f7578063a150194b146107ff578063a35ef3a714610807578063a4e2d6341461085f576103f1565b80639234a39a146107c257806395c2ba47146107ca578063996c6cc3146107d25780639d9a62df146107da576103f1565b80635b9f4f90116103105780637b0472f0116102a3578063850fa7cb11610272578063850fa7cb1461072b5780638a9920b7146107a25780638bfbbcbe146107aa5780638da5cb5b146107b25780638e15f473146107ba576103f1565b80637b0472f0146106d75780637d1fcbfa146106fa5780637f2b6a0d1461071b578063817b1cd214610723576103f1565b8063715018a6116102df578063715018a61461069357806373f317031461069b578063765e14d8146106a3578063785fa627146106cf576103f1565b80635b9f4f90146106275780635d2631e21461064d5780636847d0c5146106835780636b036f451461068b576103f1565b80633fcdd82c116103885780634bc4eeb2116103575780634bc4eeb2146105d85780634ddc1bdc146105f45780634e8bfdaa1461061757806351eacbf01461061f576103f1565b80633fcdd82c146104f05780634026478e1461050d57806343352d6114610515578063444a4902146105b6576103f1565b8063238a6c74116103c4578063238a6c74146104595780632d42cf7d146104d65780632e577d07146104e057806331e244e5146104e8576103f1565b80630b97bc86146103f65780630d668087146104105780630f4ef8a6146104185780631898a1a71461043c575b600080fd5b6103fe610a21565b60408051918252519081900360200190f35b6103fe610a45565b610420610a69565b604080516001600160a01b039092168252519081900360200190f35b6103fe6004803603602081101561045257600080fd5b5035610a8d565b610461610aa8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049b578181015183820152602001610483565b50505050905090810190601f1680156104c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104de610b36565b005b610420610e6f565b6104de610e7f565b6103fe6004803603602081101561050657600080fd5b5035610eed565b6104de61106d565b61051d6110d0565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610561578181015183820152602001610549565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105a0578181015183820152602001610588565b5050505090500194505050505060405180910390f35b6104de60048036036106408110156105cd57600080fd5b506103208101611215565b6105e061136a565b604080519115158252519081900360200190f35b6104de6004803603604081101561060a57600080fd5b508035906020013561138e565b6103fe611537565b6103fe61155b565b6103fe6004803603602081101561063d57600080fd5b50356001600160a01b031661157f565b6104de6004803603606081101561066357600080fd5b506001600160a01b03813581169160208101359160409091013516611696565b6103fe6117e5565b6103fe611809565b6104de61182d565b6103fe6118eb565b6103fe600480360360408110156106b957600080fd5b506001600160a01b03813516906020013561190f565b6103fe611a25565b6104de600480360360408110156106ed57600080fd5b5080359060200135611a49565b61070261210c565b6040805192835260208301919091528051918290030190f35b6105e0612127565b6103fe612137565b6107576004803603604081101561074157600080fd5b506001600160a01b03813516906020013561213d565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c0850152151560e0840152151561010083015251908190036101200190f35b6104de6121ab565b6104de612322565b6104206123b9565b6103fe6123c8565b610702612462565b6103fe612475565b61042061247a565b610702600480360360208110156107f057600080fd5b503561249e565b6105e06124bc565b6103fe6124cc565b61080f6124d1565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561084b578181015183820152602001610833565b505050509050019250505060405180910390f35b6105e0612558565b6104de6004803603602081101561087d57600080fd5b5035612568565b6103fe61268c565b6104de600480360360208110156108a257600080fd5b50356126b0565b610461612ada565b6104de612b35565b610420612f50565b6103fe612f5f565b6103fe61309f565b61042061311b565b6103fe61312a565b6105e0613130565b6103fe600480360360208110156108ff57600080fd5b5035613140565b6109236004803603602081101561091c57600080fd5b5035613153565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6103fe61318b565b6104206131af565b6103fe6131d3565b6103fe6131f7565b6107026004803603602081101561097c57600080fd5b503561320e565b61098b613222565b6040805160ff9092168252519081900360200190f35b610702600480360360208110156109b757600080fd5b50356132a5565b6104de600480360360208110156109d457600080fd5b50356001600160a01b03166132d3565b6103fe6133e7565b6104206133ed565b6103fe6133fc565b61092360048036036020811015610a1257600080fd5b503561346b565b6103fe61347b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610aa0610a9a613484565b8361190f565b90505b919050565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b820191906000526020600020905b815481529060010190602001808311610b1157829003601f168201915b505050505081565b600e546001600160a01b0316610b4a613484565b6001600160a01b031614610b8f5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000000101421015610c325760405162461bcd60e51b815260040180806020018281038252602c81526020018061494a602c913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000015610c9b57610c606133fc565b610c9b5760405162461bcd60e51b8152600401808060200182810382526027815260200180614a296027913960400191505060405180910390fd5b60095415610cf057600a54610cf0576040805162461bcd60e51b81526020600482015260166024820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000015610d77576000610d20612f5f565b9050610d4c817f0000000000000000000000000000000000000000000000000000000000000000613488565b610d75577f0000000000000000000000000000000000000000000000000000000000000000600d555b505b600a54600090601910610d8c57600a54610d8f565b60195b905060005b81811015610e20578060010160086000600a8481548110610db157fe5b600091825260208083206002909202909101546001600160a01b031683528201929092526040019020600a805484908110610de857fe5b90600052602060002090600202016001015481548110610e0457fe5b6000918252602090912060066008909202010155600101610d94565b50600f805460ff60a81b1960ff60a01b19909116600160a01b1716600160a81b1790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a150565b6003546001600160a01b03165b90565b600e546001600160a01b0316610e93613484565b6001600160a01b031614610ed85760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b600f805460ff60b81b1916600160b81b179055565b60035460009081906001600160a01b031663d06ca61f84610f0c6124d1565b6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610f61578181015183820152602001610f49565b50505050905001935050505060006040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610fc257600080fd5b8101908080516040519392919084640100000000821115610fe257600080fd5b908301906020820185811115610ff757600080fd5b825186602082028301116401000000008211171561101457600080fd5b82525081516020918201928201910280838360005b83811015611041578181015183820152602001611029565b5050505090500160405250505090508060018151811061105d57fe5b6020026020010151915050919050565b600e546001600160a01b0316611081613484565b6001600160a01b0316146110c65760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b6110ce6134f6565b565b606080600060098054905067ffffffffffffffff811180156110f157600080fd5b5060405190808252806020026020018201604052801561111b578160200160208202803683370190505b5060095490915060009067ffffffffffffffff8111801561113b57600080fd5b50604051908082528060200260200182016040528015611165578160200160208202803683370190505b50905060005b60095481101561120b576009818154811061118257fe5b600091825260209091206002909102015483516001600160a01b03909116908490839081106111ad57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600981815481106111da57fe5b9060005260206000209060020201600101548282815181106111f857fe5b602090810291909101015260010161116b565b5090925090509091565b600e546001600160a01b0316611229613484565b6001600160a01b03161461126e5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b60005b601981101561133c57600083826019811061128857fe5b60200201356001600160a01b03166001600160a01b031614156112aa5761133c565b600a60405180604001604052808584601981106112c357fe5b60200201356001600160a01b03166001600160a01b031681526020018484601981106112eb57fe5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b039092169190911781559101519082015501611271565b506040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e546001600160a01b03166113a2613484565b6001600160a01b0316146113e75760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000116114465760405162461bcd60e51b81526004018080602001828103825260238152602001806149016023913960400191505060405180910390fd5b6000821161149b576040805162461bcd60e51b815260206004820152601960248201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604482015290519081900360640190fd5b428110156114e7576040805162461bcd60e51b81526020600482015260146024820152733033343220446561646c696e65206973206c6f7760601b604482015290519081900360640190fd5b60006114f1610e6f565b90506114fd8184613534565b600061150884610eed565b9050600061152261151b8361012c6135f9565b8390613612565b90506115303086838761366f565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083528493849084015b8282101561164457600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e0850152610100918290041615159083015290835290920191016115b2565b50505050905080516000141561165e576000915050610aa3565b6000805b825181101561168e5760006116778683613808565b905061168383826139a0565b925050600101611662565b509392505050565b600e546001600160a01b03166116aa613484565b6001600160a01b0316146116ef5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156117605760405162461bcd60e51b815260040180806020018281038252602181526020018061499c6021913960400191505060405180910390fd5b6040805163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529151859283169163a9059cbb9160448083019260209291908290030181600087803b1580156117b357600080fd5b505af11580156117c7573d6000803e3d6000fd5b505050506040513d60208110156117dd57600080fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b611835613484565b6001600160a01b03166118466123b9565b6001600160a01b0316146118a1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038216600090815260086020908152604080832080548251818502810185019093528083528493849084015b828210156119d457600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611942565b5050505090508051600014156119ee576000915050611a1f565b80518310611a00576000915050611a1f565b600080611a0d8686613808565b9050611a1982826139a0565b93505050505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000821015611aa85760405162461bcd60e51b815260040180806020018281038252602a8152602001806149ff602a913960400191505060405180910390fd5b600f54600160a01b900460ff1615611afd576040805162461bcd60e51b81526020600482015260136024820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604482015290519081900360640190fd5b6000611b356064611b2f7f000000000000000000000000000000000000000000000000000000000000000060056139fa565b90613a53565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663771a3a1d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9257600080fd5b505afa158015611ba6573d6000803e3d6000fd5b505050506040513d6020811015611bbc57600080fd5b5051905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d1ecfc68611bf9613484565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c3657600080fd5b505afa158015611c4a573d6000803e3d6000fd5b505050506040513d6020811015611c6057600080fd5b5051611c7557611c7085836135f9565b611c78565b60005b9050611ca47f0000000000000000000000000000000000000000000000000000000000000000846139a0565b611cc382611cbd88600b546139a090919063ffffffff16565b90613612565b1115611d005760405162461bcd60e51b81526004018080602001828103825260268152602001806149766026913960400191505060405180910390fd5b6000611d0c8684613aba565b965090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd611d47613484565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015230602483015289850160448301525160648083019260209291908290030181600087803b158015611d9c57600080fd5b505af1158015611db0573d6000803e3d6000fd5b505050506040513d6020811015611dc657600080fd5b50611dd390508683613612565b95508015611f0a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634a5db0a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6357600080fd5b505afa158015611e77573d6000803e3d6000fd5b505050506040513d6020811015611e8d57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b158015611edd57600080fd5b505af1158015611ef1573d6000803e3d6000fd5b505050506040513d6020811015611f0757600080fd5b50505b600b54611f1790876139a0565b600b8190555060096040518060400160405280611f32613484565b6001600160a01b0316815260200160086000611f4c613484565b6001600160a01b0390811682526020808301939093526040909101600090812054909352845460018082018755958452828420855160029092020180546001600160a01b031916919092161781559201519190920155600890611fad613484565b6001600160a01b03168152602080820192909252604090810160009081208251610120810184528a81524281860181815294820184815260608301918252608083018c815260001960a0850181815260c0860191825260e086018881526101008088018a8152895460018082018c559a8c529c909a2097516008909c029097019a8b559851968a01969096559151600289015591516003880155905160048701559151600586015590516006850155915160079093018054915160ff19929092169315159390931761ff001916901515909102179055600b547f0000000000000000000000000000000000000000000000000000000000000000116120b4576120b46134f6565b6120bc613484565b6001600160a01b03167f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b68787604051808381526020018281526020019250505060405180910390a2505050505050565b60008061211f61211a613484565b613b56565b915091509091565b600f54600160a81b900460ff1681565b600b5481565b6008602052816000526040600020818154811061215957600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b600f54600160b81b900460ff16612201576040805162461bcd60e51b815260206004820152601560248201527469742773206e6f7420616e20656d657267656e637960581b604482015290519081900360640190fd5b600061221361220e613484565b613b8d565b9050801561231f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612252613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561229957600080fd5b505af11580156122ad573d6000803e3d6000fd5b505050506040513d60208110156122c357600080fd5b506122d690506122d1613484565b613ccb565b6122de613484565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b50565b600e546001600160a01b0316612336613484565b6001600160a01b03161461237b5760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b600f805460ff60b01b1916600160b01b1790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b6000546001600160a01b031690565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561241957600080fd5b505afa15801561242d573d6000803e3d6000fd5b505050506040513d60a081101561244357600080fd5b50602001519050600081121561245a57600061245c565b805b91505090565b60008061211f612470613484565b613d3f565b600581565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806124b26124ac613484565b84613f5a565b915091505b915091565b600f54600160b81b900460ff1681565b600881565b60408051600280825260608083018452926000929190602083019080368337505060045482519293506001600160a01b03169183915060009061251057fe5b6001600160a01b03928316602091820292909201015260055482519116908290600190811061253b57fe5b6001600160a01b0390921660209283029190910190910152905090565b600f54600160a01b900460ff1681565b600e546001600160a01b031661257c613484565b6001600160a01b0316146125c15760405162461bcd60e51b81526004018080602001828103825260218152602001806149bd6021913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000001014210156126645760405162461bcd60e51b8152600401808060200182810382526036815260200180614a506036913960400191505060405180910390fd5b600f546001600160a01b031661267e57600c81905561231f565b6126866123c8565b600c5550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806126be6124ac613484565b9092509050811561281f57817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275757600080fd5b505afa15801561276b573d6000803e3d6000fd5b505050506040513d602081101561278157600080fd5b50511061281f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc6127bf613484565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561280657600080fd5b505af115801561281a573d6000803e3d6000fd5b505050505b61283061282a613484565b84613f94565b600f54600160a81b900460ff1615612a85577f000000000000000000000000000000000000000000000000000000000000000015612963578015612952577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6128a5613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156128ec57600080fd5b505af1158015612900573d6000803e3d6000fd5b505050506040513d602081101561291657600080fd5b5051612952576040805162461bcd60e51b815260206004808301919091526024820152630303333360e41b604482015290519081900360640190fd5b61296361295d613484565b8461404e565b6000612976612970613484565b856140d5565b90508015612a83577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb6129b5613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156129fc57600080fd5b505af1158015612a10573d6000803e3d6000fd5b505050506040513d6020811015612a2657600080fd5b50612a3a9050612a34613484565b8561421a565b612a42613484565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b612a8d613484565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a2505050565b6007805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b2e5780601f10610b0357610100808354040283529160200191610b2e565b600080612b4361211a613484565b90925090508115612ca457817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612bdc57600080fd5b505afa158015612bf0573d6000803e3d6000fd5b505050506040513d6020811015612c0657600080fd5b505110612ca4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e4e103dc612c44613484565b846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612c8b57600080fd5b505af1158015612c9f573d6000803e3d6000fd5b505050505b612cb4612caf613484565b614287565b600f54600160a81b900460ff1615612efc577f000000000000000000000000000000000000000000000000000000000000000015612de6578015612dd6577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612d29613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612d7057600080fd5b505af1158015612d84573d6000803e3d6000fd5b505050506040513d6020811015612d9a57600080fd5b5051612dd6576040805162461bcd60e51b815260206004808301919091526024820152630303332360e41b604482015290519081900360640190fd5b612de6612de1613484565b614320565b6000612df361220e613484565b90508015612efa577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb612e32613484565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612e7957600080fd5b505af1158015612e8d573d6000803e3d6000fd5b505050506040513d6020811015612ea357600080fd5b50612eb190506122d1613484565b612eb9613484565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040518082815260200191505060405180910390a25b505b612f04613484565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688383604051808381526020018281526020019250505060405180910390a25050565b600f546001600160a01b031681565b6000600b5460001415612f7457506000610e7c565b6000805b6009548110156130905760006008600060098481548110612f9557fe5b600091825260208083206002909202909101546001600160a01b0316835282019290925260400190206009805484908110612fcc57fe5b90600052602060002090600202016001015481548110612fe857fe5b600091825260209182902060408051610120810182526008909302909101805480845260018201549484019490945260028101549183019190915260038101546060830152600481015460808301819052600582015460a0840152600682015460c084015260079091015460ff808216151560e085015261010091829004161515908301529092506130859161307e91906139fa565b84906139a0565b925050600101612f78565b50600b5461245c908290613a53565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156130ea57600080fd5b505afa1580156130fe573d6000803e3d6000fd5b505050506040513d602081101561311457600080fd5b5051905090565b600e546001600160a01b031681565b600c5481565b600f54600160b01b900460ff1681565b6000610aa061314d613484565b836140d5565b600a818154811061316357600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000613209613204613484565b61157f565b905090565b6000806124b261321c613484565b84614388565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d602081101561329d57600080fd5b505191505090565b601081815481106132b557600080fd5b60009182526020909120600290910201805460019091015490915082565b6132db613484565b6001600160a01b03166132ec6123b9565b6001600160a01b031614613347576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661338c5760405162461bcd60e51b81526004018080602001828103825260268152602001806149246026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600d5481565b6002546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156130ea57600080fd5b6009818154811061316357600080fd5b600061320961220e5b3390565b6000600c548311156134c657600c546134a18484613612565b116134ae57506000611a1f565b600c546134bf90611cbd8585613612565b9050611a1f565b600c546134d384846139a0565b106134e057506000611a1f565b6134bf6134ed84846139a0565b600c5490613612565b600f805460ff60a01b1916600160a01b1790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b6002546040805163095ea7b360e01b81526001600160a01b038581166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561358a57600080fd5b505af115801561359e573d6000803e3d6000fd5b505050506040513d60208110156135b457600080fd5b50506040805182815290516001600160a01b038416917fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a1919081900360200190a25050565b600061360b612710611b2f85856139fa565b9392505050565b600082821115613669576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b03841661368257600080fd5b6003546001600160a01b03166338ed1739848461369d6124d1565b88866040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561370f5781810151838201526020016136f7565b505050509050019650505050505050600060405180830381600087803b15801561373857600080fd5b505af115801561374c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561377557600080fd5b810190808051604051939291908464010000000082111561379557600080fd5b9083019060208201858111156137aa57600080fd5b82518660208202830111640100000000821117156137c757600080fd5b82525081516020918201928201910280838360005b838110156137f45781810151838201526020016137dc565b505050509050016040525050505050505050565b6001600160a01b038216600090815260086020526040812080548291908490811061382f57fe5b6000918252602080832060408051610120810182526008909402909101805484526001810154928401929092526002820154908301526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460ff808216151560e0840152610100918290041615159082015291507f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000017f000000000000000000000000000000000000000000000000000000000000000001904282106139205742613922565b815b9050600061393384602001516145a1565b9050600061397b6139647f0000000000000000000000000000000000000000000000000000000000000000846139a0565b6020870151613974908690613612565b87516146a8565b905061399485604001518261361290919063ffffffff16565b98975050505050505050565b60008282018381101561360b576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082613a0957506000611a1f565b82820282848281613a1657fe5b041461360b5760405162461bcd60e51b81526004018080602001828103825260218152602001806149de6021913960400191505060405180910390fd5b6000808211613aa9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381613ab257fe5b049392505050565b6000806000837f000000000000000000000000000000000000000000000000000000000000000011613aed576000613b17565b613b177f000000000000000000000000000000000000000000000000000000000000000085613612565b905080613b2b576000859250925050613b4f565b613b3585826135f9565b613b49613b4287846135f9565b8790613612565b92509250505b9250929050565b6000806000806000613b678661157f565b9050613b7286613d3f565b9093509150613b8181846139a0565b94509092505050915091565b6001600160a01b038116600090815260086020908152604080832080548251818502810185019093528083528493849084015b82821015613c5257600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613bc0565b505050509050805160001415613c6c576000915050610aa3565b6000805b825181101561168e57828181518110613c8557fe5b60200260200101516101000151613cc357613cc0838281518110613ca557fe5b602002602001015160000151836139a090919063ffffffff16565b91505b600101613c70565b6001600160a01b03811660009081526008602052604090208054613cef575061231f565b60005b8154811015613d3a576001828281548110613d0957fe5b6000918252602090912060076008909202010180549115156101000261ff0019909216919091179055600101613cf2565b505050565b600f546000908190600160a81b900460ff16613d60575060009050806124b7565b6001600160a01b038316600090815260086020908152604080832080548251818502810185019093528083529192909190849084015b82821015613e2857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101613d96565b505050509050805160001415613e455760008092509250506124b7565b600c54600090613e7d90611b2f7f00000000000000000000000000000000000000000000000000000000000000006305f5e1006139fa565b905060008060005b8451811015613f1d57848181518110613e9a57fe5b602002602001015160e00151613f15576000613ecc868381518110613ebb57fe5b602002602001015160c001516147b1565b9050613f02613efb7f0000000000000000000000000000000000000000000000000000000000000000836135f9565b85906139a0565b9350613f1161307e86836135f9565b9250505b600101613e85565b50600d5415613f4e57600d54613f349083906148d8565b9150613f4b600d54826148d890919063ffffffff16565b90505b90945092505050915091565b6000806000806000613f6c878761190f565b9050613f788787614388565b9093509150613f8781846139a0565b9791965090945050505050565b6001600160a01b03821660009081526008602052604090208054613fb8575061404a565b80548210613fc6575061404a565b6000613fd28484613808565b905042828481548110613fe157fe5b9060005260206000209060080201600301819055506140268183858154811061400657fe5b9060005260206000209060080201600201546139a090919063ffffffff16565b82848154811061403257fe5b90600052602060002090600802016002018190555050505b5050565b6001600160a01b03821660009081526008602052604090208054614072575061404a565b80828154811061407e57fe5b600091825260209091206007600890920201015460ff16156140a0575061404a565b60018183815481106140ae57fe5b60009182526020909120600890910201600701805460ff1916911515919091179055505050565b6001600160a01b038216600090815260086020908152604080832080548251818502810185019093528083528493849084015b8282101561419a57600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101614108565b5050505090508051600014156141b4576000915050611a1f565b805183106141c6576000915050611a1f565b60008184815181106141d457fe5b602002602001015161010001516142125761420f8285815181106141f457fe5b602002602001015160000151826139a090919063ffffffff16565b90505b949350505050565b6001600160a01b0382166000908152600860205260409020805461423e575061404a565b8054821061424c575061404a565b600181838154811061425a57fe5b906000526020600020906008020160070160016101000a81548160ff021916908315150217905550505050565b6001600160a01b038116600090815260086020526040902080546142ab575061231f565b60005b8154811015613d3a5760006142c38483613808565b9050428383815481106142d257fe5b9060005260206000209060080201600301819055506142f78184848154811061400657fe5b83838154811061430357fe5b6000918252602090912060026008909202010155506001016142ae565b6001600160a01b03811660009081526008602052604090208054614344575061231f565b60005b8154811015613d3a57600182828154811061435e57fe5b60009182526020909120600890910201600701805460ff1916911515919091179055600101614347565b600f546000908190600160a81b900460ff166143a957506000905080613b4f565b6001600160a01b038416600090815260086020908152604080832080548251818502810185019093528083529192909190849084015b8282101561447157600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e0850152610100918290041615159083015290835290920191016143df565b50505050905080516000141561448e576000809250925050613b4f565b805184106144a3576000809250925050613b4f565b8084815181106144af57fe5b602002602001015160e00151156144cd576000809250925050613b4f565b600c5460009061450590611b2f7f00000000000000000000000000000000000000000000000000000000000000006305f5e1006139fa565b9050600080600061451b858981518110613ebb57fe5b905061454a61307e7f0000000000000000000000000000000000000000000000000000000000000000836135f9565b925061456061455985836135f9565b83906139a0565b600d549092501561459357600d546145799084906148d8565b9250614590600d54836148d890919063ffffffff16565b91505b509097909650945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006145d057506000610aa3565b600061461c7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006139a0565b9050600061462a8285613612565b90506202a30081101561464257600092505050610aa3565b6203f48081101561465857606492505050610aa3565b6205460081101561466e5760c892505050610aa3565b620697808110156146855761012c92505050610aa3565b6207e90081101561469c5761019092505050610aa3565b6101f492505050610aa3565b60006301e13380816146c566038882915c40006305f5e1006139fa565b905060006146e16113886146db85818a8c6139fa565b906139fa565b905060006146f86113886146db8a6002880a6139fa565b905060006147116006611b2f6002808c0a908d0a6139fa565b905060006147346002611b2f886146db60028f0a8e6139fa90919063ffffffff16565b9050600061474d6003611b2f6002808f0a908b0a6139fa565b905060006147678261476186818b8b6139a0565b906139a0565b905061477783611cbd8388613612565b90506147878b6146db838f6139fa565b90506147a164e8d4a51000611b2f60038b0a81858f6139fa565b9c9b505050505050505050505050565b600060106000815481106147c157fe5b90600052602060002090600202016000015482116148005760106000815481106147e757fe5b9060005260206000209060020201600101549050610aa3565b601060018154811061480e57fe5b90600052602060002090600202016000015482116148345760106001815481106147e757fe5b601060028154811061484257fe5b90600052602060002090600202016000015482116148685760106002815481106147e757fe5b601060038154811061487657fe5b906000526020600020906002020160000154821161489c5760106003815481106147e757fe5b60106004815481106148aa57fe5b90600052602060002090600202016000015482116148d05760106004815481106147e757fe5b506000610aa3565b6000826148e757506000611a1f565b816148f3575081611a1f565b61360b61307e84846135f956fe303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726465724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373303336302043616e277420656e6420706f6f6c206265666f726520746865206d617475726974792074696d65303331322043616e2774207374616b652061626f76652073697a6520616c6c6f636174696f6e3033373020746f74656d732063616e206e6f74206265207472616e736665726564303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f773033313120416d6f756e742063616e2774206265206c657373207468616e20746865206d696e696d756d303336312057726170706564546f6b656e2052657761726473206e6f7420617661696c61626c65303335302043616e277420736574206d61747572696e67207072696365206265666f726520746865206d617475726974792074696d65a26469706673582212209823c8e49a73be01b1b7897a7e9c07a0fc701e606163e025384ed5c6850c159064736f6c63430007060033506f6f6c43726561746f72526f6c653a2063616c6c657220646f6573206e6f7420686176652074686520506f6f6c43726561746f7220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c65526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373a2646970667358221220b4305d45a2e88cee3e6d89a1f8463fac45df06aa4b8e10d49a1b487c74294e1364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2058,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "_poolCreators",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Role)2275_storage"
      },
      {
        "astId": 5290,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5294,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "stakingPoolTaxRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5296,
        "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "minimumStakeAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Role)2275_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2274,
            "contract": "contracts/Staking/StakingPoolFactory.sol:StakingPoolFactory",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}