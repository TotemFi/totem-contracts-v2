{
  "address": "0x3b751ca2664A131154213cD1DFa67575d05A9724",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TotemToken",
          "name": "_totemToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ManagerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ManagerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CommunityDevelopmentAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_StakingRewardsAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LiquidityPoolAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_PublicSaleAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_AdvisorsAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_SeedInvestmentAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_PrivateSaleAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_TeamAllocationAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_StrategicRoundAddr",
          "type": "address"
        }
      ],
      "name": "setDistributionTeamsAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_locker",
          "type": "address"
        }
      ],
      "name": "setLocker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setTaxExemptStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTaxRate",
          "type": "uint256"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTaxationWallet",
          "type": "address"
        }
      ],
      "name": "setTaxationWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "totemTokenTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50369b59fc15b3f405a68bc9e9fe37b1f44a5bffeb520185922b7c1ebfa29ebe",
  "receipt": {
    "to": null,
    "from": "0x6aB29B1766256F01df388B3a25d02C24f454020c",
    "contractAddress": "0x3b751ca2664A131154213cD1DFa67575d05A9724",
    "transactionIndex": 2,
    "gasUsed": "885737",
    "logsBloom": "0x
    "blockHash": "0xcb23b5f50882866381ae3086960143bdefa67a798351189793296756987d6b3b",
    "transactionHash": "0x50369b59fc15b3f405a68bc9e9fe37b1f44a5bffeb520185922b7c1ebfa29ebe",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10030255,
        "transactionHash": "0x50369b59fc15b3f405a68bc9e9fe37b1f44a5bffeb520185922b7c1ebfa29ebe",
        "address": "0x3b751ca2664A131154213cD1DFa67575d05A9724",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006ab29b1766256f01df388b3a25d02c24f454020c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcb23b5f50882866381ae3086960143bdefa67a798351189793296756987d6b3b"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 10030255,
        "transactionHash": "0x50369b59fc15b3f405a68bc9e9fe37b1f44a5bffeb520185922b7c1ebfa29ebe",
        "address": "0x3b751ca2664A131154213cD1DFa67575d05A9724",
        "topics": [
          "0x3b4a40cccf2058c593542587329dd385be4f0b588db5471fbd9598e56dd7093a",
          "0x0000000000000000000000006ab29b1766256f01df388b3a25d02c24f454020c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xcb23b5f50882866381ae3086960143bdefa67a798351189793296756987d6b3b"
      }
    ],
    "blockNumber": 10030255,
    "cumulativeGasUsed": "927737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6FF1BFa14A57594a5874B37ff6AC5efbD9F9599A"
  ],
  "solcInputHash": "16065098d390b813c73eb47e61975614",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TotemToken\",\"name\":\"_totemToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ManagerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CommunityDevelopmentAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_StakingRewardsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LiquidityPoolAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PublicSaleAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_AdvisorsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SeedInvestmentAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PrivateSaleAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TeamAllocationAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_StrategicRoundAddr\",\"type\":\"address\"}],\"name\":\"setDistributionTeamsAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"name\":\"setLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTaxExemptStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxationWallet\",\"type\":\"address\"}],\"name\":\"setTaxationWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"totemTokenTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TotemTokenManager.sol\":\"TotemTokenManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0x8344571960f250b1c03ba9f259c452b26b04370ac4723ef262969d822174bee6\",\"license\":\"UNLICENSED\"},\"contracts/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface ILocker {\\n    /**\\n     * @dev Fails if transaction is not allowed.\\n     * Return values can be ignored for AntiBot launches\\n     */\\n    function lockOrGetPenalty(address source, address dest)\\n        external\\n        returns (bool, uint256);\\n}\\n\\ninterface ILockerUser {\\n    function locker() external view returns (ILocker);\\n\\n    /**\\n     * @dev Emitted when setLocker is called.\\n     */\\n    event SetLocker(address indexed locker);\\n}\\n\\n\",\"keccak256\":\"0x51a18df7a6b1708e8d614f547eb09dd79e64093413bb0081dbb8f0f411ce0e96\",\"license\":\"UNLICENSED\"},\"contracts/Role/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\",\"keccak256\":\"0x1156e37e7835772537d5dfb53649b1e39b1eff5791f6bd759664168fcc7c8462\",\"license\":\"UNLICENSED\"},\"contracts/TotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\nimport \\\"./BasisPoints.sol\\\";\\n\\ncontract TotemToken is ILockerUser, Context, ERC20, Ownable {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"Totem Token\\\";\\n    string public constant SYMBOL = \\\"TOTM\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY = 10000000 * (10**uint256(DECIMALS));\\n\\n    address public CommunityDevelopmentAddr;\\n    address public StakingRewardsAddr;\\n    address public LiquidityPoolAddr;\\n    address public PublicSaleAddr;\\n    address public AdvisorsAddr;\\n    address public SeedInvestmentAddr;\\n    address public PrivateSaleAddr;\\n    address public TeamAllocationAddr;\\n    address public StrategicRoundAddr;\\n\\n    uint256 public constant COMMUNITY_DEVELOPMENT =\\n        1000000 * (10**uint256(DECIMALS)); // 10% for Community development\\n    uint256 public constant STAKING_REWARDS = 1650000 * (10**uint256(DECIMALS)); // 16.5% for Staking Revawards\\n    uint256 public constant LIQUIDITY_POOL = 600000 * (10**uint256(DECIMALS)); // 6% for Liquidity pool\\n    uint256 public constant ADVISORS = 850000 * (10**uint256(DECIMALS)); // 8.5% for Advisors\\n    uint256 public constant SEED_INVESTMENT = 450000 * (10**uint256(DECIMALS)); // 4.5% for Seed investment\\n    uint256 public constant PRIVATE_SALE = 2000000 * (10**uint256(DECIMALS)); // 20% for Private Sale\\n    uint256 public constant TEAM_ALLOCATION = 1500000 * (10**uint256(DECIMALS)); // 15% for Team allocation\\n\\n    uint256 public constant LAUNCH_POOL =\\n        5882352941 * (10**uint256(DECIMALS - 5)); // 58823.52941 for LaunchPool\\n    uint256 public constant PUBLIC_SALE =\\n        450000 * (10**uint256(DECIMALS)) + LAUNCH_POOL; // 4.5% for Public Sale\\n    uint256 public constant STRATEGIC_ROUND =\\n        1500000 * (10**uint256(DECIMALS)) - LAUNCH_POOL; // 15% for Strategic Round\\n    uint256 public taxRate = 300;\\n    address public taxationWallet;\\n\\n    bool private _isDistributionComplete = false;\\n\\n    mapping(address => bool) public taxExempt;\\n\\n    ILocker public override locker;\\n\\n    constructor() ERC20(NAME, SYMBOL) {\\n        taxationWallet = _msgSender();\\n\\n        _mint(address(this), INITIAL_SUPPLY);\\n    }\\n\\n    function setLocker(address _locker) external onlyOwner() {\\n        require(_locker != address(0), \\\"_locker cannot be address(0)\\\");\\n        locker = ILocker(_locker);\\n        emit SetLocker(_locker);\\n    }\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) public onlyOwner {\\n        require(!_isDistributionComplete);\\n\\n        require(_CommunityDevelopmentAddr != address(0));\\n        require(_StakingRewardsAddr != address(0));\\n        require(_LiquidityPoolAddr != address(0));\\n        require(_PublicSaleAddr != address(0));\\n        require(_AdvisorsAddr != address(0));\\n        require(_SeedInvestmentAddr != address(0));\\n        require(_PrivateSaleAddr != address(0));\\n        require(_TeamAllocationAddr != address(0));\\n        require(_StrategicRoundAddr != address(0));\\n        // set parnters addresses\\n        CommunityDevelopmentAddr = _CommunityDevelopmentAddr;\\n        StakingRewardsAddr = _StakingRewardsAddr;\\n        LiquidityPoolAddr = _LiquidityPoolAddr;\\n        PublicSaleAddr = _PublicSaleAddr;\\n        AdvisorsAddr = _AdvisorsAddr;\\n        SeedInvestmentAddr = _SeedInvestmentAddr;\\n        PrivateSaleAddr = _PrivateSaleAddr;\\n        TeamAllocationAddr = _TeamAllocationAddr;\\n        StrategicRoundAddr = _StrategicRoundAddr;\\n    }\\n\\n    function distributeTokens() public onlyOwner {\\n        require((!_isDistributionComplete));\\n\\n        _transfer(\\n            address(this),\\n            CommunityDevelopmentAddr,\\n            COMMUNITY_DEVELOPMENT\\n        );\\n        _transfer(address(this), StakingRewardsAddr, STAKING_REWARDS);\\n        _transfer(address(this), LiquidityPoolAddr, LIQUIDITY_POOL);\\n        _transfer(address(this), PublicSaleAddr, PUBLIC_SALE);\\n        _transfer(address(this), AdvisorsAddr, ADVISORS);\\n        _transfer(address(this), SeedInvestmentAddr, SEED_INVESTMENT);\\n        _transfer(address(this), PrivateSaleAddr, PRIVATE_SALE);\\n        _transfer(address(this), TeamAllocationAddr, TEAM_ALLOCATION);\\n        _transfer(address(this), StrategicRoundAddr, STRATEGIC_ROUND);\\n\\n        // Whitelist these addresses as tex exempt\\n        setTaxExemptStatus(CommunityDevelopmentAddr, true);\\n        setTaxExemptStatus(StakingRewardsAddr, true);\\n        setTaxExemptStatus(LiquidityPoolAddr, true);\\n        setTaxExemptStatus(PublicSaleAddr, true);\\n        setTaxExemptStatus(AdvisorsAddr, true);\\n        setTaxExemptStatus(SeedInvestmentAddr, true);\\n        setTaxExemptStatus(PrivateSaleAddr, true);\\n        setTaxExemptStatus(TeamAllocationAddr, true);\\n        setTaxExemptStatus(StrategicRoundAddr, true);\\n\\n        _isDistributionComplete = true;\\n    }\\n\\n    function setTaxRate(uint256 newTaxRate) public onlyOwner {\\n        require(newTaxRate < 10000, \\\"Tax connot be over 100% (10000 BP)\\\");\\n        taxRate = newTaxRate;\\n    }\\n\\n    function setTaxExemptStatus(address account, bool status) public onlyOwner {\\n        require(account != address(0));\\n        taxExempt[account] = status;\\n    }\\n\\n    function setTaxationWallet(address newTaxationWallet) public onlyOwner {\\n        require(newTaxationWallet != address(0));\\n        taxationWallet = newTaxationWallet;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (address(locker) != address(0)) {\\n            locker.lockOrGetPenalty(sender, recipient);\\n        }\\n        ERC20._transfer(sender, recipient, amount);\\n    }\\n\\n    function _transferWithTax(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(sender != recipient, \\\"Cannot self transfer\\\");\\n\\n        uint256 tax = amount.mulBP(taxRate);\\n        uint256 tokensToTransfer = amount.sub(tax);\\n\\n        _transfer(sender, taxationWallet, tax);\\n        _transfer(sender, recipient, tokensToTransfer);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_msgSender() != recipient, \\\"ERC20: cannot self transfer\\\");\\n        !taxExempt[_msgSender()]\\n            ? _transferWithTax(_msgSender(), recipient, amount)\\n            : _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        !taxExempt[sender]\\n            ? _transferWithTax(sender, recipient, amount)\\n            : _transfer(sender, recipient, amount);\\n\\n        approve(\\n            _msgSender(),\\n            allowance(sender, _msgSender()).sub(\\n                amount,\\n                \\\"Transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xfa21ba84a53a411dd96bf813d4c25a1168b631e1e5d098bb892c7e46a5e83ab0\",\"license\":\"UNLICENSED\"},\"contracts/TotemTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"./TotemToken.sol\\\";\\nimport \\\"./Role/Roles.sol\\\";\\n\\ncontract TotemTokenManager is Context, Ownable {\\n\\n    TotemToken totemToken;\\n\\n    using Roles for Roles.Role;\\n\\n    Roles.Role private _managers;\\n\\n    event ManagerAdded(address indexed account);\\n    event ManagerRemoved(address indexed account);\\n\\n    constructor(TotemToken _totemToken) {\\n        if (!isManager(_msgSender())) {\\n            _addManager(_msgSender());\\n        }\\n\\n        totemToken = _totemToken;\\n    }\\n\\n    modifier onlyManager() {\\n        require(\\n            isManager(_msgSender()),\\n            \\\"0100 caller does not have the Manager role\\\"\\n        );\\n        _;\\n    }\\n\\n    function isManager(address account) public view returns (bool) {\\n        return _managers.has(account);\\n    }\\n\\n    function addManager(address account) public onlyOwner {\\n        _addManager(account);\\n    }\\n\\n    function removeManager(address account) public onlyOwner {\\n        _removeManager(account);\\n    }\\n\\n    function renounceManager() public {\\n        _removeManager(_msgSender());\\n    }\\n\\n    function _addManager(address account) internal {\\n        _managers.add(account);\\n        emit ManagerAdded(account);\\n    }\\n\\n    function _removeManager(address account) internal {\\n        _managers.remove(account);\\n        emit ManagerRemoved(account);\\n    }\\n\\n    function setLocker(address _locker) external onlyOwner {\\n        totemToken.setLocker(_locker);\\n    }\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) public onlyOwner {\\n        totemToken.setDistributionTeamsAddresses(\\n            _CommunityDevelopmentAddr,\\n            _StakingRewardsAddr,\\n            _LiquidityPoolAddr,\\n            _PublicSaleAddr,\\n            _AdvisorsAddr,\\n            _SeedInvestmentAddr,\\n            _PrivateSaleAddr,\\n            _TeamAllocationAddr,\\n            _StrategicRoundAddr\\n        );\\n    }\\n\\n    function distributeTokens() public onlyOwner {\\n        totemToken.distributeTokens();\\n    }\\n\\n    function setTaxRate(uint256 newTaxRate) public onlyOwner {\\n        totemToken.setTaxRate(newTaxRate);\\n    }\\n\\n    function setTaxExemptStatus(address account, bool status) public onlyManager {\\n        totemToken.setTaxExemptStatus(account, status);\\n    }\\n\\n    function setTaxationWallet(address newTaxationWallet) public onlyOwner {\\n        totemToken.setTaxationWallet(newTaxationWallet);\\n    }\\n\\n\\n    function renounceOwnership() public override onlyOwner {\\n        // renounceOwnership is over written and do nothing\\n    }\\n\\n    function totemTokenTransferOwnership(address newOwner) public onlyOwner {\\n        totemToken.transferOwnership(newOwner);\\n    }\\n}\",\"keccak256\":\"0x052af2ea934bae0f6aa2a2bda3770de9e7584e6ac07874204df543c1fbe2003f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063abd7b03f1161008c578063c6d69a3011610066578063c6d69a301461027b578063f2fde38b14610298578063f3ae2415146102be578063f8b91abe146102f8576100ea565b8063abd7b03f14610201578063ac18de4314610227578063c125c8611461024d576100ea565b8063715018a6116100c8578063715018a6146101635780638da5cb5b1461016b5780639ab1b4841461018f578063a8d61e9c14610197576100ea565b8063171060ec146100ef57806328e2f997146101175780632d06177a1461013d575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b0316610300565b005b6101156004803603602081101561012d57600080fd5b50356001600160a01b03166103cb565b6101156004803603602081101561015357600080fd5b50356001600160a01b031661047b565b6101156104e9565b61017361054d565b604080516001600160a01b039092168252519081900360200190f35b61011561055c565b61011560048036036101208110156101ae57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e08101358216916101009091013516610628565b6101156004803603602081101561021757600080fd5b50356001600160a01b031661073d565b6101156004803603602081101561023d57600080fd5b50356001600160a01b03166107ed565b6101156004803603604081101561026357600080fd5b506001600160a01b0381351690602001351515610858565b6101156004803603602081101561029157600080fd5b5035610915565b610115600480360360208110156102ae57600080fd5b50356001600160a01b03166109c4565b6102e4600480360360208110156102d457600080fd5b50356001600160a01b0316610ac6565b604080519115158252519081900360200190f35b610115610ad9565b610308610bd1565b6001600160a01b031661031961054d565b6001600160a01b031614610362576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b600154604080516305c4183b60e21b81526001600160a01b0384811660048301529151919092169163171060ec91602480830192600092919082900301818387803b1580156103b057600080fd5b505af11580156103c4573d6000803e3d6000fd5b5050505050565b6103d3610bd1565b6001600160a01b03166103e461054d565b6001600160a01b03161461042d576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b600154604080516328e2f99760e01b81526001600160a01b038481166004830152915191909216916328e2f99791602480830192600092919082900301818387803b1580156103b057600080fd5b610483610bd1565b6001600160a01b031661049461054d565b6001600160a01b0316146104dd576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b6104e681610bd5565b50565b6104f1610bd1565b6001600160a01b031661050261054d565b6001600160a01b03161461054b576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b565b6000546001600160a01b031690565b610564610bd1565b6001600160a01b031661057561054d565b6001600160a01b0316146105be576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b600160009054906101000a90046001600160a01b03166001600160a01b0316639ab1b4846040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b50505050565b610630610bd1565b6001600160a01b031661064161054d565b6001600160a01b03161461068a576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b60015460408051632a3587a760e21b81526001600160a01b038c811660048301528b811660248301528a811660448301528981166064830152888116608483015287811660a483015286811660c483015285811660e48301528481166101048301529151919092169163a8d61e9c9161012480830192600092919082900301818387803b15801561071a57600080fd5b505af115801561072e573d6000803e3d6000fd5b50505050505050505050505050565b610745610bd1565b6001600160a01b031661075661054d565b6001600160a01b03161461079f576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b6001546040805163f2fde38b60e01b81526001600160a01b0384811660048301529151919092169163f2fde38b91602480830192600092919082900301818387803b1580156103b057600080fd5b6107f5610bd1565b6001600160a01b031661080661054d565b6001600160a01b03161461084f576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b6104e681610c17565b610868610863610bd1565b610ac6565b6108a35760405162461bcd60e51b815260040180806020018281038252602a815260200180610ce7602a913960400191505060405180910390fd5b6001546040805163c125c86160e01b81526001600160a01b03858116600483015284151560248301529151919092169163c125c86191604480830192600092919082900301818387803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b505050505050565b61091d610bd1565b6001600160a01b031661092e61054d565b6001600160a01b031614610977576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b60015460408051630c6d69a360e41b81526004810184905290516001600160a01b039092169163c6d69a309160248082019260009290919082900301818387803b1580156103b057600080fd5b6109cc610bd1565b6001600160a01b03166109dd61054d565b6001600160a01b031614610a26576040805162461bcd60e51b81526020600482018190526024820152600080516020610d32833981519152604482015290519081900360640190fd5b6001600160a01b038116610a6b5760405162461bcd60e51b8152600401808060200182810382526026815260200180610cc16026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ad3600283610ae9565b92915050565b61054b610ae4610bd1565b610c17565b60006001600160a01b038216610b305760405162461bcd60e51b8152600401808060200182810382526022815260200180610d526022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b610b5a8282610ae9565b15610bac576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b3390565b610be0600282610b50565b6040516001600160a01b038216907f3b4a40cccf2058c593542587329dd385be4f0b588db5471fbd9598e56dd7093a90600090a250565b610c22600282610c59565b6040516001600160a01b038216907fef69f7d97228658c92417be1b16b19058315de71fecb435d07b7d23728b6bd3190600090a250565b610c638282610ae9565b610c9e5760405162461bcd60e51b8152600401808060200182810382526021815260200180610d116021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff1916905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373303130302063616c6c657220646f6573206e6f74206861766520746865204d616e6167657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373a26469706673582212200b343303b548ffffb2fe43fedb5944d46dd42e194367fa3a03ca0a75074821c264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/TotemTokenManager.sol:TotemTokenManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6304,
        "contract": "contracts/TotemTokenManager.sol:TotemTokenManager",
        "label": "totemToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TotemToken)6294"
      },
      {
        "astId": 6309,
        "contract": "contracts/TotemTokenManager.sol:TotemTokenManager",
        "label": "_managers",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Role)2284_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(TotemToken)6294": {
        "encoding": "inplace",
        "label": "contract TotemToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Role)2284_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2283,
            "contract": "contracts/TotemTokenManager.sol:TotemTokenManager",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}