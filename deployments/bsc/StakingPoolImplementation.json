{
  "address": "0xCFf44eB12E00f822fB8c0E5A43610d3D1CEF5e59",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ApproveTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "stakeAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "predictions",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfFirstStake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfLastStake",
          "type": "uint256"
        }
      ],
      "name": "BatchStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributedBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolMatured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PoolSorted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePrediction",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indexOfStake",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingReturn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawStakingReturn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totemPrize",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTotemPrize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wrappedTokenPrize",
          "type": "uint256"
        }
      ],
      "name": "WithdrawWrappedTokenPrize",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapRouterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "BUSDContractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "WrappedTokenContractAddress",
          "type": "address"
        }
      ],
      "name": "__WrappedTokenDistributor_initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "averagePricePrediction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakingAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_predictions",
          "type": "uint256[]"
        }
      ],
      "name": "batchStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaborativeRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collaborativeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "declareEmergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deletePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergentWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prediction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_range",
          "type": "uint256"
        }
      ],
      "name": "getDifference",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getEstimatedWrappedTokenForUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getIndexedPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "getIndexedStakingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPathForUSDToWrappedToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        }
      ],
      "name": "getPrizeTokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTaxRate",
          "type": "uint256"
        }
      ],
      "name": "getStakingTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUSDToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "hasUnStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeIndex",
          "type": "uint256"
        }
      ],
      "name": "indexedClaimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAnEmergency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDeleted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEnhancedEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMatured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launchDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "launchDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdPrizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prizeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collaborativeReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oracleDecimals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEnhancedEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isMatured",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturityTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "potentialCollabReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "predictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePrediction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "difference",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rank",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "prizeRewardWithdrawn",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "didUnstake",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prizeRewardRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rank",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "purchaseWrappedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "contract IRewardManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_activationStatus",
          "type": "bool"
        }
      ],
      "name": "setActivationStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setOracleToZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[25]",
          "name": "addrArray",
          "type": "address[25]"
        },
        {
          "internalType": "uint256[25]",
          "name": "indexArray",
          "type": "uint256[25]"
        }
      ],
      "name": "setSortedStakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sizeAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sizeLimitRangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sortedStakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pricePrediction",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTaxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingPoolImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totemToken",
      "outputs": [
        {
          "internalType": "contract ITotemToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_predictionPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_samePredictionPrizeToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_prizePrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracleContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_oracleDecimals",
          "type": "uint256"
        }
      ],
      "name": "updateMaturingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPrizeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stuckToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdrawStuckTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedTokenSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd013082f0d00c1beb1fd53d76b2705c78123572bbc9cb46495ff3a51a6258d6a",
  "receipt": {
    "to": null,
    "from": "0x6aB29B1766256F01df388B3a25d02C24f454020c",
    "contractAddress": "0xCFf44eB12E00f822fB8c0E5A43610d3D1CEF5e59",
    "transactionIndex": 4,
    "gasUsed": "4628290",
    "logsBloom": "0x
    "blockHash": "0xb8e04050a53d7663e85ac3f81973e1cfaf117310e6d89c275d760380712da7b5",
    "transactionHash": "0xd013082f0d00c1beb1fd53d76b2705c78123572bbc9cb46495ff3a51a6258d6a",
    "logs": [],
    "blockNumber": 16392328,
    "cumulativeGasUsed": "4901416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "76f008015b3cb0a981d2ea9d5ea5c61e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ApproveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"stakeAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"predictions\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfFirstStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfLastStake\",\"type\":\"uint256\"}],\"name\":\"BatchStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributedBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolMatured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PoolSorted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePrediction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfStake\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingReturn\",\"type\":\"uint256\"}],\"name\":\"WithdrawStakingReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemPrize\",\"type\":\"uint256\"}],\"name\":\"WithdrawTotemPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrappedTokenPrize\",\"type\":\"uint256\"}],\"name\":\"WithdrawWrappedTokenPrize\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BUSDContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WrappedTokenContractAddress\",\"type\":\"address\"}],\"name\":\"__WrappedTokenDistributor_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"averagePricePrediction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakingAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_predictions\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaborativeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collaborativeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergentWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prediction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_range\",\"type\":\"uint256\"}],\"name\":\"getDifference\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getEstimatedWrappedTokenForUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexedPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getIndexedStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPathForUSDToWrappedToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"}],\"name\":\"getPrizeTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTaxRate\",\"type\":\"uint256\"}],\"name\":\"getStakingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"hasUnStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"indexedClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAnEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnhancedEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"launchDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collaborativeReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEnhancedEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMatured\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialCollabReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"predictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePrediction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"prizeRewardWithdrawn\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"didUnstake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeRewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"purchaseWrappedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activationStatus\",\"type\":\"bool\"}],\"name\":\"setActivationStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setOracleToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[25]\",\"name\":\"addrArray\",\"type\":\"address[25]\"},{\"internalType\":\"uint256[25]\",\"name\":\"indexArray\",\"type\":\"uint256[25]\"}],\"name\":\"setSortedStakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeLimitRangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sortedStakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePrediction\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPoolImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemToken\",\"outputs\":[{\"internalType\":\"contract ITotemToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_predictionPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_samePredictionPrizeToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_prizePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_oracleDecimals\",\"type\":\"uint256\"}],\"name\":\"updateMaturingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPrizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stuckToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getEstimatedWrappedTokenForUSD(uint256)\":{\"params\":{\"_amount\":\"Amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaturingPrice(uint256,bool,uint256,address,uint256)\":{\"params\":{\"_predictionPrice\":\"is ignored if oracle is not zero address.When there is no oracle, _predictionPrice is the maturingPrice and is set manually by the pool creator\",\"_prizePrice\":\"is ignored if oracle is not zero address.When there is no oracle, _predictionPrice is the maturingPrice and is set manually by the pool creator\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collaborativeReward()\":{\"notice\":\"Based on the white paper, the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500).\"},\"hasUnStaked(address,uint256)\":{\"notice\":\"hasUnStaked return true if the user staked in the pool and then  has unStaked it (claimed)\"},\"setOracleToZero()\":{\"notice\":\"Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available\"},\"setSortedStakers(address[25],uint256[25])\":{\"notice\":\"Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available\"},\"usdPrizeAmount()\":{\"notice\":\"usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0  then the pool is only TOTM rewarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingPoolImplementation.sol\":\"StakingPoolImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Distribution/USDRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract USDRetriever {\\n    IERC20 internal USDCContract;\\n\\n    event ReceivedTokens(address indexed from, uint256 amount);\\n    event TransferTokens(address indexed to, uint256 amount);\\n    event ApproveTokens(address indexed to, uint256 amount);\\n\\n    function setUSDToken(address _usdContractAddress) internal {\\n        USDCContract = IERC20(_usdContractAddress);\\n    }\\n\\n    function approveTokens(address _to, uint256 _amount) internal {\\n        USDCContract.approve(_to, _amount);\\n        emit ApproveTokens(_to, _amount);\\n    }\\n\\n    function getUSDBalance() external view returns (uint256) {\\n        return USDCContract.balanceOf(address(this));\\n    }\\n\\n    function getUSDToken() external view returns (address) {\\n        return address(USDCContract);\\n    }\\n}\\n\",\"keccak256\":\"0xf8ce825a5e793fc484345dc3f0a6740a30789f5350e78e88ec8299a37b5f6e29\",\"license\":\"UNLICENSED\"},\"contracts/Distribution/WrappedTokenDistributorUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IPancakeRouter.sol\\\";\\n\\ncontract WrappedTokenDistributorUpgradeable is Initializable{\\n    IPancakeRouter02 internal swapRouter;\\n    address internal BUSD_CONTRACT_ADDRESS;\\n    address internal WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n    event DistributedBTC(address indexed to, uint256 amount);\\n\\n    function __WrappedTokenDistributor_initialize(\\n        address swapRouterAddress,\\n        address BUSDContractAddress,\\n        address WrappedTokenContractAddress\\n    ) public initializer {\\n        swapRouter = IPancakeRouter02(swapRouterAddress);\\n        BUSD_CONTRACT_ADDRESS = BUSDContractAddress;\\n        WRAPPED_Token_CONTRACT_ADDRESS = WrappedTokenContractAddress;\\n    }\\n\\n    /**\\n     * @param _to Reciever address\\n     * @param _usdAmount USD Amount\\n     * @param _wrappedTokenAmount Wrapped Token Amount\\n     */\\n    function transferTokensThroughSwap(\\n        address _to,\\n        uint256 _usdAmount,\\n        uint256 _wrappedTokenAmount,\\n        uint256 _deadline\\n    ) internal {\\n        require(_to != address(0));\\n        // Get max USD price we can spend for this amount.\\n        swapRouter.swapExactTokensForTokens(\\n            _usdAmount,\\n            _wrappedTokenAmount,\\n            getPathForUSDToWrappedToken(),\\n            _to,\\n            _deadline\\n        );\\n    }\\n\\n    /**\\n     * @param _amount Amount\\n     */\\n    function getEstimatedWrappedTokenForUSD(uint256 _amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory wrappedTokenAmount =\\n            swapRouter.getAmountsOut(_amount, getPathForUSDToWrappedToken());\\n        // since in the path the wrappedToken is the second one, so we should retuen the second one also here    \\n        return wrappedTokenAmount[1];\\n    }\\n\\n    function getPathForUSDToWrappedToken() public view returns (address[] memory) {\\n        address[] memory path = new address[](2);\\n        path[0] = BUSD_CONTRACT_ADDRESS;\\n        path[1] = WRAPPED_Token_CONTRACT_ADDRESS;\\n\\n        return path;\\n    }\\n\\n    function getSwapRouter() public view returns (address) {\\n        return address(swapRouter);\\n    }\\n}\\n\",\"keccak256\":\"0xd7e60cfdab6b448bf1119bd8f7a320db4ef747d1e0e1d81c5c74795de00870f6\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StakingPoolStorageStructure.sol\\\";\\n\\ncontract StakingPoolImplementation is StakingPoolStorageStructure {\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n    using CalculateRewardLib for *;\\n    using IndexedClaimRewardLib for *;\\n    using ClaimRewardLib for *;\\n    using PriceConsumer for *;\\n\\n    modifier onlyPoolCreator() {\\n        require(\\n            _msgSender() == poolCreator,\\n            \\\"0300 caller is not a pool creator\\\"\\n        );\\n        _;\\n    }\\n\\n    event Stake(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 pricePrediction,\\n        uint256 indexOfStake\\n    );\\n\\n    // TODO: add the index of stakes for BatchStake event too\\n    event BatchStake(\\n        address indexed user,\\n        uint256[] stakeAmounts,\\n        uint256[] predictions,\\n        uint256 indexOfFirstStake,\\n        uint256 indexOfLastStake\\n    );\\n\\n    event WithdrawStakingReturn(address indexed user, uint256 stakingReturn);\\n    event WithdrawTotemPrize(address indexed user, uint256 totemPrize);\\n    event WithdrawWrappedTokenPrize(\\n        address indexed user,\\n        uint256 wrappedTokenPrize\\n    );\\n    event Unstake(address indexed user, uint256 amount);\\n\\n    event PoolActivated();\\n    event PoolDeactivated();\\n    event PoolLocked();\\n    event PoolSorted();\\n    event PoolMatured();\\n    event PoolDeleted();\\n\\n    function setActivationStatus(bool _activationStatus)\\n        external\\n        onlyPoolCreator\\n    {\\n        require(\\n            isActive != _activationStatus,\\n            \\\"Not changing the activation status\\\"\\n        );\\n        isActive = _activationStatus;\\n\\n        if (isActive) emit PoolActivated();\\n        else emit PoolDeactivated();\\n    }\\n\\n    function stake(uint256 _amount, uint256 _pricePrediction) external {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            block.timestamp < (launchDate + lockTime),\\n            \\\"0316 Can not stake after lock date\\\"\\n        );\\n        require(!isLocked, \\\"0310 Pool is locked\\\");\\n        require(\\n            _amount >= minimumStakeAmount,\\n            \\\"0311 Amount can't be less than the minimum\\\"\\n        );\\n\\n        // uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 limitRange = minimumStakeAmount;\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax = totemToken.taxExempt(_msgSender())\\n            ? 0\\n            : _amount.mulBP(taxRate);\\n\\n        require(\\n            totalStaked.add(_amount).sub(tax) <= sizeAllocation.add(limitRange),\\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        uint256 stakeTaxAmount;\\n\\n        (stakeTaxAmount, _amount) = getStakingTax(_amount, taxRate);\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (_amount + stakeTaxAmount)\\n        );\\n\\n        /// @dev This is to remove token tax (not staking tax) from the amount\\n        _amount = _amount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        uint256 indexOfStake = predictions[_msgSender()].length;\\n\\n        _stake(_msgSender(), _amount, _pricePrediction);\\n\\n        totalStaked = totalStaked.add(_amount);\\n\\n        if (totalStaked >= sizeAllocation) {\\n            _lockPool();\\n        }\\n\\n        emit Stake(_msgSender(), _amount, _pricePrediction, indexOfStake);\\n    }\\n\\n    function batchStake(\\n        uint256[] calldata _stakingAmounts,\\n        uint256[] calldata _predictions\\n    ) external {\\n        require(\\n            isActive && block.timestamp > launchDate,\\n            \\\"0313 pool is not active\\\"\\n        );\\n        require(\\n            block.timestamp < (launchDate + lockTime),\\n            \\\"0316 Can not stake after lock date\\\"\\n        );\\n        require(!isLocked, \\\"0310 Pool is locked\\\");\\n        require(\\n            _stakingAmounts.length == _predictions.length,\\n            \\\"0315 stakingAmount and predictions length mismatch\\\"\\n        );\\n\\n        uint256 totalStakingAmount = 0;\\n\\n        for (uint256 i; i < _stakingAmounts.length; i++) {\\n            require(\\n                _stakingAmounts[i] >= minimumStakeAmount,\\n                \\\"0311 Amount can't be less than the minimum\\\"\\n            );\\n            totalStakingAmount = totalStakingAmount.add(_stakingAmounts[i]);\\n        }\\n\\n        // uint256 limitRange = sizeAllocation.mul(sizeLimitRangeRate).div(100);\\n        uint256 limitRange = minimumStakeAmount;\\n        uint256 taxRate = totemToken.taxRate();\\n        uint256 tax = totemToken.taxExempt(_msgSender())\\n            ? 0\\n            : totalStakingAmount.mulBP(taxRate);\\n\\n        require(\\n            totalStaked.add(totalStakingAmount).sub(tax) <=\\n                sizeAllocation.add(limitRange),\\n            \\\"0312 Can't stake above size allocation\\\"\\n        );\\n\\n        uint256 stakeTaxAmount;\\n\\n        (stakeTaxAmount, totalStakingAmount) = getStakingTax(\\n            totalStakingAmount,\\n            taxRate\\n        );\\n\\n        totemToken.transferFrom(\\n            _msgSender(),\\n            address(this),\\n            (totalStakingAmount + stakeTaxAmount)\\n        );\\n\\n        /// @dev This is to remove token tax (not staking tax) from the amount\\n        totalStakingAmount = totalStakingAmount.sub(tax);\\n\\n        if (stakeTaxAmount > 0)\\n            totemToken.transfer(totemToken.taxationWallet(), stakeTaxAmount);\\n\\n        uint256 indexOfFirstStake = predictions[_msgSender()].length;\\n\\n        for (uint256 i; i < _stakingAmounts.length; i++) {\\n            uint256 stakingAmount = _stakingAmounts[i];\\n\\n            tax = totemToken.taxExempt(_msgSender())\\n                ? 0\\n                : stakingAmount.mulBP(taxRate);\\n\\n            (stakeTaxAmount, stakingAmount) = getStakingTax(\\n                stakingAmount,\\n                taxRate\\n            );\\n\\n            /// @dev This is to remove token tax (not staking tax) from the amount\\n            stakingAmount = stakingAmount.sub(tax);\\n\\n            _stake(_msgSender(), stakingAmount, _predictions[i]);\\n\\n            totalStaked = totalStaked.add(stakingAmount);\\n        }\\n\\n        uint256 indexOfLastStake = predictions[_msgSender()].length - 1;\\n\\n        if (totalStaked >= sizeAllocation) {\\n            _lockPool();\\n        }\\n\\n        emit BatchStake(\\n            _msgSender(),\\n            _stakingAmounts,\\n            _predictions,\\n            indexOfFirstStake,\\n            indexOfLastStake\\n        );\\n    }\\n\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint256 _pricePrediction\\n    ) internal {\\n        stakers.push(\\n            Staker({stakerAddress: _staker, index: predictions[_staker].length})\\n        );\\n\\n        predictions[_staker].push(\\n            StakeWithPrediction({\\n                stakedBalance: _amount,\\n                stakedTime: block.timestamp,\\n                amountWithdrawn: 0,\\n                lastWithdrawalTime: block.timestamp,\\n                pricePrediction: _pricePrediction,\\n                difference: type(uint256).max,\\n                rank: type(uint256).max,\\n                prizeRewardWithdrawn: false,\\n                didUnstake: false\\n            })\\n        );\\n\\n        _getAveragePricePrediction(_pricePrediction, _amount);\\n    }\\n\\n    function getStakingTax(uint256 amount, uint256 tokenTaxRate)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 newStakeTaxRate = stakeTaxRate > tokenTaxRate\\n            ? stakeTaxRate.sub(tokenTaxRate)\\n            : 0;\\n        if (newStakeTaxRate == 0) {\\n            return (0, amount);\\n        }\\n        return (\\n            amount.mulBP(newStakeTaxRate),\\n            amount.sub(amount.mulBP(newStakeTaxRate))\\n        );\\n    }\\n\\n    function claimReward() external {\\n        uint256 stakingReturn = ClaimRewardLib.getStakingReturn(\\n            predictions[_msgSender()],\\n            lps\\n        );\\n\\n        (uint256 totemPrize, uint256 wrappedTokenPrize) = ClaimRewardLib\\n            .getPrize(predictions[_msgSender()], lps, prizeRewardRates);\\n\\n        uint256 withdrawableTotemReward = totemPrize + stakingReturn;\\n\\n        if (isMatured) {\\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenPrize > 0) {\\n                    /// @dev Not the actual withdraw, only updating the array in the mapping\\n                    ClaimRewardLib.withdrawPrize(predictions[_msgSender()]);\\n\\n                    require(\\n                        wrappedToken.transfer(_msgSender(), wrappedTokenPrize),\\n                        \\\"0320\\\"\\n                    );\\n\\n                    emit WithdrawWrappedTokenPrize(\\n                        _msgSender(),\\n                        wrappedTokenPrize\\n                    );\\n                }\\n            }\\n\\n            if (totemPrize > 0) {\\n                ClaimRewardLib.withdrawPrize(predictions[_msgSender()]);\\n            }\\n\\n            uint256 stakedBalance = CalculateRewardLib.getTotalStakedBalance(\\n                predictions[_msgSender()]\\n            );\\n\\n            if (stakedBalance > 0) {\\n                ClaimRewardLib.withdrawStakedBalance(predictions[_msgSender()]);\\n\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        /// @dev before maturity, totemPrize is always zero\\n        if (withdrawableTotemReward > 0) {\\n            /// @dev Send the token reward only when rewardManager has the enough funds\\n            require(\\n                totemToken.balanceOf(address(rewardManager)) >=\\n                    withdrawableTotemReward,\\n                \\\"Not enough balance in reward manager\\\"\\n            );\\n\\n            ClaimRewardLib.withdrawStakingReturn(\\n                predictions[_msgSender()],\\n                lps\\n            );\\n\\n            rewardManager.rewardUser(_msgSender(), withdrawableTotemReward);\\n\\n            emit WithdrawStakingReturn(_msgSender(), stakingReturn);\\n            emit WithdrawTotemPrize(_msgSender(), totemPrize);\\n        }\\n    }\\n\\n    function indexedClaimReward(uint256 stakeIndex) external {\\n        require(\\n            predictions[_msgSender()].length >= stakeIndex,\\n            \\\"Index does not exist\\\"\\n        );\\n        require(\\n            predictions[_msgSender()].length != 0,\\n            \\\"User does not have any stakes\\\"\\n        );\\n\\n        uint256 stakingReturn = IndexedClaimRewardLib.getIndexedStakingReturn(\\n            predictions[_msgSender()],\\n            stakeIndex,\\n            lps\\n        );\\n\\n        (uint256 totemPrize, uint256 wrappedTokenPrize) = IndexedClaimRewardLib\\n            .getIndexedPrize(\\n                predictions[_msgSender()],\\n                stakeIndex,\\n                lps,\\n                prizeRewardRates\\n            );\\n\\n        uint256 withdrawableTotemReward = totemPrize + stakingReturn;\\n\\n        if (isMatured) {\\n            if (usdPrizeAmount > 0) {\\n                if (wrappedTokenPrize > 0) {\\n                    IndexedClaimRewardLib.withdrawIndexedPrize(\\n                        predictions[_msgSender()],\\n                        stakeIndex\\n                    );\\n\\n                    require(\\n                        wrappedToken.transfer(_msgSender(), wrappedTokenPrize),\\n                        \\\"0330\\\"\\n                    );\\n\\n                    emit WithdrawWrappedTokenPrize(\\n                        _msgSender(),\\n                        wrappedTokenPrize\\n                    );\\n                }\\n            }\\n\\n            if (totemPrize > 0) {\\n                IndexedClaimRewardLib.withdrawIndexedPrize(\\n                    predictions[_msgSender()],\\n                    stakeIndex\\n                );\\n            }\\n\\n            uint256 stakedBalance = IndexedClaimRewardLib\\n                .getIndexedStakedBalance(predictions[_msgSender()], stakeIndex);\\n\\n            if (stakedBalance > 0) {\\n                IndexedClaimRewardLib.withdrawIndexedStakedBalance(\\n                    predictions[_msgSender()],\\n                    stakeIndex\\n                );\\n\\n                totemToken.transfer(_msgSender(), stakedBalance);\\n\\n                emit Unstake(_msgSender(), stakedBalance);\\n            }\\n        }\\n\\n        /// @dev before maturity, totemPrize is always zero\\n        if (withdrawableTotemReward > 0) {\\n            /// @dev Send the token reward only when rewardManager has the enough funds\\n            require(\\n                totemToken.balanceOf(address(rewardManager)) >=\\n                    withdrawableTotemReward,\\n                \\\"Not enough balance in reward manager\\\"\\n            );\\n\\n            IndexedClaimRewardLib.withdrawIndexedStakingReturn(\\n                predictions[_msgSender()],\\n                stakeIndex,\\n                lps\\n            );\\n\\n            rewardManager.rewardUser(_msgSender(), withdrawableTotemReward);\\n\\n            emit WithdrawStakingReturn(_msgSender(), stakingReturn);\\n            emit WithdrawTotemPrize(_msgSender(), totemPrize);\\n        }\\n    }\\n\\n    function purchaseWrappedToken(uint256 usdAmount, uint256 deadline)\\n        external\\n        onlyPoolCreator\\n    {\\n        //TODO: require usdAmount to be more than usdPrizeAmount, to have enough rewards\\n        require(usdPrizeAmount > 0, \\\"0340 The pool is only TOTM rewarder\\\");\\n\\n        require(usdAmount > 0, \\\"0341 Amount can't be zero\\\");\\n\\n        require(deadline >= block.timestamp, \\\"0342 Deadline is low\\\");\\n\\n        address swapRouterAddress = getSwapRouter();\\n        approveTokens(swapRouterAddress, usdAmount);\\n\\n        uint256 wrappedTokenAmount = getEstimatedWrappedTokenForUSD(usdAmount);\\n\\n        uint256 wrappedTokenAmountWithSlippage = wrappedTokenAmount.sub(\\n            wrappedTokenAmount.mulBP(300)\\n        );\\n\\n        transferTokensThroughSwap(\\n            address(this),\\n            usdAmount,\\n            wrappedTokenAmountWithSlippage,\\n            deadline\\n        );\\n    }\\n\\n    function getWrappedTokenBalance() public view returns (uint256) {\\n        return wrappedToken.balanceOf(address(this));\\n    }\\n\\n    function lockPool() public virtual onlyPoolCreator {\\n        _lockPool();\\n    }\\n\\n    function _lockPool() internal {\\n        isLocked = true;\\n\\n        emit PoolLocked();\\n    }\\n\\n    /**\\n     * @param _predictionPrice is ignored if oracle is not zero address.When there is no oracle,\\n             _predictionPrice is the maturingPrice and is set manually by the pool creator\\n     * @param _prizePrice is ignored if oracle is not zero address.When there is no oracle,\\n             _predictionPrice is the maturingPrice and is set manually by the pool creator\\n    */\\n    function updateMaturingPrice(\\n        uint256 _predictionPrice,\\n        bool _samePredictionPrizeToken,\\n        uint256 _prizePrice,\\n        address _oracleContract,\\n        uint256 _oracleDecimals\\n    ) external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0350 Can't set maturing price before the maturity time\\\"\\n        );\\n\\n        if (_samePredictionPrizeToken) {\\n            if (oracleContract != address(0)) {\\n                maturingPrice = PriceConsumer.getLatestPrice(oracleContract);\\n                lps.maturingPrice = maturingPrice;\\n                lps.oracleDecimals = oracleDecimals;\\n            } else {\\n                maturingPrice = _predictionPrice;\\n                lps.maturingPrice = _predictionPrice;\\n                lps.oracleDecimals = oracleDecimals;\\n            }\\n        } else {\\n            if (oracleContract != address(0)) {\\n                if (_oracleContract != address(0)) {\\n                    maturingPrice = PriceConsumer.getLatestPrice(\\n                        oracleContract\\n                    );\\n                    lps.maturingPrice = PriceConsumer.getLatestPrice(\\n                        _oracleContract\\n                    );\\n                    lps.oracleDecimals = PriceConsumer.getDecimals(\\n                        _oracleContract\\n                    );\\n                } else {\\n                    maturingPrice = PriceConsumer.getLatestPrice(\\n                        oracleContract\\n                    );\\n                    lps.maturingPrice = _prizePrice;\\n                    lps.oracleDecimals = _oracleDecimals;\\n                }\\n            } else {\\n                if (_oracleContract != address(0)) {\\n                    maturingPrice = _predictionPrice;\\n                    lps.maturingPrice = PriceConsumer.getLatestPrice(\\n                        _oracleContract\\n                    );\\n                    lps.oracleDecimals = PriceConsumer.getDecimals(\\n                        _oracleContract\\n                    );\\n                } else {\\n                    maturingPrice = _predictionPrice;\\n                    lps.maturingPrice = _prizePrice;\\n                    lps.oracleDecimals = _oracleDecimals;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getLPS() public view returns (uint256, uint256) {\\n        return (lps.maturingPrice, lps.oracleDecimals);\\n    }\\n\\n    function getPrizeTokenDecimals(address _oracleContract)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return PriceConsumer.getDecimals(_oracleContract);\\n    }\\n\\n    /**\\n     * @notice Sets oracle to zero in case it was given incorrectly by the owner,\\n     *         or it is not available\\n     */\\n    function setOracleToZero() external onlyPoolCreator {\\n        oracleContract = address(0);\\n    }\\n\\n    /**\\n     * @notice Sets oracle to zero in case it was given incorrectly by the owner,\\n     *         or it is not available\\n     */\\n\\n    function setSortedStakers(\\n        address[25] calldata addrArray,\\n        uint256[25] calldata indexArray\\n    ) external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0390 Can't set sorted stakers before the maturity time\\\"\\n        );\\n\\n        if (sortedStakers.length != 0) {\\n            delete sortedStakers;\\n        }\\n\\n        uint256 i;\\n        for (i = 0; i < addrArray.length; i++) {\\n            /// @dev The first 0 address means the other addresses are also 0 so they won't be checked\\n            if (addrArray[i] == address(0)) break;\\n\\n            sortedStakers.push(\\n                Staker({stakerAddress: addrArray[i], index: indexArray[i]})\\n            );\\n\\n            predictions[addrArray[i]][indexArray[i]].rank = i + 1;\\n        }\\n\\n        require(\\n            prizeRewardRates[prizeRewardRates.length - 1].rank >= i,\\n            \\\"number of sorted stakers must be less than or equal to the last rank\\\"\\n        );\\n\\n        emit PoolSorted();\\n    }\\n\\n    function endPool() external onlyPoolCreator {\\n        require(\\n            block.timestamp >= launchDate + lockTime + maturityTime,\\n            \\\"0360 Can't end pool before the maturity time\\\"\\n        );\\n\\n        //TODO: check to see if there is enough USD to buy the wrapped token with, the mimimum USD\\n        // must be usdPrizeAmount, if there is not, do not allow endPool\\n        if (usdPrizeAmount > 0) {\\n            require(\\n                getWrappedTokenBalance() != 0,\\n                \\\"0361 WrappedToken Rewards not available\\\"\\n            );\\n        }\\n\\n        if (stakers.length > 0) {\\n            require(sortedStakers.length != 0, \\\"0362 first should sort\\\");\\n        }\\n\\n        /**\\n         *  @dev potentialCollabReward allows the admin to set the collaborateive reward\\n         *  @notice the collaborative reward is only given to the pools which the average price\\n         *          predicted has the accuracy of 25$\\n         */\\n        if (potentialCollabReward > 0) {\\n            if (\\n                getDifference(averagePricePrediction, collaborativeRange) == 0\\n            ) {\\n                collaborativeReward = potentialCollabReward;\\n                lps.collaborativeReward = collaborativeReward;\\n            }\\n        }\\n\\n        isLocked = true;\\n        isMatured = true;\\n        lps.isMatured = isMatured;\\n\\n        emit PoolMatured();\\n    }\\n\\n    function getDifference(uint256 prediction, uint256 _range)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_range > prediction) return 0;\\n\\n        if (prediction > maturingPrice) {\\n            if (prediction.sub(_range) <= maturingPrice) return 0;\\n            else return prediction.sub(_range).sub(maturingPrice);\\n        } else {\\n            if (prediction.add(_range) >= maturingPrice) return 0;\\n            else return maturingPrice.sub(prediction.add(_range));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the avgerage price prediction for calculating collaborative reward\\n     */\\n    function _getAveragePricePrediction(uint256 _prediction, uint256 _amount)\\n        internal\\n    {\\n        uint256 predictionsCount = stakers.length - 1;\\n\\n        if (predictionsCount == 0) averagePricePrediction = _prediction;\\n\\n        averagePricePrediction = averagePricePrediction\\n            .mul(totalStaked)\\n            .add(_prediction.mul(_amount))\\n            .div(totalStaked.add(_amount));\\n    }\\n\\n    function deletePool() external onlyPoolCreator {\\n        isDeleted = true;\\n        emit PoolDeleted();\\n    }\\n\\n    function getStakers()\\n        public\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        address[] memory addrs = new address[](stakers.length);\\n        uint256[] memory indexes = new uint256[](stakers.length);\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            addrs[i] = stakers[i].stakerAddress;\\n            indexes[i] = stakers[i].index;\\n        }\\n\\n        return (addrs, indexes);\\n    }\\n\\n    function getStakingReward(address _staker) public view returns (uint256) {\\n        uint256 reward = ClaimRewardLib.getStakingReturn(\\n            predictions[_staker],\\n            lps\\n        );\\n\\n        return reward;\\n    }\\n\\n    function getIndexedStakingReward(address _staker, uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 reward = IndexedClaimRewardLib.getIndexedStakingReturn(\\n            predictions[_staker],\\n            _stakeIndex,\\n            lps\\n        );\\n\\n        return reward;\\n    }\\n\\n    function getPrize(address _staker) public view returns (uint256, uint256) {\\n        (uint256 reward, uint256 wrappedTokenReward) = ClaimRewardLib.getPrize(\\n            predictions[_staker],\\n            lps,\\n            prizeRewardRates\\n        );\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    function getIndexedPrize(address _staker, uint256 _stakeIndex)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (uint256 reward, uint256 wrappedTokenReward) = IndexedClaimRewardLib\\n            .getIndexedPrize(\\n                predictions[_staker],\\n                _stakeIndex,\\n                lps,\\n                prizeRewardRates\\n            );\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n    /**  \\n     * @notice hasUnStaked return true if the user staked in the pool and then \\n            has unStaked it (claimed)\\n    */\\n    function hasUnStaked(address staker, uint256 stakeIndex)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        StakeWithPrediction[] memory userStakes = predictions[staker];\\n\\n        require(\\n            userStakes.length > 0,\\n            \\\"0380 this address didn't stake in this pool\\\"\\n        );\\n\\n        require(stakeIndex < userStakes.length, \\\"0381 this index exceeds\\\");\\n\\n        if (userStakes[stakeIndex].didUnstake) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function withdrawStuckTokens(\\n        address _stuckToken,\\n        uint256 amount,\\n        address receiver\\n    ) external onlyPoolCreator {\\n        require(\\n            _stuckToken != address(totemToken),\\n            \\\"0370 totems can not be transfered\\\"\\n        );\\n        IERC20 stuckToken = IERC20(_stuckToken);\\n        stuckToken.transfer(receiver, amount);\\n    }\\n\\n    function declareEmergency() external onlyPoolCreator {\\n        isActive = false;\\n        isAnEmergency = true;\\n\\n        _lockPool();\\n    }\\n\\n    function emergentWithdraw() external {\\n        require(isAnEmergency, \\\"it's not an emergency\\\");\\n\\n        uint256 stakedBalance = CalculateRewardLib.getTotalStakedBalance(\\n            predictions[_msgSender()]\\n        );\\n        if (stakedBalance > 0) {\\n            ClaimRewardLib.withdrawStakedBalance(predictions[_msgSender()]);\\n\\n            totemToken.transfer(_msgSender(), stakedBalance);\\n\\n            emit Unstake(_msgSender(), stakedBalance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ff457850809433f0089bf20ba3209e7420c41ca20db2ec29302e6b8d36cc6f8\",\"license\":\"UNLICENSED\"},\"contracts/Staking/StakingPoolStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../Distribution/USDRetriever.sol\\\";\\nimport \\\"../Distribution/WrappedTokenDistributorUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../libraries/CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/IndexedClaimRewardLib.sol\\\";\\nimport \\\"../libraries/ClaimRewardLib.sol\\\";\\nimport \\\"../libraries/PriceConsumer.sol\\\";\\n\\nimport \\\"../interfaces/ITotemToken.sol\\\";\\nimport \\\"../interfaces/IRewardManager.sol\\\";\\n\\ncontract StakingPoolStorageStructure is\\n    OwnableUpgradeable,\\n    USDRetriever,\\n    WrappedTokenDistributorUpgradeable\\n{\\n    /**\\n     * @notice Declared for passing the needed params to libraries.\\n     */\\n    struct LibParams {\\n        uint256 launchDate;\\n        uint256 lockTime;\\n        uint256 maturityTime;\\n        uint256 maturingPrice;\\n        uint256 usdPrizeAmount;\\n        uint256 prizeAmount;\\n        uint256 stakeApr;\\n        uint256 collaborativeReward;\\n        uint256 oracleDecimals;\\n        bool isEnhancedEnabled;\\n        bool isMatured;\\n    }\\n\\n    struct StakeWithPrediction {\\n        uint256 stakedBalance;\\n        uint256 stakedTime;\\n        uint256 amountWithdrawn;\\n        uint256 lastWithdrawalTime;\\n        uint256 pricePrediction;\\n        uint256 difference;\\n        uint256 rank;\\n        bool prizeRewardWithdrawn;\\n        bool didUnstake;\\n    }\\n\\n    struct Staker {\\n        address stakerAddress;\\n        uint256 index;\\n    }\\n\\n    struct PrizeRewardRate {\\n        uint256 rank;\\n        uint256 percentage;\\n    }\\n\\n    uint256 public constant sizeLimitRangeRate = 5;\\n\\n    uint256 public launchDate;\\n    uint256 public lockTime;\\n    uint256 public maturityTime;\\n    uint256 public sizeAllocation;\\n    uint256 public stakeApr;\\n    uint256 public prizeAmount;\\n    /**\\n     * @notice usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0 \\n            then the pool is only TOTM rewarder.\\n     */\\n    uint256 public usdPrizeAmount;\\n    uint256 public stakeTaxRate;\\n    uint256 public minimumStakeAmount;\\n    uint256 public totalStaked;\\n    uint256 public maturingPrice;\\n    uint256 public potentialCollabReward;\\n    uint256 public collaborativeRange;\\n    /**\\n     * @notice Based on the white paper, the collaborative reward can be 20% (2000),\\n             25% (2500) or 35% (3500).\\n     */\\n    uint256 public collaborativeReward;\\n    uint256 public oracleDecimals;\\n    uint256 public averagePricePrediction;\\n\\n    address public stakingPoolImplementation;\\n    address public poolCreator;\\n    address public oracleContract;\\n\\n    bool public isAnEmergency;\\n    bool public isEnhancedEnabled;\\n    bool public isActive;\\n    bool public isLocked;\\n    bool public isMatured;\\n    bool public isDeleted;\\n    /**\\n     * @dev StakingPoolImplementation can't be upgraded unless superAdmin sets this flag.\\n     */\\n    bool public upgradeEnabled;\\n\\n    string public wrappedTokenSymbol;\\n    string public poolType;\\n\\n    LibParams public lps;\\n\\n    PrizeRewardRate[] public prizeRewardRates;\\n    Staker[] public stakers;\\n    Staker[] public sortedStakers;\\n\\n    mapping(address => StakeWithPrediction[]) public predictions;\\n\\n    ITotemToken public totemToken;\\n    IRewardManager public rewardManager;\\n    IERC20 public wrappedToken;\\n}\\n\",\"keccak256\":\"0xb212dbd7f62a57901d25830fa1c670cf07a27c7fbb83aaf9201517210a873cba\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40ff7201ca90e848ee6f006c4d114891619f28c21e713d74dc62b1ffc48d0461\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n\\n    function setOperator(address _newOperator) external;\\n\\n    function addPool(address _poolAddress) external;\\n\\n    function rewardUser(address _user, uint256 _amount) external;\\n\\n    event SetOperator(address operator);\\n    event SetRewarder(address rewarder);\\n\\n}\",\"keccak256\":\"0xab39a767c897abdfa93b0a33593cd3c179fd5222f2a37de798d298ccf66e5adb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITotemToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ITotemToken {\\n    \\n    function setLocker(address _locker) external;\\n\\n    function setDistributionTeamsAddresses(\\n        address _CommunityDevelopmentAddr,\\n        address _StakingRewardsAddr,\\n        address _LiquidityPoolAddr,\\n        address _PublicSaleAddr,\\n        address _AdvisorsAddr,\\n        address _SeedInvestmentAddr,\\n        address _PrivateSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StrategicRoundAddr\\n    ) external;\\n\\n    function distributeTokens() external;\\n\\n    function setTaxRate(uint256 newTaxRate) external;\\n\\n    function setTaxExemptStatus(address account, bool status) external;\\n\\n    function setTaxationWallet(address newTaxationWallet) external;\\n\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function taxRate() external returns (uint256);\\n\\n    function taxationWallet() external returns (address);\\n\\n    function taxExempt(address _msgSender) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1ba963229ac039a0550990884eb976a06fb2fe7691848ff27af1c14574346531\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary BasisPoints {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return amt.mul(bp).div(BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return amt.mul(BASIS_POINTS).div(bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.add(mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt.sub(mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0xcbe25ead953d92501d8fc100fbc9d1c5d3885b6360b3619309063fdd3b874a31\",\"license\":\"UNLICENSED\"},\"contracts/libraries/CalculateRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary CalculateRewardLib {\\n\\n    using BasisPoints for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function getTotalStakedBalance(StakingPoolStorageStructure.StakeWithPrediction[] storage _staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 totalStakedBalance = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].didUnstake) {\\n                totalStakedBalance = totalStakedBalance.add(\\n                    _staker[i].stakedBalance\\n                );\\n            }\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    /**\\n     * @notice the reward formula is:\\n          ((1 + stakeAPR +enhancedReward)^((MaturingDate - StakingDate)/365) - 1) * StakingBalance\\n    */\\n    function _getStakingRewardPerStake(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maturityDate = \\n            _lps.launchDate + \\n            _lps.lockTime + \\n            _lps.maturityTime;\\n\\n        uint256 timeTo =\\n            block.timestamp > maturityDate ? maturityDate : block.timestamp;\\n\\n        uint256 enhancedApr;\\n        if ( _lps.isEnhancedEnabled ) {\\n            enhancedApr = _getEnhancedRewardRate(\\n                _staker[_stakeIndex].stakedTime,\\n                _lps\\n            );\\n        }\\n\\n        uint256 rewardPerStake = _calcStakingReturn(\\n            _lps.stakeApr.add(enhancedApr),\\n            timeTo.sub(_staker[_stakeIndex].stakedTime),\\n            _staker[_stakeIndex].stakedBalance\\n        );\\n\\n        rewardPerStake = rewardPerStake.sub(_staker[_stakeIndex].amountWithdrawn);\\n\\n        return rewardPerStake;\\n    }\\n\\n    function _getEnhancedRewardRate(\\n        uint256 stakedTime,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n\\n        if (!_lps.isEnhancedEnabled) {\\n            return 0;\\n        }\\n\\n        uint256 lockDate = _lps.launchDate.add(_lps.lockTime);\\n        uint256 difference = lockDate.sub(stakedTime);\\n\\n        if (difference < 48 hours) {\\n            return 0;\\n        } else if (difference < 72 hours) {\\n            return 100;\\n        } else if (difference < 96 hours) {\\n            return 200;\\n        } else if (difference < 120 hours) {\\n            return 300;\\n        } else if (difference < 144 hours) {\\n            return 400;\\n        } else {\\n            return 500;\\n        }\\n    }\\n\\n    function _calcStakingReturn(uint256 totalRewardRate, uint256 timeDuration, uint256 totalStakedBalance) \\n        internal \\n        pure\\n        returns (uint256) \\n    {\\n        uint256 yearInSeconds = 365 days;\\n\\n        uint256 first = (yearInSeconds**2)\\n            .mul(10**8);\\n\\n        uint256 second = timeDuration\\n            .mul(totalRewardRate) \\n            .mul(yearInSeconds)\\n            .mul(5000);\\n        \\n        uint256 third = totalRewardRate\\n            .mul(yearInSeconds**2)\\n            .mul(5000);\\n\\n        uint256 forth = (timeDuration**2)\\n            .mul(totalRewardRate**2)\\n            .div(6);\\n\\n        uint256 fifth = timeDuration\\n            .mul(totalRewardRate**2)\\n            .mul(yearInSeconds)\\n            .div(2);\\n\\n        uint256 sixth = (totalRewardRate**2)\\n            .mul(yearInSeconds**2)\\n            .div(3);\\n \\n        uint256 rewardPerStake = first.add(second).add(forth).add(sixth);\\n\\n        rewardPerStake = rewardPerStake.sub(third).sub(fifth);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalRewardRate)\\n            .mul(timeDuration);\\n\\n        rewardPerStake = rewardPerStake\\n            .mul(totalStakedBalance)\\n            .div(yearInSeconds**3)\\n            .div(10**12);\\n\\n        return rewardPerStake; \\n    }\\n\\n    function _getPercentageReward(\\n        uint256 _rank, \\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _prizeRewardRates.length; i++) {\\n            if (_rank <= _prizeRewardRates[i].rank) {\\n                return _prizeRewardRates[i].percentage;\\n            }\\n        }\\n\\n        return 0;\\n    }        \\n\\n\\n\\n}\",\"keccak256\":\"0xc712e3d29c87edcd36233abc68310220ad0914694200663dded7328044638e8b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary ClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function withdrawStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker, \\n                i, \\n                _lps);\\n\\n            _staker[i].lastWithdrawalTime = block.timestamp;\\n            _staker[i].amountWithdrawn = _staker[i].amountWithdrawn.add(\\n                rewardPerStake\\n            );\\n        }\\n    }\\n\\n    function withdrawPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].prizeRewardWithdrawn = true;\\n        }\\n    }\\n\\n    function withdrawStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker\\n    )\\n        public \\n    {\\n        \\n        if (_staker.length == 0) return;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            _staker[i].didUnstake = true;\\n        }\\n    }\\n\\n    function getStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker,\\n        StakingPoolStorageStructure.LibParams storage _lps  \\n    ) \\n        public \\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n\\n        uint256 reward = 0;\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n                _staker,\\n                i, \\n                _lps\\n            );\\n\\n            reward = reward.add(rewardPerStake);\\n        }\\n\\n        return reward;\\n    }\\n\\n    function getPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**_lps.oracleDecimals)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        for (uint256 i = 0; i < _staker.length; i++) {\\n            if (!_staker[i].prizeRewardWithdrawn) {\\n\\n                uint256 _percent = CalculateRewardLib._getPercentageReward(\\n                    _staker[i].rank,\\n                    _prizeRewardRates\\n                );\\n\\n                reward = reward.add(\\n                            _lps.prizeAmount.mulBP(_percent)\\n                        );\\n\\n                wrappedTokenReward = wrappedTokenReward.add(\\n                            maturingWrappedTokenPrizeAmount\\n                                .mulBP(_percent)\\n                        );        \\n            }\\n        }\\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xec7d4e480f58753b28aa26b3a2e588c256303039bbeeac3e241ee803af5121a4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/IndexedClaimRewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CalculateRewardLib.sol\\\";\\nimport \\\"../libraries/BasisPoints.sol\\\";\\nimport \\\"../Staking/StakingPoolStorageStructure.sol\\\";\\n\\nlibrary IndexedClaimRewardLib {\\n\\n    using CalculateRewardLib for *;\\n    using BasisPoints for uint256; \\n    using SafeMath for uint256;\\n\\n    uint256 public constant foo = 0;\\n\\n    function withdrawIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n\\n        _staker[_stakeIndex].lastWithdrawalTime = block.timestamp;\\n        _staker[_stakeIndex].amountWithdrawn = _staker[_stakeIndex].amountWithdrawn.add(\\n            rewardPerStake\\n        );\\n    }\\n\\n    function withdrawIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public \\n    {\\n        if (_staker.length == 0) return;\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return;\\n\\n        _staker[_stakeIndex].prizeRewardWithdrawn = true;\\n    }\\n\\n    function withdrawIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    ) \\n        public\\n    {\\n        if (_staker.length == 0) return;\\n        if (_stakeIndex >= _staker.length) return;\\n\\n        _staker[_stakeIndex].didUnstake = true;\\n    }\\n\\n    function getIndexedStakedBalance(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0; \\n\\n        uint256 totalStakedBalance = 0;\\n\\n        if (!_staker[_stakeIndex].didUnstake) {\\n            totalStakedBalance = totalStakedBalance.add(\\n                _staker[_stakeIndex].stakedBalance\\n            );\\n        }\\n\\n        return totalStakedBalance;\\n    }\\n\\n    function getIndexedStakingReturn(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps\\n    ) \\n        public\\n        view \\n        returns (uint256) \\n    {\\n        if (_staker.length == 0) return 0;\\n        if (_stakeIndex >= _staker.length) return 0;\\n\\n        uint256 reward = 0;\\n        \\n        uint256 rewardPerStake = CalculateRewardLib._getStakingRewardPerStake(\\n            _staker, \\n            _stakeIndex,\\n            _lps\\n        );\\n        reward = reward.add(rewardPerStake);\\n\\n        return reward;\\n    }\\n\\n    function getIndexedPrize(\\n        StakingPoolStorageStructure.StakeWithPrediction[] storage _staker, \\n        uint256 _stakeIndex,\\n        StakingPoolStorageStructure.LibParams storage _lps,\\n        StakingPoolStorageStructure.PrizeRewardRate[] storage _prizeRewardRates\\n    )\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        if (!_lps.isMatured) return (0, 0);\\n\\n        if (_staker.length == 0) return (0, 0);\\n\\n        if (_stakeIndex >= _staker.length) return (0,0);\\n\\n        if (_staker[_stakeIndex].prizeRewardWithdrawn) return (0, 0);\\n\\n        uint256 maturingWrappedTokenPrizeAmount =\\n            (_lps.usdPrizeAmount.mul(10**_lps.oracleDecimals)).div(_lps.maturingPrice);\\n\\n        uint256 reward = 0;\\n        uint256 wrappedTokenReward = 0;\\n\\n        uint256 _percent = CalculateRewardLib._getPercentageReward(\\n            _staker[_stakeIndex].rank,\\n            _prizeRewardRates\\n        );\\n\\n        reward = reward.add(\\n                        _lps.prizeAmount.mulBP(_percent)\\n                    );\\n\\n        wrappedTokenReward = wrappedTokenReward.add(\\n                        maturingWrappedTokenPrizeAmount\\n                            .mulBP(_percent)\\n                    );            \\n\\n        if (_lps.collaborativeReward > 0) {\\n            reward = reward.addBP(_lps.collaborativeReward);\\n            wrappedTokenReward = wrappedTokenReward.addBP(_lps.collaborativeReward);\\n        }\\n\\n        return (reward, wrappedTokenReward);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xbc6ba78bfd18f5ed2e8b635f25eb3934e224a6ccea017141f9354ba2112e6db8\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConsumer {\\n    /**\\n     * @param oracle The chainlink node oracle address to send requests\\n     * @notice Returns decimals for oracle contract\\n     */\\n    function getDecimals(address oracle) internal view returns (uint8) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(oracle);\\n        uint8 decimals = priceFeed.decimals();\\n        return decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the latest price from oracle contract\\n     */\\n    function getLatestPrice(address oracle) internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(oracle);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price >= 0 ? uint256(price) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0x41fcb8614f7d7edd7717758ae0c24ea928d12bd950efe7e1fdf43e75950b4d60\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506152c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106104285760003560e01c80638da5cb5b1161022b578063d025188b11610130578063e8153c93116100b8578063f3d9dc0d11610087578063f3d9dc0d146107d9578063f5e96fc9146107e1578063f8e829c3146107e9578063f8eeed62146107f1578063fd5e6dd1146107f957610428565b8063e8153c93146107a3578063eb850ae1146107ab578063f1b17a8b146107b3578063f2fde38b146107c657610428565b8063df7f92e0116100ff578063df7f92e014610759578063e081866914610761578063e113af5114610780578063e425df8c14610793578063e68b52e71461079b57610428565b8063d025188b14610715578063d49fab8a1461071d578063d7efb6b714610730578063de09ee201461073857610428565b8063aa7bcb57116101b3578063b88a802f11610182578063b88a802f146106e2578063bece7532146106ea578063c1201054146106f2578063c6c1decd146106fa578063cee0c8891461070257610428565b8063aa7bcb57146106ac578063b1b1e1c0146106b4578063b1dd61b6146106c7578063b7b30170146106cf57610428565b8063a08b2c79116101fa578063a08b2c7914610661578063a118c9a714610669578063a35ef3a71461067c578063a4e2d63414610691578063a8f7b3461461069957610428565b80638da5cb5b1461064157806395c2ba4714610649578063996c6cc3146106515780639e3dd80f1461065957610428565b80634e8bfdaa11610331578063785fa627116102b9578063817b1cd211610288578063817b1cd2146105f9578063850fa7cb146106015780638a9920b7146106295780638bfbbcbe146106315780638cf0e21e1461063957610428565b8063785fa627146105c357806378f4d413146105cb5780637b0472f0146105de5780637f2b6a0d146105f157610428565b80636b036f45116103005780636b036f451461059b578063715018a6146105a3578063725c9c49146105ab57806373f31703146105b3578063785df1f8146105bb57610428565b80634e8bfdaa1461057057806351eacbf0146105785780635d2631e2146105805780636847d0c51461059357610428565b8063395b3dac116103b4578063444a490211610383578063444a49021461051c57806345e913191461052f5780634bc4eeb2146105425780634c7c77fc1461054a5780634ddc1bdc1461055d57610428565b8063395b3dac146104d85780633fcdd82c146104eb5780634026478e146104fe57806343352d611461050657610428565b8063238a6c74116103fb578063238a6c74146104885780632aa8195e1461049d5780632d42cf7d146104a55780632d5cd1d6146104af57806331e244e5146104d057610428565b80630d6680871461042d5780630f4ef8a61461044b57806322f3e2d4146104605780632342e48014610475575b600080fd5b61043561080c565b604051610442919061487e565b60405180910390f35b610453610812565b60405161044291906147c4565b610468610821565b6040516104429190614903565b610435610483366004614426565b610831565b6104906108df565b604051610442919061490e565b61045361096d565b6104ad61097c565b005b6104c26104bd3660046143a4565b610ae0565b604051610442929190614887565b6104ad610b94565b6104c26104e6366004614699565b610bed565b6104356104f9366004614618565b610c4e565b6104ad610d12565b61050e610d54565b604051610442929190614828565b6104ad61052a366004614487565b610f11565b61046861053d366004614426565b611203565b610468611355565b610435610558366004614699565b611365565b6104ad61056b366004614699565b6113e9565b6104356114d5565b6104356114db565b6104ad61058e366004614451565b6114e1565b6104356115cb565b6104356115d1565b6104ad6115d7565b610453611620565b61043561162f565b610435611635565b61043561163b565b6104356105d93660046143a4565b611641565b6104ad6105ec366004614699565b6116ea565b610468611b6a565b610435611b7a565b61061461060f366004614426565b611b80565b604051610442999897969594939291906150e2565b6104ad611bee565b6104ad611e3d565b610468611eb5565b610453611ec5565b610435611ed4565b610453611ed9565b6104c2611ee8565b610468611ef2565b6104ad6106773660046145e0565b611f02565b610684611fee565b6040516104429190614815565b61046861209d565b6104ad6106a73660046143dc565b6120ad565b610435612162565b6104ad6106c2366004614618565b612168565b610490612a26565b6104c26106dd366004614426565b612a33565b6104ad612aea565b610453613312565b610435613321565b6104536133a7565b6104356107103660046143a4565b6133b6565b6104356133ca565b6104ad61072b3660046144bd565b6133d0565b610468613a5e565b61074b610746366004614618565b613a6e565b6040516104429291906147fc565b6104ad613aa6565b610769613af2565b6040516104429b9a99989796959493929190615125565b6104ad61078e366004614648565b613b1f565b610435613cad565b610435613cb3565b610453613cb9565b610435613cc8565b6104c26107c1366004614618565b613cce565b6104ad6107d43660046143a4565b613cfc565b610435613d6a565b610453613d70565b610435613d7f565b610435613db0565b61074b610807366004614618565b613db6565b606a5481565b608d546001600160a01b031681565b607b54600160b01b900460ff1681565b6001600160a01b0382166000908152608b60205260408082209051634f16042360e01b8152829173c38B95e659e3F3edb4a97032fB3855711549C6d891634f16042391610885918790607e90600401614895565b60206040518083038186803b15801561089d57600080fd5b505af41580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190614630565b9150505b92915050565b607c80546108ec906151e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610918906151e5565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b505050505081565b6079546001600160a01b031681565b607a546001600160a01b0316610990613dc6565b6001600160a01b0316146109bf5760405162461bcd60e51b81526004016109b690614df8565b60405180910390fd5b606b54606a546069546109d29190615177565b6109dc9190615177565b4210156109fb5760405162461bcd60e51b81526004016109b690614ae2565b606f5415610a2757610a0b613d7f565b610a275760405162461bcd60e51b81526004016109b690614fa4565b60895415610a4e57608a54610a4e5760405162461bcd60e51b81526004016109b690614b2e565b60745415610a7457610a64607854607554611365565b610a745760745460768190556085555b607b805460ff60c01b1960ff60b81b19909116600160b81b1716600160c01b90811791829055608780549190920460ff1615156101000261ff00199091161790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a1565b6001600160a01b0381166000908152608b602052604080822090516332a1b32160e01b815282918291829173FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d916332a1b32191610b3991607e90608890600401614895565b604080518083038186803b158015610b5057600080fd5b505af4158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8891906146ba565b90945092505050915091565b607a546001600160a01b0316610ba8613dc6565b6001600160a01b031614610bce5760405162461bcd60e51b81526004016109b690614df8565b607b805462ff00ff60a01b1916600160a01b179055610beb613dca565b565b60008060008360705411610c02576000610c0f565b607054610c0f9085613e08565b905080610c23576000859250925050610c47565b610c2d8582613e14565b610c41610c3a8784613e14565b8790613e08565b92509250505b9250929050565b60665460009081906001600160a01b031663d06ca61f84610c6d611fee565b6040518363ffffffff1660e01b8152600401610c8a92919061508d565b60006040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cde9190810190614526565b905080600181518110610d0157634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b919050565b607a546001600160a01b0316610d26613dc6565b6001600160a01b031614610d4c5760405162461bcd60e51b81526004016109b690614df8565b610beb613dca565b606080600060898054905067ffffffffffffffff811115610d8557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dae578160200160208202803683370190505b5060895490915060009067ffffffffffffffff811115610dde57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e07578160200160208202803683370190505b50905060005b608954811015610f075760898181548110610e3857634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015483516001600160a01b0390911690849083908110610e7757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060898181548110610eb857634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154828281518110610eea57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610eff81615220565b915050610e0d565b5090925090509091565b607a546001600160a01b0316610f25613dc6565b6001600160a01b031614610f4b5760405162461bcd60e51b81526004016109b690614df8565b606b54606a54606954610f5e9190615177565b610f689190615177565b421015610f875760405162461bcd60e51b81526004016109b690614d54565b608a5415610f9b57610f9b608a60006142f0565b60005b6019811015611174576000838260198110610fc957634e487b7160e01b600052603260045260246000fd5b602002016020810190610fdc91906143a4565b6001600160a01b03161415610ff057611174565b608a604051806040016040528085846019811061101d57634e487b7160e01b600052603260045260246000fd5b60200201602081019061103091906143a4565b6001600160a01b0316815260200184846019811061105e57634e487b7160e01b600052603260045260246000fd5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151908201556110b4908290615177565b608b60008584601981106110d857634e487b7160e01b600052603260045260246000fd5b6020020160208101906110eb91906143a4565b6001600160a01b03166001600160a01b0316815260200190815260200160002083836019811061112b57634e487b7160e01b600052603260045260246000fd5b60200201358154811061114e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600660089092020101558061116c81615220565b915050610f9e565b60888054829190611187906001906151ce565b815481106111a557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015410156111d55760405162461bcd60e51b81526004016109b690614f3a565b6040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a1505050565b6001600160a01b0382166000908152608b6020908152604080832080548251818502810185019093528083528493849084015b828210156112c857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611236565b50505050905060008151116112ef5760405162461bcd60e51b81526004016109b690614e6e565b8051831061130f5760405162461bcd60e51b81526004016109b690614961565b80838151811061132f57634e487b7160e01b600052603260045260246000fd5b602002602001015161010001511561134b5760019150506108d9565b5060009392505050565b607b54600160a81b900460ff1681565b600082821115611377575060006108d9565b6073548311156113b95760735461138e8484613e08565b1161139b575060006108d9565b6073546113b2906113ac8585613e08565b90613e08565b90506108d9565b6073546113c68484613e2c565b106113d3575060006108d9565b6113b26113e08484613e2c565b60735490613e08565b607a546001600160a01b03166113fd613dc6565b6001600160a01b0316146114235760405162461bcd60e51b81526004016109b690614df8565b6000606f54116114455760405162461bcd60e51b81526004016109b690614a59565b600082116114655760405162461bcd60e51b81526004016109b690614cee565b428110156114855760405162461bcd60e51b81526004016109b690614b5e565b600061148f611620565b905061149b8184613e38565b60006114a684610c4e565b905060006114c06114b98361012c613e14565b8390613e08565b90506114ce30868387613f02565b5050505050565b606b5481565b606c5481565b607a546001600160a01b03166114f5613dc6565b6001600160a01b03161461151b5760405162461bcd60e51b81526004016109b690614df8565b608c546001600160a01b03848116911614156115495760405162461bcd60e51b81526004016109b690614cad565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb9061157990859087906004016147fc565b602060405180830381600087803b15801561159357600080fd5b505af11580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce91906145fc565b60705481565b60715481565b6115df613dc6565b6001600160a01b03166115f0611ec5565b6001600160a01b0316146116165760405162461bcd60e51b81526004016109b690614e39565b610beb6000613fa8565b6066546001600160a01b031690565b606f5481565b60785481565b606e5481565b6001600160a01b0381166000908152608b60205260408082209051630d46757760e41b8152829173FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d9163d46757709161169391607e90600401614887565b60206040518083038186803b1580156116ab57600080fd5b505af41580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e39190614630565b9392505050565b607b54600160b01b900460ff168015611704575060695442115b6117205760405162461bcd60e51b81526004016109b690614eb9565b606a546069546117309190615177565b421061174e5760405162461bcd60e51b81526004016109b6906149c5565b607b54600160b81b900460ff16156117785760405162461bcd60e51b81526004016109b690614998565b60715482101561179a5760405162461bcd60e51b81526004016109b690614ef0565b607154608c546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b1580156117e357600080fd5b505af11580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190614630565b608c549091506000906001600160a01b031663d1ecfc6861183a613dc6565b6040518263ffffffff1660e01b815260040161185691906147c4565b602060405180830381600087803b15801561187057600080fd5b505af1158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a891906145fc565b6118bb576118b68583613e14565b6118be565b60005b606c549091506118ce9084613e2c565b6118e7826113ac88607254613e2c90919063ffffffff16565b11156119055760405162461bcd60e51b81526004016109b690614c67565b60006119118684610bed565b608c549097509091506001600160a01b03166323b872dd611930613dc6565b3061193b858b615177565b6040518463ffffffff1660e01b8152600401611959939291906147d8565b602060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab91906145fc565b506119b68683613e08565b95508015611ab757608c5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4591906143c0565b836040518363ffffffff1660e01b8152600401611a639291906147fc565b602060405180830381600087803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab591906145fc565b505b6000608b6000611ac5613dc6565b6001600160a01b031681526020810191909152604001600020549050611af3611aec613dc6565b8888613ffa565b607254611b009088613e2c565b6072819055606c5411611b1557611b15613dca565b611b1d613dc6565b6001600160a01b03167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446888884604051611b5993929190614895565b60405180910390a250505050505050565b607b54600160c01b900460ff1681565b60725481565b608b6020528160005260406000208181548110611b9c57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b607b54600160a01b900460ff16611c175760405162461bcd60e51b81526004016109b690614d25565b6000737faB30Aad42a9B397A2fE39FEfacb011a821D6b363066f1dee608b6000611c3f613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611c7b919061487e565b60206040518083038186803b158015611c9357600080fd5b505af4158015611ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccb9190614630565b90508015611e3a5773FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d63f66d9a4d608b6000611cf9613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611d35919061487e565b60006040518083038186803b158015611d4d57600080fd5b505af4158015611d61573d6000803e3d6000fd5b5050608c546001600160a01b0316915063a9059cbb9050611d80613dc6565b836040518363ffffffff1660e01b8152600401611d9e9291906147fc565b602060405180830381600087803b158015611db857600080fd5b505af1158015611dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df091906145fc565b50611df9613dc6565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051611e31919061487e565b60405180910390a25b50565b607a546001600160a01b0316611e51613dc6565b6001600160a01b031614611e775760405162461bcd60e51b81526004016109b690614df8565b607b805460ff60c81b1916600160c81b1790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b607b54600160d01b900460ff1681565b6033546001600160a01b031690565b600581565b608e546001600160a01b031681565b6081546086549091565b607b54600160a01b900460ff1681565b607a546001600160a01b0316611f16613dc6565b6001600160a01b031614611f3c5760405162461bcd60e51b81526004016109b690614df8565b607b5460ff600160b01b9091041615158115151415611f6d5760405162461bcd60e51b81526004016109b690614be1565b607b805460ff60b01b1916600160b01b8315158102919091179182905560ff91041615611fc2576040517f3d31b97eef590df350bb2cdbc390034c613c9f23ea6ae1906682628c85248b5390600090a1611e3a565b6040517f763d36bfedf6707954f8bb39c2011a58a47a54844f2b3cdcd326c71cad0aa75390600090a150565b60408051600280825260608083018452926000929190602083019080368337505060675482519293506001600160a01b03169183915060009061204157634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260685482519116908290600190811061208057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152905090565b607b54600160b81b900460ff1681565b600054610100900460ff16806120c6575060005460ff16155b6120e25760405162461bcd60e51b81526004016109b690614daa565b600054610100900460ff1615801561210d576000805460ff1961ff0019909116610100171660011790555b606680546001600160a01b038087166001600160a01b031992831617909255606780548684169083161790556068805492851692909116919091179055801561215c576000805461ff00191690555b50505050565b606d5481565b80608b6000612175613dc6565b6001600160a01b0316815260208101919091526040016000205410156121ad5760405162461bcd60e51b81526004016109b690614feb565b608b60006121b9613dc6565b6001600160a01b031681526020810191909152604001600020546121ef5760405162461bcd60e51b81526004016109b690614b8c565b600073c38B95e659e3F3edb4a97032fB3855711549C6d8634f160423608b6000612217613dc6565b6001600160a01b03166001600160a01b0316815260200190815260200160002084607e6040518463ffffffff1660e01b815260040161225893929190614895565b60206040518083038186803b15801561227057600080fd5b505af4158015612284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a89190614630565b905060008073c38B95e659e3F3edb4a97032fB3855711549C6d863f7ac9cba608b60006122d3613dc6565b6001600160a01b03166001600160a01b0316815260200190815260200160002086607e60886040518563ffffffff1660e01b815260040161231794939291906148ab565b604080518083038186803b15801561232e57600080fd5b505af4158015612342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236691906146ba565b909250905060006123778484615177565b607b54909150600160c01b900460ff16156127e257606f541561251e57811561251e5773c38B95e659e3F3edb4a97032fB3855711549C6d86393aaeaf9608b60006123c0613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b81526004016123fe929190614887565b60006040518083038186803b15801561241657600080fd5b505af415801561242a573d6000803e3d6000fd5b5050608e546001600160a01b0316915063a9059cbb9050612449613dc6565b846040518363ffffffff1660e01b81526004016124679291906147fc565b602060405180830381600087803b15801561248157600080fd5b505af1158015612495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b991906145fc565b6124d55760405162461bcd60e51b81526004016109b69061506f565b6124dd613dc6565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612515919061487e565b60405180910390a25b82156125b95773c38B95e659e3F3edb4a97032fB3855711549C6d86393aaeaf9608b600061254a613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b8152600401612588929190614887565b60006040518083038186803b1580156125a057600080fd5b505af41580156125b4573d6000803e3d6000fd5b505050505b600073c38B95e659e3F3edb4a97032fB3855711549C6d8635eac7af3608b60006125e1613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b815260040161261f929190614887565b60206040518083038186803b15801561263757600080fd5b505af415801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f9190614630565b905080156127e05773c38B95e659e3F3edb4a97032fB3855711549C6d863ec8ecc02608b600061269d613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016126db929190614887565b60006040518083038186803b1580156126f357600080fd5b505af4158015612707573d6000803e3d6000fd5b5050608c546001600160a01b0316915063a9059cbb9050612726613dc6565b836040518363ffffffff1660e01b81526004016127449291906147fc565b602060405180830381600087803b15801561275e57600080fd5b505af1158015612772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279691906145fc565b5061279f613dc6565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516127d7919061487e565b60405180910390a25b505b80156114ce57608c54608d546040516370a0823160e01b815283926001600160a01b03908116926370a082319261281f92909116906004016147c4565b60206040518083038186803b15801561283757600080fd5b505afa15801561284b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286f9190614630565b101561288d5760405162461bcd60e51b81526004016109b690614c23565b73c38B95e659e3F3edb4a97032fB3855711549C6d863eaff3050608b60006128b3613dc6565b6001600160a01b03166001600160a01b0316815260200190815260200160002087607e6040518463ffffffff1660e01b81526004016128f493929190614895565b60006040518083038186803b15801561290c57600080fd5b505af4158015612920573d6000803e3d6000fd5b5050608d546001600160a01b0316915063e4e103dc905061293f613dc6565b836040518363ffffffff1660e01b815260040161295d9291906147fc565b600060405180830381600087803b15801561297757600080fd5b505af115801561298b573d6000803e3d6000fd5b50505050612997613dc6565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac583886856040516129cf919061487e565b60405180910390a26129df613dc6565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051612a17919061487e565b60405180910390a25050505050565b607d80546108ec906151e5565b6001600160a01b0382166000908152608b60205260408082209051637bd64e5d60e11b815282918291829173c38B95e659e3F3edb4a97032fB3855711549C6d89163f7ac9cba91612a8e918990607e906088906004016148ab565b604080518083038186803b158015612aa557600080fd5b505af4158015612ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612add91906146ba565b9097909650945050505050565b600073FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d63d4675770608b6000612b12613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020607e6040518363ffffffff1660e01b8152600401612b51929190614887565b60206040518083038186803b158015612b6957600080fd5b505af4158015612b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba19190614630565b905060008073FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d6332a1b321608b6000612bcc613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020607e60886040518463ffffffff1660e01b8152600401612c0e93929190614895565b604080518083038186803b158015612c2557600080fd5b505af4158015612c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5d91906146ba565b90925090506000612c6e8484615177565b607b54909150600160c01b900460ff16156130d157606f5415612e13578115612e135773FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d6347dc9eee608b6000612cb7613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612cf3919061487e565b60006040518083038186803b158015612d0b57600080fd5b505af4158015612d1f573d6000803e3d6000fd5b5050608e546001600160a01b0316915063a9059cbb9050612d3e613dc6565b846040518363ffffffff1660e01b8152600401612d5c9291906147fc565b602060405180830381600087803b158015612d7657600080fd5b505af1158015612d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dae91906145fc565b612dca5760405162461bcd60e51b81526004016109b690614bc3565b612dd2613dc6565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612e0a919061487e565b60405180910390a25b8215612eac5773FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d6347dc9eee608b6000612e3f613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612e7b919061487e565b60006040518083038186803b158015612e9357600080fd5b505af4158015612ea7573d6000803e3d6000fd5b505050505b6000737faB30Aad42a9B397A2fE39FEfacb011a821D6b363066f1dee608b6000612ed4613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612f10919061487e565b60206040518083038186803b158015612f2857600080fd5b505af4158015612f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f609190614630565b905080156130cf5773FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d63f66d9a4d608b6000612f8e613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612fca919061487e565b60006040518083038186803b158015612fe257600080fd5b505af4158015612ff6573d6000803e3d6000fd5b5050608c546001600160a01b0316915063a9059cbb9050613015613dc6565b836040518363ffffffff1660e01b81526004016130339291906147fc565b602060405180830381600087803b15801561304d57600080fd5b505af1158015613061573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308591906145fc565b5061308e613dc6565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516130c6919061487e565b60405180910390a25b505b801561215c57608c54608d546040516370a0823160e01b815283926001600160a01b03908116926370a082319261310e92909116906004016147c4565b60206040518083038186803b15801561312657600080fd5b505afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e9190614630565b101561317c5760405162461bcd60e51b81526004016109b690614c23565b73FCF25983800344ffEeb35f6bc8A4FAd1dFfe867d634142c652608b60006131a2613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020607e6040518363ffffffff1660e01b81526004016131e1929190614887565b60006040518083038186803b1580156131f957600080fd5b505af415801561320d573d6000803e3d6000fd5b5050608d546001600160a01b0316915063e4e103dc905061322c613dc6565b836040518363ffffffff1660e01b815260040161324a9291906147fc565b600060405180830381600087803b15801561326457600080fd5b505af1158015613278573d6000803e3d6000fd5b50505050613284613dc6565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac583886856040516132bc919061487e565b60405180910390a26132cc613dc6565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051613304919061487e565b60405180910390a250505050565b607b546001600160a01b031681565b6065546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133529030906004016147c4565b60206040518083038186803b15801561336a57600080fd5b505afa15801561337e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a29190614630565b905090565b607a546001600160a01b031681565b60006133c18261416e565b60ff1692915050565b60735481565b607b54600160b01b900460ff1680156133ea575060695442115b6134065760405162461bcd60e51b81526004016109b690614eb9565b606a546069546134169190615177565b42106134345760405162461bcd60e51b81526004016109b6906149c5565b607b54600160b81b900460ff161561345e5760405162461bcd60e51b81526004016109b690614998565b82811461347d5760405162461bcd60e51b81526004016109b690614a07565b6000805b8481101561351e576071548686838181106134ac57634e487b7160e01b600052603260045260246000fd5b9050602002013510156134d15760405162461bcd60e51b81526004016109b690614ef0565b61350a8686838181106134f457634e487b7160e01b600052603260045260246000fd5b9050602002013583613e2c90919063ffffffff16565b91508061351681615220565b915050613481565b50607154608c546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b15801561356857600080fd5b505af115801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a09190614630565b608c549091506000906001600160a01b031663d1ecfc686135bf613dc6565b6040518263ffffffff1660e01b81526004016135db91906147c4565b602060405180830381600087803b1580156135f557600080fd5b505af1158015613609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362d91906145fc565b6136405761363b8483613e14565b613643565b60005b606c549091506136539084613e2c565b61366c826113ac87607254613e2c90919063ffffffff16565b111561368a5760405162461bcd60e51b81526004016109b690614c67565b60006136968584610bed565b608c549096509091506001600160a01b03166323b872dd6136b5613dc6565b306136c0858a615177565b6040518463ffffffff1660e01b81526004016136de939291906147d8565b602060405180830381600087803b1580156136f857600080fd5b505af115801561370c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373091906145fc565b5061373b8583613e08565b9450801561383c57608c5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b15801561379257600080fd5b505af11580156137a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ca91906143c0565b836040518363ffffffff1660e01b81526004016137e89291906147fc565b602060405180830381600087803b15801561380257600080fd5b505af1158015613816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383a91906145fc565b505b6000608b600061384a613dc6565b6001600160a01b03168152602081019190915260400160009081205491505b898110156139b55760008b8b8381811061389357634e487b7160e01b600052603260045260246000fd5b608c54602090910292909201359250506001600160a01b031663d1ecfc686138b9613dc6565b6040518263ffffffff1660e01b81526004016138d591906147c4565b602060405180830381600087803b1580156138ef57600080fd5b505af1158015613903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392791906145fc565b61393a576139358187613e14565b61393d565b60005b94506139498187610bed565b90945090506139588186613e08565b9050613992613965613dc6565b828c8c8681811061398657634e487b7160e01b600052603260045260246000fd5b90506020020135613ffa565b60725461399f9082613e2c565b60725550806139ad81615220565b915050613869565b5060006001608b60006139c6613dc6565b6001600160a01b031681526020810191909152604001600020546139ea91906151ce565b9050606c54607254106139ff576139ff613dca565b613a07613dc6565b6001600160a01b03167f852fe7a2ad7b2c8c0a0e9b927734feb1acc3e8bc608b8921d4c4768c6193c33b8c8c8c8c8787604051613a49969594939291906148c6565b60405180910390a25050505050505050505050565b607b54600160c81b900460ff1681565b608a8181548110613a7e57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b607a546001600160a01b0316613aba613dc6565b6001600160a01b031614613ae05760405162461bcd60e51b81526004016109b690614df8565b607b80546001600160a01b0319169055565b607e54607f5460805460815460825460835460845460855460865460875460ff808216916101009004168b565b607a546001600160a01b0316613b33613dc6565b6001600160a01b031614613b595760405162461bcd60e51b81526004016109b690614df8565b606b54606a54606954613b6c9190615177565b613b769190615177565b421015613b955760405162461bcd60e51b81526004016109b690615019565b8315613bea57607b546001600160a01b031615613bd457607b54613bc1906001600160a01b03166141ef565b6073819055608155607754608655613be5565b607385905560818590556077546086555b6114ce565b607b546001600160a01b031615613c69576001600160a01b03821615613c4257607b54613c1f906001600160a01b03166141ef565b607355613c2b826141ef565b608155613c378261416e565b60ff16608655613be5565b607b54613c57906001600160a01b03166141ef565b607355608183905560868190556114ce565b6001600160a01b03821615613c9d576073859055613c86826141ef565b608155613c928261416e565b60ff166086556114ce565b6073949094555060815550608655565b60745481565b60775481565b608c546001600160a01b031681565b60755481565b60888181548110613cde57600080fd5b60009182526020909120600290910201805460019091015490915082565b613d04613dc6565b6001600160a01b0316613d15611ec5565b6001600160a01b031614613d3b5760405162461bcd60e51b81526004016109b690614e39565b6001600160a01b038116613d615760405162461bcd60e51b81526004016109b690614a9c565b611e3a81613fa8565b60765481565b6065546001600160a01b031690565b608e546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133529030906004016147c4565b60695481565b60898181548110613a7e57600080fd5b3390565b607b805460ff60b81b1916600160b81b1790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b60006116e382846151ce565b60006116e3612710613e26858561427e565b9061428a565b60006116e38284615177565b60655460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390613e6a90859085906004016147fc565b602060405180830381600087803b158015613e8457600080fd5b505af1158015613e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebc91906145fc565b50816001600160a01b03167fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a182604051613ef6919061487e565b60405180910390a25050565b6001600160a01b038416613f1557600080fd5b6066546001600160a01b03166338ed17398484613f30611fee565b88866040518663ffffffff1660e01b8152600401613f529594939291906150a6565b600060405180830381600087803b158015613f6c57600080fd5b505af1158015613f80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ce9190810190614526565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805180820182526001600160a01b038086168083526000908152608b602081815285832080548287019081526089805460018181018355918752975160029889027f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cb81018054929099166001600160a01b03199092169190911790975590517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cc909601959095559181528551610120810187528881524281830181815297820185815260608301918252608083018a815260001960a0850181815260c0860191825260e086018981526101008781018b81528a54808e018c559a8c5298909a20965160089099029096019788559a51988701989098559051978501979097555160038401559451600483015594516005820155915160068301559151600790910180549351151590920261ff001991151560ff199490941693909317169190911790556141698183614296565b505050565b6000808290506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156141af57600080fd5b505afa1580156141c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141e7919061472c565b949350505050565b6000808290506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561423057600080fd5b505afa158015614244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426891906146dd565b50505091505060008112156116e35760006141e7565b60006116e382846151af565b60006116e3828461518f565b6089546000906142a8906001906151ce565b9050806142b55760788390555b6072546142e8906142c69084613e2c565b613e266142d3868661427e565b6072546078546142e29161427e565b90613e2c565b607855505050565b5080546000825560020290600052602060002090810190611e3a91905b808211156143325780546001600160a01b03191681556000600182015560020161430d565b5090565b8061032081018310156108d957600080fd5b60008083601f840112614359578182fd5b50813567ffffffffffffffff811115614370578182fd5b6020830191508360208083028501011115610c4757600080fd5b805169ffffffffffffffffffff81168114610d0d57600080fd5b6000602082840312156143b5578081fd5b81356116e381615267565b6000602082840312156143d1578081fd5b81516116e381615267565b6000806000606084860312156143f0578182fd5b83356143fb81615267565b9250602084013561440b81615267565b9150604084013561441b81615267565b809150509250925092565b60008060408385031215614438578182fd5b823561444381615267565b946020939093013593505050565b600080600060608486031215614465578283fd5b833561447081615267565b925060208401359150604084013561441b81615267565b600080610640838503121561449a578182fd5b6144a48484614336565b91506144b4846103208501614336565b90509250929050565b600080600080604085870312156144d2578081fd5b843567ffffffffffffffff808211156144e9578283fd5b6144f588838901614348565b9096509450602087013591508082111561450d578283fd5b5061451a87828801614348565b95989497509550505050565b60006020808385031215614538578182fd5b825167ffffffffffffffff8082111561454f578384fd5b818501915085601f830112614562578384fd5b81518181111561457457614574615251565b8381026040518582820101818110858211171561459357614593615251565b604052828152858101935084860182860187018a10156145b1578788fd5b8795505b838610156145d35780518552600195909501949386019386016145b5565b5098975050505050505050565b6000602082840312156145f1578081fd5b81356116e38161527c565b60006020828403121561460d578081fd5b81516116e38161527c565b600060208284031215614629578081fd5b5035919050565b600060208284031215614641578081fd5b5051919050565b600080600080600060a0868803121561465f578283fd5b8535945060208601356146718161527c565b935060408601359250606086013561468881615267565b949793965091946080013592915050565b600080604083850312156146ab578182fd5b50508035926020909101359150565b600080604083850312156146cc578182fd5b505080516020909101519092909150565b600080600080600060a086880312156146f4578283fd5b6146fd8661438a565b94506020860151935060408601519250606086015191506147206080870161438a565b90509295509295909350565b60006020828403121561473d578081fd5b815160ff811681146116e3578182fd5b6000815180845260208085019450808401835b838110156147855781516001600160a01b031687529582019590820190600101614760565b509495945050505050565b81835260006001600160fb1b038311156147a8578081fd5b6020830280836020870137939093016020019283525090919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082526116e3602083018461474d565b60006040825261483b604083018561474d565b828103602084810191909152845180835285820192820190845b8181101561487157845183529383019391830191600101614855565b5090979650505050505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000608082526148da60808301888a614790565b82810360208401526148ed818789614790565b6040840195909552505060600152949350505050565b901515815260200190565b6000602080835283518082850152825b8181101561493a5785810183015185820160400152820161491e565b8181111561494b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526017908201527f30333831207468697320696e6465782065786365656473000000000000000000604082015260600190565b6020808252601390820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604082015260600190565b60208082526022908201527f303331362043616e206e6f74207374616b65206166746572206c6f636b206461604082015261746560f01b606082015260800190565b60208082526032908201527f30333135207374616b696e67416d6f756e7420616e642070726564696374696f6040820152710dce640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b60208082526023908201527f303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726040820152623232b960e91b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602c908201527f303336302043616e277420656e6420706f6f6c206265666f726520746865206d60408201526b617475726974792074696d6560a01b606082015260800190565b6020808252601690820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604082015260600190565b6020808252601490820152733033343220446561646c696e65206973206c6f7760601b604082015260600190565b6020808252601d908201527f5573657220646f6573206e6f74206861766520616e79207374616b6573000000604082015260600190565b6020808252600490820152630303332360e41b604082015260600190565b60208082526022908201527f4e6f74206368616e67696e67207468652061637469766174696f6e2073746174604082015261757360f01b606082015260800190565b60208082526024908201527f4e6f7420656e6f7567682062616c616e636520696e20726577617264206d616e60408201526330b3b2b960e11b606082015260800190565b60208082526026908201527f303331322043616e2774207374616b652061626f76652073697a6520616c6c6f60408201526531b0ba34b7b760d11b606082015260800190565b60208082526021908201527f3033373020746f74656d732063616e206e6f74206265207472616e73666572656040820152601960fa1b606082015260800190565b60208082526019908201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604082015260600190565b60208082526015908201527469742773206e6f7420616e20656d657267656e637960581b604082015260600190565b60208082526036908201527f303339302043616e27742073657420736f72746564207374616b657273206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f6040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f3033383020746869732061646472657373206469646e2774207374616b65206960408201526a1b881d1a1a5cc81c1bdbdb60aa1b606082015260800190565b60208082526017908201527f3033313320706f6f6c206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252602a908201527f3033313120416d6f756e742063616e2774206265206c657373207468616e20746040820152696865206d696e696d756d60b01b606082015260800190565b60208082526044908201527f6e756d626572206f6620736f72746564207374616b657273206d75737420626560408201527f206c657373207468616e206f7220657175616c20746f20746865206c6173742060608201526372616e6b60e01b608082015260a00190565b60208082526027908201527f303336312057726170706564546f6b656e2052657761726473206e6f7420617660408201526661696c61626c6560c81b606082015260800190565b602080825260149082015273125b99195e08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60208082526036908201527f303335302043616e277420736574206d61747572696e67207072696365206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252600490820152630303333360e41b604082015260600190565b6000838252604060208301526141e7604083018461474d565b600086825285602083015260a060408301526150c560a083018661474d565b6001600160a01b0394909416606083015250608001529392505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015215156101408201526101600190565b6000821982111561518a5761518a61523b565b500190565b6000826151aa57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156151c9576151c961523b565b500290565b6000828210156151e0576151e061523b565b500390565b6002810460018216806151f957607f821691505b6020821081141561521a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156152345761523461523b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e3a57600080fd5b8015158114611e3a57600080fdfea26469706673582212208c953702bfb2849138e2ac0144a1f0b78e48e9954f264ca2da9b9ced65b23c2464736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104285760003560e01c80638da5cb5b1161022b578063d025188b11610130578063e8153c93116100b8578063f3d9dc0d11610087578063f3d9dc0d146107d9578063f5e96fc9146107e1578063f8e829c3146107e9578063f8eeed62146107f1578063fd5e6dd1146107f957610428565b8063e8153c93146107a3578063eb850ae1146107ab578063f1b17a8b146107b3578063f2fde38b146107c657610428565b8063df7f92e0116100ff578063df7f92e014610759578063e081866914610761578063e113af5114610780578063e425df8c14610793578063e68b52e71461079b57610428565b8063d025188b14610715578063d49fab8a1461071d578063d7efb6b714610730578063de09ee201461073857610428565b8063aa7bcb57116101b3578063b88a802f11610182578063b88a802f146106e2578063bece7532146106ea578063c1201054146106f2578063c6c1decd146106fa578063cee0c8891461070257610428565b8063aa7bcb57146106ac578063b1b1e1c0146106b4578063b1dd61b6146106c7578063b7b30170146106cf57610428565b8063a08b2c79116101fa578063a08b2c7914610661578063a118c9a714610669578063a35ef3a71461067c578063a4e2d63414610691578063a8f7b3461461069957610428565b80638da5cb5b1461064157806395c2ba4714610649578063996c6cc3146106515780639e3dd80f1461065957610428565b80634e8bfdaa11610331578063785fa627116102b9578063817b1cd211610288578063817b1cd2146105f9578063850fa7cb146106015780638a9920b7146106295780638bfbbcbe146106315780638cf0e21e1461063957610428565b8063785fa627146105c357806378f4d413146105cb5780637b0472f0146105de5780637f2b6a0d146105f157610428565b80636b036f45116103005780636b036f451461059b578063715018a6146105a3578063725c9c49146105ab57806373f31703146105b3578063785df1f8146105bb57610428565b80634e8bfdaa1461057057806351eacbf0146105785780635d2631e2146105805780636847d0c51461059357610428565b8063395b3dac116103b4578063444a490211610383578063444a49021461051c57806345e913191461052f5780634bc4eeb2146105425780634c7c77fc1461054a5780634ddc1bdc1461055d57610428565b8063395b3dac146104d85780633fcdd82c146104eb5780634026478e146104fe57806343352d611461050657610428565b8063238a6c74116103fb578063238a6c74146104885780632aa8195e1461049d5780632d42cf7d146104a55780632d5cd1d6146104af57806331e244e5146104d057610428565b80630d6680871461042d5780630f4ef8a61461044b57806322f3e2d4146104605780632342e48014610475575b600080fd5b61043561080c565b604051610442919061487e565b60405180910390f35b610453610812565b60405161044291906147c4565b610468610821565b6040516104429190614903565b610435610483366004614426565b610831565b6104906108df565b604051610442919061490e565b61045361096d565b6104ad61097c565b005b6104c26104bd3660046143a4565b610ae0565b604051610442929190614887565b6104ad610b94565b6104c26104e6366004614699565b610bed565b6104356104f9366004614618565b610c4e565b6104ad610d12565b61050e610d54565b604051610442929190614828565b6104ad61052a366004614487565b610f11565b61046861053d366004614426565b611203565b610468611355565b610435610558366004614699565b611365565b6104ad61056b366004614699565b6113e9565b6104356114d5565b6104356114db565b6104ad61058e366004614451565b6114e1565b6104356115cb565b6104356115d1565b6104ad6115d7565b610453611620565b61043561162f565b610435611635565b61043561163b565b6104356105d93660046143a4565b611641565b6104ad6105ec366004614699565b6116ea565b610468611b6a565b610435611b7a565b61061461060f366004614426565b611b80565b604051610442999897969594939291906150e2565b6104ad611bee565b6104ad611e3d565b610468611eb5565b610453611ec5565b610435611ed4565b610453611ed9565b6104c2611ee8565b610468611ef2565b6104ad6106773660046145e0565b611f02565b610684611fee565b6040516104429190614815565b61046861209d565b6104ad6106a73660046143dc565b6120ad565b610435612162565b6104ad6106c2366004614618565b612168565b610490612a26565b6104c26106dd366004614426565b612a33565b6104ad612aea565b610453613312565b610435613321565b6104536133a7565b6104356107103660046143a4565b6133b6565b6104356133ca565b6104ad61072b3660046144bd565b6133d0565b610468613a5e565b61074b610746366004614618565b613a6e565b6040516104429291906147fc565b6104ad613aa6565b610769613af2565b6040516104429b9a99989796959493929190615125565b6104ad61078e366004614648565b613b1f565b610435613cad565b610435613cb3565b610453613cb9565b610435613cc8565b6104c26107c1366004614618565b613cce565b6104ad6107d43660046143a4565b613cfc565b610435613d6a565b610453613d70565b610435613d7f565b610435613db0565b61074b610807366004614618565b613db6565b606a5481565b608d546001600160a01b031681565b607b54600160b01b900460ff1681565b6001600160a01b0382166000908152608b60205260408082209051634f16042360e01b8152829173__$7fd944d8f8efff7c575121b9e933203c2c$__91634f16042391610885918790607e90600401614895565b60206040518083038186803b15801561089d57600080fd5b505af41580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190614630565b9150505b92915050565b607c80546108ec906151e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610918906151e5565b80156109655780601f1061093a57610100808354040283529160200191610965565b820191906000526020600020905b81548152906001019060200180831161094857829003601f168201915b505050505081565b6079546001600160a01b031681565b607a546001600160a01b0316610990613dc6565b6001600160a01b0316146109bf5760405162461bcd60e51b81526004016109b690614df8565b60405180910390fd5b606b54606a546069546109d29190615177565b6109dc9190615177565b4210156109fb5760405162461bcd60e51b81526004016109b690614ae2565b606f5415610a2757610a0b613d7f565b610a275760405162461bcd60e51b81526004016109b690614fa4565b60895415610a4e57608a54610a4e5760405162461bcd60e51b81526004016109b690614b2e565b60745415610a7457610a64607854607554611365565b610a745760745460768190556085555b607b805460ff60c01b1960ff60b81b19909116600160b81b1716600160c01b90811791829055608780549190920460ff1615156101000261ff00199091161790556040517fe8ef7a17c92d025d9c1ead1c6b3ca3b44d3283d0ee954f615c5c476911f629a590600090a1565b6001600160a01b0381166000908152608b602052604080822090516332a1b32160e01b815282918291829173__$171d2da81d2a08eb52330533595f0c4998$__916332a1b32191610b3991607e90608890600401614895565b604080518083038186803b158015610b5057600080fd5b505af4158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8891906146ba565b90945092505050915091565b607a546001600160a01b0316610ba8613dc6565b6001600160a01b031614610bce5760405162461bcd60e51b81526004016109b690614df8565b607b805462ff00ff60a01b1916600160a01b179055610beb613dca565b565b60008060008360705411610c02576000610c0f565b607054610c0f9085613e08565b905080610c23576000859250925050610c47565b610c2d8582613e14565b610c41610c3a8784613e14565b8790613e08565b92509250505b9250929050565b60665460009081906001600160a01b031663d06ca61f84610c6d611fee565b6040518363ffffffff1660e01b8152600401610c8a92919061508d565b60006040518083038186803b158015610ca257600080fd5b505afa158015610cb6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cde9190810190614526565b905080600181518110610d0157634e487b7160e01b600052603260045260246000fd5b60200260200101519150505b919050565b607a546001600160a01b0316610d26613dc6565b6001600160a01b031614610d4c5760405162461bcd60e51b81526004016109b690614df8565b610beb613dca565b606080600060898054905067ffffffffffffffff811115610d8557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610dae578160200160208202803683370190505b5060895490915060009067ffffffffffffffff811115610dde57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e07578160200160208202803683370190505b50905060005b608954811015610f075760898181548110610e3857634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015483516001600160a01b0390911690849083908110610e7757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505060898181548110610eb857634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154828281518110610eea57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610eff81615220565b915050610e0d565b5090925090509091565b607a546001600160a01b0316610f25613dc6565b6001600160a01b031614610f4b5760405162461bcd60e51b81526004016109b690614df8565b606b54606a54606954610f5e9190615177565b610f689190615177565b421015610f875760405162461bcd60e51b81526004016109b690614d54565b608a5415610f9b57610f9b608a60006142f0565b60005b6019811015611174576000838260198110610fc957634e487b7160e01b600052603260045260246000fd5b602002016020810190610fdc91906143a4565b6001600160a01b03161415610ff057611174565b608a604051806040016040528085846019811061101d57634e487b7160e01b600052603260045260246000fd5b60200201602081019061103091906143a4565b6001600160a01b0316815260200184846019811061105e57634e487b7160e01b600052603260045260246000fd5b60209081029190910135909152825460018082018555600094855293829020835160029092020180546001600160a01b0319166001600160a01b03909216919091178155910151908201556110b4908290615177565b608b60008584601981106110d857634e487b7160e01b600052603260045260246000fd5b6020020160208101906110eb91906143a4565b6001600160a01b03166001600160a01b0316815260200190815260200160002083836019811061112b57634e487b7160e01b600052603260045260246000fd5b60200201358154811061114e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600660089092020101558061116c81615220565b915050610f9e565b60888054829190611187906001906151ce565b815481106111a557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015410156111d55760405162461bcd60e51b81526004016109b690614f3a565b6040517f5c243cc6e4f210bf2dd86b8eca0ca891d3f8ad2eb09fbf91735eb348bc199c7e90600090a1505050565b6001600160a01b0382166000908152608b6020908152604080832080548251818502810185019093528083528493849084015b828210156112c857600084815260209081902060408051610120810182526008860290920180548352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460ff808216151560e085015261010091829004161515908301529083529092019101611236565b50505050905060008151116112ef5760405162461bcd60e51b81526004016109b690614e6e565b8051831061130f5760405162461bcd60e51b81526004016109b690614961565b80838151811061132f57634e487b7160e01b600052603260045260246000fd5b602002602001015161010001511561134b5760019150506108d9565b5060009392505050565b607b54600160a81b900460ff1681565b600082821115611377575060006108d9565b6073548311156113b95760735461138e8484613e08565b1161139b575060006108d9565b6073546113b2906113ac8585613e08565b90613e08565b90506108d9565b6073546113c68484613e2c565b106113d3575060006108d9565b6113b26113e08484613e2c565b60735490613e08565b607a546001600160a01b03166113fd613dc6565b6001600160a01b0316146114235760405162461bcd60e51b81526004016109b690614df8565b6000606f54116114455760405162461bcd60e51b81526004016109b690614a59565b600082116114655760405162461bcd60e51b81526004016109b690614cee565b428110156114855760405162461bcd60e51b81526004016109b690614b5e565b600061148f611620565b905061149b8184613e38565b60006114a684610c4e565b905060006114c06114b98361012c613e14565b8390613e08565b90506114ce30868387613f02565b5050505050565b606b5481565b606c5481565b607a546001600160a01b03166114f5613dc6565b6001600160a01b03161461151b5760405162461bcd60e51b81526004016109b690614df8565b608c546001600160a01b03848116911614156115495760405162461bcd60e51b81526004016109b690614cad565b60405163a9059cbb60e01b815283906001600160a01b0382169063a9059cbb9061157990859087906004016147fc565b602060405180830381600087803b15801561159357600080fd5b505af11580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ce91906145fc565b60705481565b60715481565b6115df613dc6565b6001600160a01b03166115f0611ec5565b6001600160a01b0316146116165760405162461bcd60e51b81526004016109b690614e39565b610beb6000613fa8565b6066546001600160a01b031690565b606f5481565b60785481565b606e5481565b6001600160a01b0381166000908152608b60205260408082209051630d46757760e41b8152829173__$171d2da81d2a08eb52330533595f0c4998$__9163d46757709161169391607e90600401614887565b60206040518083038186803b1580156116ab57600080fd5b505af41580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e39190614630565b9392505050565b607b54600160b01b900460ff168015611704575060695442115b6117205760405162461bcd60e51b81526004016109b690614eb9565b606a546069546117309190615177565b421061174e5760405162461bcd60e51b81526004016109b6906149c5565b607b54600160b81b900460ff16156117785760405162461bcd60e51b81526004016109b690614998565b60715482101561179a5760405162461bcd60e51b81526004016109b690614ef0565b607154608c546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b1580156117e357600080fd5b505af11580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b9190614630565b608c549091506000906001600160a01b031663d1ecfc6861183a613dc6565b6040518263ffffffff1660e01b815260040161185691906147c4565b602060405180830381600087803b15801561187057600080fd5b505af1158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a891906145fc565b6118bb576118b68583613e14565b6118be565b60005b606c549091506118ce9084613e2c565b6118e7826113ac88607254613e2c90919063ffffffff16565b11156119055760405162461bcd60e51b81526004016109b690614c67565b60006119118684610bed565b608c549097509091506001600160a01b03166323b872dd611930613dc6565b3061193b858b615177565b6040518463ffffffff1660e01b8152600401611959939291906147d8565b602060405180830381600087803b15801561197357600080fd5b505af1158015611987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ab91906145fc565b506119b68683613e08565b95508015611ab757608c5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b158015611a0d57600080fd5b505af1158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4591906143c0565b836040518363ffffffff1660e01b8152600401611a639291906147fc565b602060405180830381600087803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab591906145fc565b505b6000608b6000611ac5613dc6565b6001600160a01b031681526020810191909152604001600020549050611af3611aec613dc6565b8888613ffa565b607254611b009088613e2c565b6072819055606c5411611b1557611b15613dca565b611b1d613dc6565b6001600160a01b03167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446888884604051611b5993929190614895565b60405180910390a250505050505050565b607b54600160c01b900460ff1681565b60725481565b608b6020528160005260406000208181548110611b9c57600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701549598509396509194909391929160ff8082169161010090041689565b607b54600160a01b900460ff16611c175760405162461bcd60e51b81526004016109b690614d25565b600073__$60b6e19b11029f04c25a43d0435d86b2be$__63066f1dee608b6000611c3f613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611c7b919061487e565b60206040518083038186803b158015611c9357600080fd5b505af4158015611ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccb9190614630565b90508015611e3a5773__$171d2da81d2a08eb52330533595f0c4998$__63f66d9a4d608b6000611cf9613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401611d35919061487e565b60006040518083038186803b158015611d4d57600080fd5b505af4158015611d61573d6000803e3d6000fd5b5050608c546001600160a01b0316915063a9059cbb9050611d80613dc6565b836040518363ffffffff1660e01b8152600401611d9e9291906147fc565b602060405180830381600087803b158015611db857600080fd5b505af1158015611dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df091906145fc565b50611df9613dc6565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd82604051611e31919061487e565b60405180910390a25b50565b607a546001600160a01b0316611e51613dc6565b6001600160a01b031614611e775760405162461bcd60e51b81526004016109b690614df8565b607b805460ff60c81b1916600160c81b1790556040517f9331b2a38c658c57a39ea19b2709d928c28a12cc8fbb838d12b85148550f937d90600090a1565b607b54600160d01b900460ff1681565b6033546001600160a01b031690565b600581565b608e546001600160a01b031681565b6081546086549091565b607b54600160a01b900460ff1681565b607a546001600160a01b0316611f16613dc6565b6001600160a01b031614611f3c5760405162461bcd60e51b81526004016109b690614df8565b607b5460ff600160b01b9091041615158115151415611f6d5760405162461bcd60e51b81526004016109b690614be1565b607b805460ff60b01b1916600160b01b8315158102919091179182905560ff91041615611fc2576040517f3d31b97eef590df350bb2cdbc390034c613c9f23ea6ae1906682628c85248b5390600090a1611e3a565b6040517f763d36bfedf6707954f8bb39c2011a58a47a54844f2b3cdcd326c71cad0aa75390600090a150565b60408051600280825260608083018452926000929190602083019080368337505060675482519293506001600160a01b03169183915060009061204157634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260685482519116908290600190811061208057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152905090565b607b54600160b81b900460ff1681565b600054610100900460ff16806120c6575060005460ff16155b6120e25760405162461bcd60e51b81526004016109b690614daa565b600054610100900460ff1615801561210d576000805460ff1961ff0019909116610100171660011790555b606680546001600160a01b038087166001600160a01b031992831617909255606780548684169083161790556068805492851692909116919091179055801561215c576000805461ff00191690555b50505050565b606d5481565b80608b6000612175613dc6565b6001600160a01b0316815260208101919091526040016000205410156121ad5760405162461bcd60e51b81526004016109b690614feb565b608b60006121b9613dc6565b6001600160a01b031681526020810191909152604001600020546121ef5760405162461bcd60e51b81526004016109b690614b8c565b600073__$7fd944d8f8efff7c575121b9e933203c2c$__634f160423608b6000612217613dc6565b6001600160a01b03166001600160a01b0316815260200190815260200160002084607e6040518463ffffffff1660e01b815260040161225893929190614895565b60206040518083038186803b15801561227057600080fd5b505af4158015612284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a89190614630565b905060008073__$7fd944d8f8efff7c575121b9e933203c2c$__63f7ac9cba608b60006122d3613dc6565b6001600160a01b03166001600160a01b0316815260200190815260200160002086607e60886040518563ffffffff1660e01b815260040161231794939291906148ab565b604080518083038186803b15801561232e57600080fd5b505af4158015612342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236691906146ba565b909250905060006123778484615177565b607b54909150600160c01b900460ff16156127e257606f541561251e57811561251e5773__$7fd944d8f8efff7c575121b9e933203c2c$__6393aaeaf9608b60006123c0613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b81526004016123fe929190614887565b60006040518083038186803b15801561241657600080fd5b505af415801561242a573d6000803e3d6000fd5b5050608e546001600160a01b0316915063a9059cbb9050612449613dc6565b846040518363ffffffff1660e01b81526004016124679291906147fc565b602060405180830381600087803b15801561248157600080fd5b505af1158015612495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b991906145fc565b6124d55760405162461bcd60e51b81526004016109b69061506f565b6124dd613dc6565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612515919061487e565b60405180910390a25b82156125b95773__$7fd944d8f8efff7c575121b9e933203c2c$__6393aaeaf9608b600061254a613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020876040518363ffffffff1660e01b8152600401612588929190614887565b60006040518083038186803b1580156125a057600080fd5b505af41580156125b4573d6000803e3d6000fd5b505050505b600073__$7fd944d8f8efff7c575121b9e933203c2c$__635eac7af3608b60006125e1613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b815260040161261f929190614887565b60206040518083038186803b15801561263757600080fd5b505af415801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f9190614630565b905080156127e05773__$7fd944d8f8efff7c575121b9e933203c2c$__63ec8ecc02608b600061269d613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020886040518363ffffffff1660e01b81526004016126db929190614887565b60006040518083038186803b1580156126f357600080fd5b505af4158015612707573d6000803e3d6000fd5b5050608c546001600160a01b0316915063a9059cbb9050612726613dc6565b836040518363ffffffff1660e01b81526004016127449291906147fc565b602060405180830381600087803b15801561275e57600080fd5b505af1158015612772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279691906145fc565b5061279f613dc6565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516127d7919061487e565b60405180910390a25b505b80156114ce57608c54608d546040516370a0823160e01b815283926001600160a01b03908116926370a082319261281f92909116906004016147c4565b60206040518083038186803b15801561283757600080fd5b505afa15801561284b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286f9190614630565b101561288d5760405162461bcd60e51b81526004016109b690614c23565b73__$7fd944d8f8efff7c575121b9e933203c2c$__63eaff3050608b60006128b3613dc6565b6001600160a01b03166001600160a01b0316815260200190815260200160002087607e6040518463ffffffff1660e01b81526004016128f493929190614895565b60006040518083038186803b15801561290c57600080fd5b505af4158015612920573d6000803e3d6000fd5b5050608d546001600160a01b0316915063e4e103dc905061293f613dc6565b836040518363ffffffff1660e01b815260040161295d9291906147fc565b600060405180830381600087803b15801561297757600080fd5b505af115801561298b573d6000803e3d6000fd5b50505050612997613dc6565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac583886856040516129cf919061487e565b60405180910390a26129df613dc6565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051612a17919061487e565b60405180910390a25050505050565b607d80546108ec906151e5565b6001600160a01b0382166000908152608b60205260408082209051637bd64e5d60e11b815282918291829173__$7fd944d8f8efff7c575121b9e933203c2c$__9163f7ac9cba91612a8e918990607e906088906004016148ab565b604080518083038186803b158015612aa557600080fd5b505af4158015612ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612add91906146ba565b9097909650945050505050565b600073__$171d2da81d2a08eb52330533595f0c4998$__63d4675770608b6000612b12613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020607e6040518363ffffffff1660e01b8152600401612b51929190614887565b60206040518083038186803b158015612b6957600080fd5b505af4158015612b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba19190614630565b905060008073__$171d2da81d2a08eb52330533595f0c4998$__6332a1b321608b6000612bcc613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020607e60886040518463ffffffff1660e01b8152600401612c0e93929190614895565b604080518083038186803b158015612c2557600080fd5b505af4158015612c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5d91906146ba565b90925090506000612c6e8484615177565b607b54909150600160c01b900460ff16156130d157606f5415612e13578115612e135773__$171d2da81d2a08eb52330533595f0c4998$__6347dc9eee608b6000612cb7613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612cf3919061487e565b60006040518083038186803b158015612d0b57600080fd5b505af4158015612d1f573d6000803e3d6000fd5b5050608e546001600160a01b0316915063a9059cbb9050612d3e613dc6565b846040518363ffffffff1660e01b8152600401612d5c9291906147fc565b602060405180830381600087803b158015612d7657600080fd5b505af1158015612d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dae91906145fc565b612dca5760405162461bcd60e51b81526004016109b690614bc3565b612dd2613dc6565b6001600160a01b03167fd93fc6d1e8779271f55cdb0d5f7b6b05be64a2226a1ad050d3036f5609c1cdcf83604051612e0a919061487e565b60405180910390a25b8215612eac5773__$171d2da81d2a08eb52330533595f0c4998$__6347dc9eee608b6000612e3f613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612e7b919061487e565b60006040518083038186803b158015612e9357600080fd5b505af4158015612ea7573d6000803e3d6000fd5b505050505b600073__$60b6e19b11029f04c25a43d0435d86b2be$__63066f1dee608b6000612ed4613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612f10919061487e565b60206040518083038186803b158015612f2857600080fd5b505af4158015612f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f609190614630565b905080156130cf5773__$171d2da81d2a08eb52330533595f0c4998$__63f66d9a4d608b6000612f8e613dc6565b6001600160a01b03166001600160a01b031681526020019081526020016000206040518263ffffffff1660e01b8152600401612fca919061487e565b60006040518083038186803b158015612fe257600080fd5b505af4158015612ff6573d6000803e3d6000fd5b5050608c546001600160a01b0316915063a9059cbb9050613015613dc6565b836040518363ffffffff1660e01b81526004016130339291906147fc565b602060405180830381600087803b15801561304d57600080fd5b505af1158015613061573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308591906145fc565b5061308e613dc6565b6001600160a01b03167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd826040516130c6919061487e565b60405180910390a25b505b801561215c57608c54608d546040516370a0823160e01b815283926001600160a01b03908116926370a082319261310e92909116906004016147c4565b60206040518083038186803b15801561312657600080fd5b505afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e9190614630565b101561317c5760405162461bcd60e51b81526004016109b690614c23565b73__$171d2da81d2a08eb52330533595f0c4998$__634142c652608b60006131a2613dc6565b6001600160a01b03166001600160a01b03168152602001908152602001600020607e6040518363ffffffff1660e01b81526004016131e1929190614887565b60006040518083038186803b1580156131f957600080fd5b505af415801561320d573d6000803e3d6000fd5b5050608d546001600160a01b0316915063e4e103dc905061322c613dc6565b836040518363ffffffff1660e01b815260040161324a9291906147fc565b600060405180830381600087803b15801561326457600080fd5b505af1158015613278573d6000803e3d6000fd5b50505050613284613dc6565b6001600160a01b03167f115e2fe760f98d4fd0828d7741ae2070e7db700f892efbfe98448b53ac583886856040516132bc919061487e565b60405180910390a26132cc613dc6565b6001600160a01b03167f723b06f6c3a94dc82019852e6aa01c0241fba5f84410b9003ddc3440ad499e5984604051613304919061487e565b60405180910390a250505050565b607b546001600160a01b031681565b6065546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133529030906004016147c4565b60206040518083038186803b15801561336a57600080fd5b505afa15801561337e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a29190614630565b905090565b607a546001600160a01b031681565b60006133c18261416e565b60ff1692915050565b60735481565b607b54600160b01b900460ff1680156133ea575060695442115b6134065760405162461bcd60e51b81526004016109b690614eb9565b606a546069546134169190615177565b42106134345760405162461bcd60e51b81526004016109b6906149c5565b607b54600160b81b900460ff161561345e5760405162461bcd60e51b81526004016109b690614998565b82811461347d5760405162461bcd60e51b81526004016109b690614a07565b6000805b8481101561351e576071548686838181106134ac57634e487b7160e01b600052603260045260246000fd5b9050602002013510156134d15760405162461bcd60e51b81526004016109b690614ef0565b61350a8686838181106134f457634e487b7160e01b600052603260045260246000fd5b9050602002013583613e2c90919063ffffffff16565b91508061351681615220565b915050613481565b50607154608c546040805163771a3a1d60e01b815290516000926001600160a01b03169163771a3a1d91600480830192602092919082900301818787803b15801561356857600080fd5b505af115801561357c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a09190614630565b608c549091506000906001600160a01b031663d1ecfc686135bf613dc6565b6040518263ffffffff1660e01b81526004016135db91906147c4565b602060405180830381600087803b1580156135f557600080fd5b505af1158015613609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362d91906145fc565b6136405761363b8483613e14565b613643565b60005b606c549091506136539084613e2c565b61366c826113ac87607254613e2c90919063ffffffff16565b111561368a5760405162461bcd60e51b81526004016109b690614c67565b60006136968584610bed565b608c549096509091506001600160a01b03166323b872dd6136b5613dc6565b306136c0858a615177565b6040518463ffffffff1660e01b81526004016136de939291906147d8565b602060405180830381600087803b1580156136f857600080fd5b505af115801561370c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373091906145fc565b5061373b8583613e08565b9450801561383c57608c5460408051634a5db0a960e01b815290516001600160a01b039092169163a9059cbb918391634a5db0a9916004808201926020929091908290030181600087803b15801561379257600080fd5b505af11580156137a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ca91906143c0565b836040518363ffffffff1660e01b81526004016137e89291906147fc565b602060405180830381600087803b15801561380257600080fd5b505af1158015613816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383a91906145fc565b505b6000608b600061384a613dc6565b6001600160a01b03168152602081019190915260400160009081205491505b898110156139b55760008b8b8381811061389357634e487b7160e01b600052603260045260246000fd5b608c54602090910292909201359250506001600160a01b031663d1ecfc686138b9613dc6565b6040518263ffffffff1660e01b81526004016138d591906147c4565b602060405180830381600087803b1580156138ef57600080fd5b505af1158015613903573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392791906145fc565b61393a576139358187613e14565b61393d565b60005b94506139498187610bed565b90945090506139588186613e08565b9050613992613965613dc6565b828c8c8681811061398657634e487b7160e01b600052603260045260246000fd5b90506020020135613ffa565b60725461399f9082613e2c565b60725550806139ad81615220565b915050613869565b5060006001608b60006139c6613dc6565b6001600160a01b031681526020810191909152604001600020546139ea91906151ce565b9050606c54607254106139ff576139ff613dca565b613a07613dc6565b6001600160a01b03167f852fe7a2ad7b2c8c0a0e9b927734feb1acc3e8bc608b8921d4c4768c6193c33b8c8c8c8c8787604051613a49969594939291906148c6565b60405180910390a25050505050505050505050565b607b54600160c81b900460ff1681565b608a8181548110613a7e57600080fd5b6000918252602090912060029091020180546001909101546001600160a01b03909116915082565b607a546001600160a01b0316613aba613dc6565b6001600160a01b031614613ae05760405162461bcd60e51b81526004016109b690614df8565b607b80546001600160a01b0319169055565b607e54607f5460805460815460825460835460845460855460865460875460ff808216916101009004168b565b607a546001600160a01b0316613b33613dc6565b6001600160a01b031614613b595760405162461bcd60e51b81526004016109b690614df8565b606b54606a54606954613b6c9190615177565b613b769190615177565b421015613b955760405162461bcd60e51b81526004016109b690615019565b8315613bea57607b546001600160a01b031615613bd457607b54613bc1906001600160a01b03166141ef565b6073819055608155607754608655613be5565b607385905560818590556077546086555b6114ce565b607b546001600160a01b031615613c69576001600160a01b03821615613c4257607b54613c1f906001600160a01b03166141ef565b607355613c2b826141ef565b608155613c378261416e565b60ff16608655613be5565b607b54613c57906001600160a01b03166141ef565b607355608183905560868190556114ce565b6001600160a01b03821615613c9d576073859055613c86826141ef565b608155613c928261416e565b60ff166086556114ce565b6073949094555060815550608655565b60745481565b60775481565b608c546001600160a01b031681565b60755481565b60888181548110613cde57600080fd5b60009182526020909120600290910201805460019091015490915082565b613d04613dc6565b6001600160a01b0316613d15611ec5565b6001600160a01b031614613d3b5760405162461bcd60e51b81526004016109b690614e39565b6001600160a01b038116613d615760405162461bcd60e51b81526004016109b690614a9c565b611e3a81613fa8565b60765481565b6065546001600160a01b031690565b608e546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133529030906004016147c4565b60695481565b60898181548110613a7e57600080fd5b3390565b607b805460ff60b81b1916600160b81b1790556040517f2e136745550967f28b779ce8c395ca060a2f844edfb5b06631fe677f66f9e30590600090a1565b60006116e382846151ce565b60006116e3612710613e26858561427e565b9061428a565b60006116e38284615177565b60655460405163095ea7b360e01b81526001600160a01b039091169063095ea7b390613e6a90859085906004016147fc565b602060405180830381600087803b158015613e8457600080fd5b505af1158015613e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ebc91906145fc565b50816001600160a01b03167fd77df63d9076d067d9fd7af16c3d67db48b84064c3314f5900ae919922d364a182604051613ef6919061487e565b60405180910390a25050565b6001600160a01b038416613f1557600080fd5b6066546001600160a01b03166338ed17398484613f30611fee565b88866040518663ffffffff1660e01b8152600401613f529594939291906150a6565b600060405180830381600087803b158015613f6c57600080fd5b505af1158015613f80573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114ce9190810190614526565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805180820182526001600160a01b038086168083526000908152608b602081815285832080548287019081526089805460018181018355918752975160029889027f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cb81018054929099166001600160a01b03199092169190911790975590517f5bfa74c743914028161ae645d300d90bbdc659f169ca1469ec86b4960f7266cc909601959095559181528551610120810187528881524281830181815297820185815260608301918252608083018a815260001960a0850181815260c0860191825260e086018981526101008781018b81528a54808e018c559a8c5298909a20965160089099029096019788559a51988701989098559051978501979097555160038401559451600483015594516005820155915160068301559151600790910180549351151590920261ff001991151560ff199490941693909317169190911790556141698183614296565b505050565b6000808290506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156141af57600080fd5b505afa1580156141c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141e7919061472c565b949350505050565b6000808290506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561423057600080fd5b505afa158015614244573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426891906146dd565b50505091505060008112156116e35760006141e7565b60006116e382846151af565b60006116e3828461518f565b6089546000906142a8906001906151ce565b9050806142b55760788390555b6072546142e8906142c69084613e2c565b613e266142d3868661427e565b6072546078546142e29161427e565b90613e2c565b607855505050565b5080546000825560020290600052602060002090810190611e3a91905b808211156143325780546001600160a01b03191681556000600182015560020161430d565b5090565b8061032081018310156108d957600080fd5b60008083601f840112614359578182fd5b50813567ffffffffffffffff811115614370578182fd5b6020830191508360208083028501011115610c4757600080fd5b805169ffffffffffffffffffff81168114610d0d57600080fd5b6000602082840312156143b5578081fd5b81356116e381615267565b6000602082840312156143d1578081fd5b81516116e381615267565b6000806000606084860312156143f0578182fd5b83356143fb81615267565b9250602084013561440b81615267565b9150604084013561441b81615267565b809150509250925092565b60008060408385031215614438578182fd5b823561444381615267565b946020939093013593505050565b600080600060608486031215614465578283fd5b833561447081615267565b925060208401359150604084013561441b81615267565b600080610640838503121561449a578182fd5b6144a48484614336565b91506144b4846103208501614336565b90509250929050565b600080600080604085870312156144d2578081fd5b843567ffffffffffffffff808211156144e9578283fd5b6144f588838901614348565b9096509450602087013591508082111561450d578283fd5b5061451a87828801614348565b95989497509550505050565b60006020808385031215614538578182fd5b825167ffffffffffffffff8082111561454f578384fd5b818501915085601f830112614562578384fd5b81518181111561457457614574615251565b8381026040518582820101818110858211171561459357614593615251565b604052828152858101935084860182860187018a10156145b1578788fd5b8795505b838610156145d35780518552600195909501949386019386016145b5565b5098975050505050505050565b6000602082840312156145f1578081fd5b81356116e38161527c565b60006020828403121561460d578081fd5b81516116e38161527c565b600060208284031215614629578081fd5b5035919050565b600060208284031215614641578081fd5b5051919050565b600080600080600060a0868803121561465f578283fd5b8535945060208601356146718161527c565b935060408601359250606086013561468881615267565b949793965091946080013592915050565b600080604083850312156146ab578182fd5b50508035926020909101359150565b600080604083850312156146cc578182fd5b505080516020909101519092909150565b600080600080600060a086880312156146f4578283fd5b6146fd8661438a565b94506020860151935060408601519250606086015191506147206080870161438a565b90509295509295909350565b60006020828403121561473d578081fd5b815160ff811681146116e3578182fd5b6000815180845260208085019450808401835b838110156147855781516001600160a01b031687529582019590820190600101614760565b509495945050505050565b81835260006001600160fb1b038311156147a8578081fd5b6020830280836020870137939093016020019283525090919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082526116e3602083018461474d565b60006040825261483b604083018561474d565b828103602084810191909152845180835285820192820190845b8181101561487157845183529383019391830191600101614855565b5090979650505050505050565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b6000608082526148da60808301888a614790565b82810360208401526148ed818789614790565b6040840195909552505060600152949350505050565b901515815260200190565b6000602080835283518082850152825b8181101561493a5785810183015185820160400152820161491e565b8181111561494b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526017908201527f30333831207468697320696e6465782065786365656473000000000000000000604082015260600190565b6020808252601390820152720c0ccc4c08141bdbdb081a5cc81b1bd8dad959606a1b604082015260600190565b60208082526022908201527f303331362043616e206e6f74207374616b65206166746572206c6f636b206461604082015261746560f01b606082015260800190565b60208082526032908201527f30333135207374616b696e67416d6f756e7420616e642070726564696374696f6040820152710dce640d8cadccee8d040dad2e6dac2e8c6d60731b606082015260800190565b60208082526023908201527f303334302054686520706f6f6c206973206f6e6c7920544f544d2072657761726040820152623232b960e91b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602c908201527f303336302043616e277420656e6420706f6f6c206265666f726520746865206d60408201526b617475726974792074696d6560a01b606082015260800190565b6020808252601690820152750c0ccd8c88199a5c9cdd081cda1bdd5b19081cdbdc9d60521b604082015260600190565b6020808252601490820152733033343220446561646c696e65206973206c6f7760601b604082015260600190565b6020808252601d908201527f5573657220646f6573206e6f74206861766520616e79207374616b6573000000604082015260600190565b6020808252600490820152630303332360e41b604082015260600190565b60208082526022908201527f4e6f74206368616e67696e67207468652061637469766174696f6e2073746174604082015261757360f01b606082015260800190565b60208082526024908201527f4e6f7420656e6f7567682062616c616e636520696e20726577617264206d616e60408201526330b3b2b960e11b606082015260800190565b60208082526026908201527f303331322043616e2774207374616b652061626f76652073697a6520616c6c6f60408201526531b0ba34b7b760d11b606082015260800190565b60208082526021908201527f3033373020746f74656d732063616e206e6f74206265207472616e73666572656040820152601960fa1b606082015260800190565b60208082526019908201527f3033343120416d6f756e742063616e2774206265207a65726f00000000000000604082015260600190565b60208082526015908201527469742773206e6f7420616e20656d657267656e637960581b604082015260600190565b60208082526036908201527f303339302043616e27742073657420736f72746564207374616b657273206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f303330302063616c6c6572206973206e6f74206120706f6f6c2063726561746f6040820152603960f91b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f3033383020746869732061646472657373206469646e2774207374616b65206960408201526a1b881d1a1a5cc81c1bdbdb60aa1b606082015260800190565b60208082526017908201527f3033313320706f6f6c206973206e6f7420616374697665000000000000000000604082015260600190565b6020808252602a908201527f3033313120416d6f756e742063616e2774206265206c657373207468616e20746040820152696865206d696e696d756d60b01b606082015260800190565b60208082526044908201527f6e756d626572206f6620736f72746564207374616b657273206d75737420626560408201527f206c657373207468616e206f7220657175616c20746f20746865206c6173742060608201526372616e6b60e01b608082015260a00190565b60208082526027908201527f303336312057726170706564546f6b656e2052657761726473206e6f7420617660408201526661696c61626c6560c81b606082015260800190565b602080825260149082015273125b99195e08191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60208082526036908201527f303335302043616e277420736574206d61747572696e67207072696365206265604082015275666f726520746865206d617475726974792074696d6560501b606082015260800190565b6020808252600490820152630303333360e41b604082015260600190565b6000838252604060208301526141e7604083018461474d565b600086825285602083015260a060408301526150c560a083018661474d565b6001600160a01b0394909416606083015250608001529392505050565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152151561012083015215156101408201526101600190565b6000821982111561518a5761518a61523b565b500190565b6000826151aa57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156151c9576151c961523b565b500290565b6000828210156151e0576151e061523b565b500390565b6002810460018216806151f957607f821691505b6020821081141561521a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156152345761523461523b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611e3a57600080fd5b8015158114611e3a57600080fdfea26469706673582212208c953702bfb2849138e2ac0144a1f0b78e48e9954f264ca2da9b9ced65b23c2464736f6c63430008000033",
  "libraries": {
    "CalculateRewardLib": "0x7faB30Aad42a9B397A2fE39FEfacb011a821D6b3",
    "ClaimRewardLib": "0xFCF25983800344ffEeb35f6bc8A4FAd1dFfe867d",
    "IndexedClaimRewardLib": "0xc38B95e659e3F3edb4a97032fB3855711549C6d8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getEstimatedWrappedTokenForUSD(uint256)": {
        "params": {
          "_amount": "Amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMaturingPrice(uint256,bool,uint256,address,uint256)": {
        "params": {
          "_predictionPrice": "is ignored if oracle is not zero address.When there is no oracle, _predictionPrice is the maturingPrice and is set manually by the pool creator",
          "_prizePrice": "is ignored if oracle is not zero address.When there is no oracle, _predictionPrice is the maturingPrice and is set manually by the pool creator"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collaborativeReward()": {
        "notice": "Based on the white paper, the collaborative reward can be 20% (2000), 25% (2500) or 35% (3500)."
      },
      "hasUnStaked(address,uint256)": {
        "notice": "hasUnStaked return true if the user staked in the pool and then  has unStaked it (claimed)"
      },
      "setOracleToZero()": {
        "notice": "Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available"
      },
      "setSortedStakers(address[25],uint256[25])": {
        "notice": "Sets oracle to zero in case it was given incorrectly by the owner,         or it is not available"
      },
      "usdPrizeAmount()": {
        "notice": "usdPrizeAmount is the enabler of WrappedToken rewarder; If it is set to 0  then the pool is only TOTM rewarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 259,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1353,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "USDCContract",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20)988"
      },
      {
        "astId": 1438,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "swapRouter",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IPancakeRouter02)7531"
      },
      {
        "astId": 1440,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "BUSD_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 1442,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "WRAPPED_Token_CONTRACT_ADDRESS",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 4923,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "launchDate",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 4925,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "lockTime",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 4927,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "maturityTime",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 4929,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "sizeAllocation",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 4931,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakeApr",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 4933,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "prizeAmount",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 4936,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "usdPrizeAmount",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 4938,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakeTaxRate",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 4940,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "minimumStakeAmount",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 4942,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "totalStaked",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 4944,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "maturingPrice",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 4946,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "potentialCollabReward",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 4948,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "collaborativeRange",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 4951,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "collaborativeReward",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 4953,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "oracleDecimals",
        "offset": 0,
        "slot": "119",
        "type": "t_uint256"
      },
      {
        "astId": 4955,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "averagePricePrediction",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      },
      {
        "astId": 4957,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakingPoolImplementation",
        "offset": 0,
        "slot": "121",
        "type": "t_address"
      },
      {
        "astId": 4959,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "poolCreator",
        "offset": 0,
        "slot": "122",
        "type": "t_address"
      },
      {
        "astId": 4961,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "oracleContract",
        "offset": 0,
        "slot": "123",
        "type": "t_address"
      },
      {
        "astId": 4963,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isAnEmergency",
        "offset": 20,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4965,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isEnhancedEnabled",
        "offset": 21,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4967,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isActive",
        "offset": 22,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4969,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isLocked",
        "offset": 23,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4971,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isMatured",
        "offset": 24,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4973,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "isDeleted",
        "offset": 25,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4976,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "upgradeEnabled",
        "offset": 26,
        "slot": "123",
        "type": "t_bool"
      },
      {
        "astId": 4978,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "wrappedTokenSymbol",
        "offset": 0,
        "slot": "124",
        "type": "t_string_storage"
      },
      {
        "astId": 4980,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "poolType",
        "offset": 0,
        "slot": "125",
        "type": "t_string_storage"
      },
      {
        "astId": 4983,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "lps",
        "offset": 0,
        "slot": "126",
        "type": "t_struct(LibParams)4889_storage"
      },
      {
        "astId": 4987,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "prizeRewardRates",
        "offset": 0,
        "slot": "136",
        "type": "t_array(t_struct(PrizeRewardRate)4918_storage)dyn_storage"
      },
      {
        "astId": 4991,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "stakers",
        "offset": 0,
        "slot": "137",
        "type": "t_array(t_struct(Staker)4913_storage)dyn_storage"
      },
      {
        "astId": 4995,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "sortedStakers",
        "offset": 0,
        "slot": "138",
        "type": "t_array(t_struct(Staker)4913_storage)dyn_storage"
      },
      {
        "astId": 5001,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "predictions",
        "offset": 0,
        "slot": "139",
        "type": "t_mapping(t_address,t_array(t_struct(StakeWithPrediction)4908_storage)dyn_storage)"
      },
      {
        "astId": 5004,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "totemToken",
        "offset": 0,
        "slot": "140",
        "type": "t_contract(ITotemToken)7652"
      },
      {
        "astId": 5007,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "rewardManager",
        "offset": 0,
        "slot": "141",
        "type": "t_contract(IRewardManager)7559"
      },
      {
        "astId": 5010,
        "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
        "label": "wrappedToken",
        "offset": 0,
        "slot": "142",
        "type": "t_contract(IERC20)988"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PrizeRewardRate)4918_storage)dyn_storage": {
        "base": "t_struct(PrizeRewardRate)4918_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingPoolStorageStructure.PrizeRewardRate[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakeWithPrediction)4908_storage)dyn_storage": {
        "base": "t_struct(StakeWithPrediction)4908_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingPoolStorageStructure.StakeWithPrediction[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Staker)4913_storage)dyn_storage": {
        "base": "t_struct(Staker)4913_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingPoolStorageStructure.Staker[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)988": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter02)7531": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter02",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardManager)7559": {
        "encoding": "inplace",
        "label": "contract IRewardManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITotemToken)7652": {
        "encoding": "inplace",
        "label": "contract ITotemToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(StakeWithPrediction)4908_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingPoolStorageStructure.StakeWithPrediction[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(StakeWithPrediction)4908_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LibParams)4889_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.LibParams",
        "members": [
          {
            "astId": 4868,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "launchDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4870,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4872,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "maturityTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4874,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "maturingPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4876,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "usdPrizeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4878,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "prizeAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4880,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakeApr",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4882,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "collaborativeReward",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4884,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "oracleDecimals",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4886,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "isEnhancedEnabled",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 4888,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "isMatured",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(PrizeRewardRate)4918_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.PrizeRewardRate",
        "members": [
          {
            "astId": 4915,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "rank",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4917,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StakeWithPrediction)4908_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.StakeWithPrediction",
        "members": [
          {
            "astId": 4891,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakedBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4893,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4895,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "amountWithdrawn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4897,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "lastWithdrawalTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4899,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "pricePrediction",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4901,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "difference",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4903,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "rank",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4905,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "prizeRewardWithdrawn",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 4907,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "didUnstake",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Staker)4913_storage": {
        "encoding": "inplace",
        "label": "struct StakingPoolStorageStructure.Staker",
        "members": [
          {
            "astId": 4910,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "stakerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4912,
            "contract": "contracts/Staking/StakingPoolImplementation.sol:StakingPoolImplementation",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}